<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack's Blog</title><link href="https://jackevansevo.github.io/" rel="alternate"></link><link href="https://jackevansevo.github.io/index.xml" rel="self"></link><id>https://jackevansevo.github.io/</id><updated>2024-07-13T00:00:00+01:00</updated><entry><title>Trying zed</title><link href="https://jackevansevo.github.io/trying-zed.html" rel="alternate"></link><published>2024-07-13T00:00:00+01:00</published><updated>2024-07-13T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2024-07-13:/trying-zed.html</id><summary type="html">&lt;p&gt;I've been following the development of &lt;a href="https://zed.dev/"&gt;Zed&lt;/a&gt; for a while. As
a pretty diehard vim user myself, my interest was peaked after reading &lt;a href="https://registerspill.thorstenball.com/p/from-vim-to-zed"&gt;From
Vim to Zed&lt;/a&gt; by
&lt;a href="https://substack.com/profile/1234646-thorsten-ball"&gt;Thorsten Ball&lt;/a&gt;, which
documents the experience of a long time vim switching to Zed.&lt;/p&gt;
&lt;p&gt;I also recently finished watching an interview with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been following the development of &lt;a href="https://zed.dev/"&gt;Zed&lt;/a&gt; for a while. As
a pretty diehard vim user myself, my interest was peaked after reading &lt;a href="https://registerspill.thorstenball.com/p/from-vim-to-zed"&gt;From
Vim to Zed&lt;/a&gt; by
&lt;a href="https://substack.com/profile/1234646-thorsten-ball"&gt;Thorsten Ball&lt;/a&gt;, which
documents the experience of a long time vim switching to Zed.&lt;/p&gt;
&lt;p&gt;I also recently finished watching an interview with the founder (Nathan Sobo)
on the &lt;a href="https://www.youtube.com/watch?v=fV4aPy1bmY0"&gt;Developer Voices Podcast&lt;/a&gt;&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/fV4aPy1bmY0" title="Building the Zed Text Editor (with Nathan Sobo)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;On a more personal note, I noticed the Zed team recently hired some super
talented developers that I respect/look up to (so it must be good right?).&lt;/p&gt;
&lt;p&gt;So a couple of weeks ago I decided to ditch neovim completely and try out Zed,
using it for 100% of my day to day coding. After two weeks I thought I'd share
how my experience went.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Things I liked&lt;/h2&gt;
&lt;h3&gt;Change of scenery&lt;/h3&gt;
&lt;p&gt;A little weird to start with, but I've been using a pretty similar vim setup
for a decade now, so trying something new was a nice change of scenery.&lt;/p&gt;
&lt;p&gt;Kind of like switching to working from a coffee shop,co-working space, or
outdoor space after being holed up in your office for an extended period of
time&lt;/p&gt;
&lt;p&gt;Was the code I wrote any better as a result? I doubt it. But was it refreshing
and exciting to be writing code in an environment that felt completely new.&lt;/p&gt;
&lt;h3&gt;GUI Appearance&lt;/h3&gt;
&lt;p&gt;Whilst I do appreciate the aesthetic of my terminal neovim setup, it's
difficult to deny a well designed GUI editor simply looks better.&lt;/p&gt;
&lt;p&gt;Instead of having to hack together splits, tabbars and statuslines with unicode
symbols and text UI elements in Zed just look way nicer.&lt;/p&gt;
&lt;p&gt;Opening zed for the first time I feel like they've put a lot of effort into
making things look beautiful. I'm a bit fan of their default font and the
builtin colour schemes.&lt;/p&gt;
&lt;h3&gt;Sensible Balance Between Built-Ins vs 3rd Party Plugins&lt;/h3&gt;
&lt;p&gt;It's my understanding Zed has only recently opened up it's core to allow
community members to start writing their own editor extensions. Instead of
relying on community plugins the creators seem to be aiming for a more curated
experience where core functionality is provided by the editor itself. To get an
idea about what's included, check out the &lt;a href="https://zed.dev/features"&gt;feature Just
checklist&lt;/a&gt; on their site&lt;/p&gt;
&lt;p&gt;Unlike neovim which is completely modular, Zed provides a lot of useful
features out of the box such as git integration, auto completion, auto pairs,
LSP support and tree sitter.&lt;/p&gt;
&lt;p&gt;Vim/Neovim is pretty barebones in comparison, instead you have to reach for
third party plugins to provide useful functionality.&lt;/p&gt;
&lt;p&gt;In my opinion this is both the ecosystems biggest strength, and its biggest
weakness. Although there's a healthy ecosystem of plugins to choose from, it's
easy to feel a sense of decision paralysis when deciding which combination of
plugins to use.&lt;/p&gt;
&lt;p&gt;I love to tweak and tinker with my neovim configuration as much as anyone, but
lately I'm seeing more value in using a setup that's curated from the ground
up. Things are just guaranteed to work together in a way that a myriad of third
party plugins can't.&lt;/p&gt;
&lt;p&gt;I think it's a positive thing that text-editors like Zed (and helix)
acknowledge the utility of certain functionality and provide these features out
of the box. I think over time I'd like to see neovim do the same, (why aren't
&lt;a href="https://github.com/nvim-treesitter/nvim-treesitter"&gt;'nvim-treesitter/nvim-treesitter'&lt;/a&gt;
and &lt;a href="https://github.com/neovim/nvim-lspconfig"&gt;nvim-lspconfig&lt;/a&gt;) just part of
core neovim already?&lt;/p&gt;
&lt;p&gt;This meant I was able to fire up Zed and actually start being productive with
essentially zero tweaks to my config. I chose a colour scheme I liked, enabled
Vim mode and suddenly I was writing code.&lt;/p&gt;
&lt;h3&gt;Comprehensive vim mode&lt;/h3&gt;
&lt;p&gt;Coming from neovim it's a non-starter for me if an editor doesn't support modal
editing or provide vim key mappings. A lot of editors kind of get the basics
right, but there's weird corners where things ends up not working as you'd
expect. Unless you're a vim user this kind of uncanny valley behaviour is
difficult to explain.&lt;/p&gt;
&lt;p&gt;Thankfully in Zed the vim mode feels really well thought out, it complements
the editor experience and usually does what you'd expect it to.&lt;/p&gt;
&lt;p&gt;There's a really interesting discussion on zed's vim-mode and why they chose to
not 'just embed neovim' and instead do their own things (spoiler they have
different goals).&lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;The editor feels super snappy, responsive and fairly light on resources. One of
the things that prevents me from ever using VSCode for any length of time is
that the experience feels sluggish, especially on older hardware.&lt;/p&gt;
&lt;p&gt;At no point during my trial did the editor freeze or or feel laggy, everything
felt pretty buttery smooth.&lt;/p&gt;
&lt;h3&gt;Click to open files&lt;/h3&gt;
&lt;p&gt;Something super simple (but something completely missing from my terminal
workflow) is the ability to click to open a file in the terminal output and
have this pop up in the editor.&lt;/p&gt;
&lt;p&gt;This is great when running tests or linters and just directly jumping to the
location in your editor to fix the problem.&lt;/p&gt;
&lt;p&gt;In neovim I'm accustomed to highlighting the path to a file in a terminal tab,
switching back to my neovim tab and then opening with &lt;code&gt;:e &amp;lt;filename&amp;gt;&lt;/code&gt;, which in
comparison is super inconvenient.&lt;/p&gt;
&lt;p&gt;Now I've gotten used to the way Zed handles this it will be frustrating to ever
revert back.&lt;/p&gt;
&lt;h3&gt;Multi cursors&lt;/h3&gt;
&lt;p&gt;There's a group of people in the vim community that are adamant multi-cursors
ren't something that's needed. Technically you &lt;strong&gt;can&lt;/strong&gt; do anything achievable
with multi-cursors, but IMO that doesn't mean you &lt;strong&gt;should&lt;/strong&gt; settle for it.&lt;/p&gt;
&lt;p&gt;Zed manages to implement this feature in a way that feels like it complements
vim and feels much more useable that whatever the vim alternative would be.&lt;/p&gt;
&lt;h3&gt;Built in terminal&lt;/h3&gt;
&lt;p&gt;When I decided I give Zed a try I told myself I'd go all in, abandoning
a designated terminal app completely. So when running tests, scripts and
services I've been doing using Zeds builtin terminal.&lt;/p&gt;
&lt;p&gt;I like being able to quickly access the builtin terminal with Command+J, having
a keybinding on the home-row makes it easy to access. Likewise being able to
toggle full-screen this window with Shift+Escape means I was able to completely
replicate what I was doing inside Iterm beforehand.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Things I Disliked&lt;/h2&gt;
&lt;h3&gt;Buffer/Split Management&lt;/h3&gt;
&lt;p&gt;My brain has been altered by the way vim/neovim manages splits and buffers.
Fundamentally this makes it difficult for me to adapt to a tab based workflow.
In vim a split is just a window into underlying buffers. Splits share the same
underlying buffers, meaning you can cycle between all open buffers in any
split.&lt;/p&gt;
&lt;p&gt;In zed (and most other GUI editors) if you make a separate window split, you
can only cycle through tabs that belong to that split. Frequently, I found
myself making new splits and having to do some manually tab management to get
what I wanted.&lt;/p&gt;
&lt;p&gt;Furthermore, one of the settings I have in enabled in neovim is
splitright/splitbelow. This means when I create a new split it automatically
focusses the new split to the right (or below) of my existing window. In zed
the opposite happens, which I found quite jarring.&lt;/p&gt;
&lt;h3&gt;LSP Support&lt;/h3&gt;
&lt;p&gt;I'm used to running both ruff and pylsp at the same time, the former helps lint
&amp;amp; format my code whereas the latter does more typical language server things
like provide jump to definition and variable renaming.&lt;/p&gt;
&lt;p&gt;Currently it's only possible to use Python with the default &lt;code&gt;pyright&lt;/code&gt; language
server https://zed.dev/docs/languages/python&lt;/p&gt;
&lt;p&gt;This really is one of major things preventing me from making the leap to Zed
completely. I really hope in the future they open up the editor to support any
LSP's (not just the default recommended one), and allow multiple of them to run
at the same time.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall my experience was positive and I'm excited to see how the editor
evolves/improves other time. If you're curious, I'd encourage you to give it
a try yourself.&lt;/p&gt;
&lt;p&gt;In the modern era of boated election apps and excessive RAM usage it's awesome
to see the original authors of Atom (and it's electron framework cousin) take
another stab at building an editor but this time with a focus on performance.&lt;/p&gt;
&lt;p&gt;I think once the LSP support is more mature I'll definitely be giving it
another go!&lt;/p&gt;</content><category term="misc"></category><category term="neovim"></category><category term="vim"></category><category term="editors"></category></entry><entry><title>Python Monorepo Tooling With Pants 👖</title><link href="https://jackevansevo.github.io/python-monorepo-tooling-with-pants.html" rel="alternate"></link><published>2024-05-25T00:00:00+01:00</published><updated>2024-05-25T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2024-05-25:/python-monorepo-tooling-with-pants.html</id><summary type="html">&lt;p&gt;A while back I helped migrate a Python monorepo at my workplace
(&lt;a href="multiply.ai"&gt;multiply.ai&lt;/a&gt;) to use &lt;a href="https://www.pantsbuild.org/"&gt;Pantsbuild&lt;/a&gt;.
I thought I'd write a bit about my motivations for doing so and my experience
adopting pantsbuild.&lt;/p&gt;
&lt;p&gt;If you're unfamiliar with pantsbuild (or build systems in general) I encourage
you to watch the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while back I helped migrate a Python monorepo at my workplace
(&lt;a href="multiply.ai"&gt;multiply.ai&lt;/a&gt;) to use &lt;a href="https://www.pantsbuild.org/"&gt;Pantsbuild&lt;/a&gt;.
I thought I'd write a bit about my motivations for doing so and my experience
adopting pantsbuild.&lt;/p&gt;
&lt;p&gt;If you're unfamiliar with pantsbuild (or build systems in general) I encourage
you to watch the talk below:&lt;/p&gt;
&lt;div class="m-5"&gt;
    &lt;div class="ratio ratio-16x9"&gt;
      &lt;iframe src="https://www.youtube.com/embed/N6ENyH4_r8U" title="Benjy Weinberger: Python monorepos: what, why and how" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;Requirements&lt;/h1&gt;
&lt;p&gt;Storing all our code in a monorepo allows us to easily share code between
different deployable artifacts (app-engine services or cloud-functions).&lt;/p&gt;
&lt;p&gt;A big challenge we face is that each deployment artifact has a different subset
of modules/requirements/dependencies.&lt;/p&gt;
&lt;p&gt;The below image demonstrates a simplified overview of our monorepo. The colours
indicate where shared library code in our repo might be shared across multiple
deployable artifacts.&lt;/p&gt;
&lt;p&gt;I.e. we have shared schema definitions that need including in a cloud function
or app engine deployment but excluded from all other deployments.&lt;/p&gt;
&lt;p&gt;Service C might be the only service to use numpy/scipy, but we want to avoid
including this dependency in our cloud function deployments or other artifacts.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Untitled-2024-05-06-1909.png" class="d-block w-100 p-4" alt="..."&gt;&lt;/p&gt;
&lt;p&gt;A compiled language will typically take care of removing dead/unreachable code
automatically. But unfortunately Python doesn't really have any built in
tooling to support this&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;When starting out you might be able to get away with bundling all dependencies
for every deployment (irrespective of whether they're required or not). But
    this approach really doesn't scale all that well.&lt;/p&gt;
&lt;p&gt;Large dependencies might start slowing down all your deployments, especially if
a compilation step is involved. You might also run into artificial size limits
of tools like google cloud functions or AWS lambda.&lt;/p&gt;
&lt;p&gt;Additionally, for compliance purposes it makes sense to only include strictly
whats necessary. This reduces the blast radius of sensitive code getting leaked
(i.e. a server gets hacked or accidental exposure). It also enables us to
easily share code with clients if they should ever wish to audit our code.&lt;/p&gt;
&lt;p&gt;Before adopting pants each deployable artifact had to manually specify which
local modules it needed. We had a custom build step to package then package up
this code. This meant switching between projects was a pain, increased the
barrier to re-using code and made it harder to globally manage/upgrade
dependencies with a single tool.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;Migrating to Pants&lt;/h1&gt;
&lt;p&gt;One of the main advantages touted by pants is that you can progressively adopt
it into your code-base. Instead of a piecemeal migration I opted just to get
everything working in a single big change.&lt;/p&gt;
&lt;p&gt;At a top level we like to be able to define a single requirement file with ALL
the dependencies used in our monorepo. When working locally this enables us to
globally install ALL dependencies in a single virtualenv and then work on any
part of the repo.&lt;/p&gt;
&lt;p&gt;The trade off here is that there's the potential to run into dependencies
conflicts, but in practice we don't tend to run into these issues. We're also
fortunate to be in a situation where no deployments require different
versions&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;Advantages&lt;/h1&gt;
&lt;p&gt;In a typical Python project you'll likely install dependencies into a virtual
environment and periodically merge in changes from upstream. In situations
where upstream changes modify dependencies there's absolutely nothing stopping
you from running code locally without first updating your virtualenv.&lt;/p&gt;
&lt;p&gt;In my experience this is a huge source of confusion&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;, especially to
contributors who are unfamiliar with the Python ecosystem.&lt;/p&gt;
&lt;p&gt;Pants avoids this entire category of problems entirely by utilising Pex.
Executing a pants target typically builds a pex executable vendoring only the
necessary dependencies and requirements.&lt;/p&gt;
&lt;p&gt;This is great for frontend engineers I work with who infrequently run the
backend locally to make changes or debug issues. They don't have to worry about
the idiosyncrasies of python virtual environments, they just run a command.&lt;/p&gt;
&lt;p&gt;During the course of migrating the repo I asked a tonne of questions on the
Pants slack channel. I found the community there to be incredibly accommodating
and helpful.&lt;/p&gt;
&lt;hr&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Python has &lt;code&gt;modulefinder&lt;/code&gt; in the standard library that can be used to
determine the set of modules imported by a script. But it falls short in
a lot of cases.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;For these situations pants does support multiple lockfiles but we've
never had to reach for it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;At a previous job we had a Slack bot reminder every time dependabot
merged changes to remind people to merge upstream and explicitly rebuild
their containers/re-create their virtual environments.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>Some notes on Git</title><link href="https://jackevansevo.github.io/some-notes-on-git.html" rel="alternate"></link><published>2024-05-09T00:00:00+01:00</published><updated>2024-05-09T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2024-05-09:/some-notes-on-git.html</id><summary type="html">&lt;p&gt;The following is a summary of thoughts and ideas presented in the &lt;a href="https://www.devtools.fm"&gt;devtools.fm
podcast&lt;/a&gt; episode: &lt;a href="https://www.devtools.fm/episode/97"&gt;Scott Chacon
- GitHub, GitButler and changing the face of version control
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I strongly encourage you to listen to the complete episode as there's a wealth
of great ideas. It actually makes me excited about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The following is a summary of thoughts and ideas presented in the &lt;a href="https://www.devtools.fm"&gt;devtools.fm
podcast&lt;/a&gt; episode: &lt;a href="https://www.devtools.fm/episode/97"&gt;Scott Chacon
- GitHub, GitButler and changing the face of version control
  &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I strongly encourage you to listen to the complete episode as there's a wealth
of great ideas. It actually makes me excited about the future of version
control and possible tool improvements we could see in the future.&lt;/p&gt;
&lt;h2&gt;🔎 Grouping changes&lt;/h2&gt;
&lt;p&gt;When I make a change it would be great to be able to logically group together
a set of related changes and display them alongside each other.&lt;/p&gt;
&lt;p&gt;I.e. if I make a change to a function, and then a change a corresponding test,
It would be better to see them grouped in the PR.&lt;/p&gt;
&lt;p&gt;However, if you bundle these changes alongside other changes, clients will
often show all the changes in the PR sorted alphabetically, which can make
reviewing the PR harder.&lt;/p&gt;
&lt;p&gt;Even if we strive to make small atomic commits, it's not always possible to
separate changes into easily reviewable PRs. I think there's a lot that clients
could do to make the job of a reviewer easier.&lt;/p&gt;
&lt;p&gt;Most clients will force a review to be conducted holistically displaying the
entire diff with the target branch. Sometimes it would be more useful to be
able to review a chain of commits individually along the entire journey of
a change.&lt;/p&gt;
&lt;h2&gt;💢 Merge conflicts&lt;/h2&gt;
&lt;p&gt;If two developers are working on the same piece of code, whoever merges first
essentially wins, i.e. they don't have the extra work required to resolve the
merge conflict. This encourages developers to merge early and often but we
don't all have that luxury.&lt;/p&gt;
&lt;p&gt;Wouldn't it be nice if tooling could figure out if two developers are working
on the same code at the point they're writing it, before anything is even
committed and pushed.&lt;/p&gt;
&lt;p&gt;I.e. perhaps I'm working on a change, if I could see that my colleague has made
changes in the same code, I can reach out to them coordinate our changes
earlier in the process, perhaps avoiding a merge conflict altogether.&lt;/p&gt;
&lt;h2&gt;🌳 Branch names&lt;/h2&gt;
&lt;p&gt;A lot of times I don't really care about branches, I just care about the
feature/fix I'm authoring.&lt;/p&gt;
&lt;p&gt;Often leads to situations where I accidentally commit to main and
retrospectively have to checkout a new branch then revert main back to the
correct state.&lt;/p&gt;
&lt;p&gt;Other times I'll create a temporary branch to work on a feature, but the scope
of that feature changes and I end up having to rename the branch (to reflect
the real nature of the change) before pushing.&lt;/p&gt;
&lt;p&gt;A named branching model implies implies that I know ahead of time exactly the
scope of the thing I'm working on.&lt;/p&gt;
&lt;h2&gt;♻️  Undo&lt;/h2&gt;
&lt;p&gt;The vast majority of issues developers have with Git is when trying to undo
something or roll back a change and for each scenarios the solution is often
different.&lt;/p&gt;
&lt;p&gt;Experienced developers build up a good mental model of how Git works and can
reliably undo changes, but I shouldn't have to be an expert to be able to undo
a change.&lt;/p&gt;
&lt;h2&gt;✨ AI&lt;/h2&gt;
&lt;p&gt;While I'm not particularly bullish on AI as a tool to author code, current
tools do a good job of being able to summarize existing code.&lt;/p&gt;
&lt;p&gt;Having a mechanism to auto write commit messages or PR descriptions based on
code changes would be useful (this is already available in a few tools).&lt;/p&gt;
&lt;p&gt;Another thing Scott mentions in the episode is the idea of using specifically
trained AI model to resolve merge conflicts.&lt;/p&gt;
&lt;p&gt;Every publicly hosted git repo has a potential history of merge conflicts, so
we already have a huge corpus of data available to train a model on.&lt;/p&gt;
&lt;p&gt;Such a model could be trained to resolve merge conflicts in a way that is
consistent with the way that projects typically resolve merge conflicts in the
past.&lt;/p&gt;
&lt;p&gt;Although how well this would work in practice is another question.&lt;/p&gt;</content><category term="misc"></category><category term="git"></category></entry><entry><title>TIL: pytube (library for downloading YouTube videos)</title><link href="https://jackevansevo.github.io/til-pytube-library-for-downloading-youtube-videos.html" rel="alternate"></link><published>2024-03-27T00:00:00+00:00</published><updated>2024-03-27T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2024-03-27:/til-pytube-library-for-downloading-youtube-videos.html</id><summary type="html">&lt;p&gt;The other day I wanted to quickly download and convert a youtube video to an
audio format so I could record a guitar cover.&lt;/p&gt;
&lt;p&gt;I did the usual thing, googled 'Youtube download' and predictably arrived at
a site with a million adverts and 10 differnet download buttons (a sort of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I wanted to quickly download and convert a youtube video to an
audio format so I could record a guitar cover.&lt;/p&gt;
&lt;p&gt;I did the usual thing, googled 'Youtube download' and predictably arrived at
a site with a million adverts and 10 differnet download buttons (a sort of
virus lottery).&lt;/p&gt;
&lt;p&gt;Being a programmer I figured "There's probably a Python library for that" and
after a little bit of searching I came across the excellent
&lt;a href="https://pytube.io/en/latest/index.html"&gt;pytube&lt;/a&gt;&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
pytube is a lightweight, Pythonic, dependency-free, library (and command-line utility) for downloading YouTube Videos.
&lt;/div&gt;

&lt;p&gt;Because I don't always have access to Python + the command line I wrote a thin
web wrapper around the library (code below). Now I can easily fetch videos on the go without
having to visit a shady add-ridden website 🎉&lt;/p&gt;
&lt;p&gt;&lt;img class="figure-img img-fluid rounded" src="https://jackevansevo.github.io/images/Screenshot 2024-03-27 174859.png" class="d-block w-100" alt="screenshot of my terrible web wrapper"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extension&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;m4a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;yt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;yt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;progressive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;resolution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;m4a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;yt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;only_audio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;temp_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;skip_existing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;temp_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;as_attachment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;download_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="python"></category></entry><entry><title>⌨️ Durgod HK Venus Review</title><link href="https://jackevansevo.github.io/durgod-hk-venus-review.html" rel="alternate"></link><published>2024-03-24T00:00:00+00:00</published><updated>2024-03-24T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2024-03-24:/durgod-hk-venus-review.html</id><summary type="html">&lt;p&gt;Way back in September last yeaer I mentioned I'd been considering purchasing
a new keyboard and dipping my toe back into the world of mechanical keyboards.
Well, in December I purchased a Durgod HK Venus and have been using it ever
since. After a good few months I usage I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Way back in September last yeaer I mentioned I'd been considering purchasing
a new keyboard and dipping my toe back into the world of mechanical keyboards.
Well, in December I purchased a Durgod HK Venus and have been using it ever
since. After a good few months I usage I figured I'd write about my experience.&lt;/p&gt;
&lt;p&gt;I'd actually had my eyes on the &lt;a href="https://www.durgodkeyboard.com/durgod-k320-taurus-mechanical-keyboard-cherry-mx-switches-nkro-87-key-gaming-keyboard/"&gt;Durgod Taurus
K320&lt;/a&gt;,
after seeing it used in &lt;a href="https://www.youtube.com/watch?v=GrnBXhsr0ng"&gt;this
video&lt;/a&gt; but it was difficult to
find a UK layout model for a price that I was willing to pay. In comparison
I picked up this HK Venus for a fraction of price: £19.99.&lt;/p&gt;
&lt;div id="carouselExampleIndicators" class="carousel slide"&gt;
  &lt;div class="carousel-indicators"&gt;
    &lt;button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"&gt;&lt;/button&gt;
    &lt;button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"&gt;&lt;/button&gt;
  &lt;/div&gt;
  &lt;div class="carousel-inner"&gt;
    &lt;div class="carousel-item active"&gt;
      &lt;img src="https://jackevansevo.github.io/images/PXL_20240303_123514542.MP.jpg" class="d-block w-100" alt="..."&gt;
    &lt;/div&gt;
    &lt;div class="carousel-item"&gt;
      &lt;img src="https://jackevansevo.github.io/images/PXL_20240303_123440665.jpg" class="d-block w-100" alt="..."&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev"&gt;
    &lt;span class="carousel-control-prev-icon" aria-hidden="true"&gt;&lt;/span&gt;
    &lt;span class="visually-hidden"&gt;Previous&lt;/span&gt;
  &lt;/button&gt;
  &lt;button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next"&gt;
    &lt;span class="carousel-control-next-icon" aria-hidden="true"&gt;&lt;/span&gt;
    &lt;span class="visually-hidden"&gt;Next&lt;/span&gt;
  &lt;/button&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Build quality&lt;/h2&gt;
&lt;p&gt;I'm pretty impressed with the build quality of the keyboard, altogether it
feels very well made. Despite its compact size it's quite weighty, so when typing
it doesn't slide around the desk.&lt;/p&gt;
&lt;p&gt;I've had issues in the past with previous keyboards where the lettering on the
keys fades over time. It might be too early to judge yet, but so far I don't
notice any letter fading on this new board. However after a few months of usage
the board is showing slight wear on the front metal base plate where some black
coating has worn away to reveal the metal underneath.&lt;/p&gt;
&lt;p&gt;The keyboard came packaged with a variety of accessories, including both USB
and USB type C adaptor cables, a key cap remover and a little drinks mat, which
I think was a nice touch.&lt;/p&gt;
&lt;h2&gt;Typing Experience&lt;/h2&gt;
&lt;p&gt;The gateron brown switches feel great to type on and the keys don't seem too
loud (I work from home so noise isn't really a major issue like it would be for
an open office environment).&lt;/p&gt;
&lt;p&gt;Unlike previous mechanical keyboards I've owned the case doesn't produce loud
metallic pinging sounds when hammering out the keys. I tend to be a really
heavy handed typist so the lack of 'ping' on this board is a real positive for
me.&lt;/p&gt;
&lt;p&gt;When the board is working perfectly (read on) this is the best typing
experience I've had so far. I've had previous experience using Cherry brown
switches but I think the build quality of the board and case construction makes
a huge difference.&lt;/p&gt;
&lt;h2&gt;60% Sacrifices&lt;/h2&gt;
&lt;p&gt;Perhaps the aspect I least enjoy about this keyboard (which is admittedly my
own fault for purchasing it) is the lack of arrow keys. I'd assumed this would
be fine and there'd be a simple/straightforward way to quickly access these
keys.&lt;/p&gt;
&lt;p&gt;Frustratingly in order to emulate an arrow key press you have to toggle the
keyboard into a special mode with Fn1+Caps, then certain keys effectively
become arrow keys. I find the choice of keys (which I've pictured below)
a pretty bizarre choice.&lt;/p&gt;
&lt;p&gt;What's frustrating is that once you've switched to the arrow key mode, entered
the combination of keys you need, you then have to toggle back to the 'normal'
mode with Fn1+Caps again. I've found myself in multiple situations where I've
forgotten to do this and wondering why my cursor is moving up when trying to
type the &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I spend a lot of time in the terminal, so I've wired my muscle memory to hit
the up arrow to go back in my shell command history. I've found the lack of
arrow keys on this board really interrupting my workflow.&lt;/p&gt;
&lt;p&gt;Some tools I used frequently like &lt;code&gt;ipython&lt;/code&gt; and &lt;code&gt;pgcli&lt;/code&gt; (both built using the
same underlying libraries) bind Pg Up and Pg Dn to go forward/back in command
history so I've fallen back to using this where I can.&lt;/p&gt;
&lt;p&gt;For regular shell usage I've considering remapping keys to work around this
shortcoming, but instead I've found myself using my terminals built in command
search much more instead.&lt;/p&gt;
&lt;h2&gt;Device Support&lt;/h2&gt;
&lt;p&gt;Plugging this into my Windows PC everything works as you'd expect. I didn't
have to fiddle around with selecting a specific keyboard layout or remap any
keys to get things working.&lt;/p&gt;
&lt;p&gt;Unfortunately on MacOS there appears no key layout/mapping that matches this
keyboard layout (Perhaps I'm just looking in the wrong place). I've settled on
using the GB (ABC) layout, but this requires you do have to perform some typing
gymnastics with modifier keys in order to type commonly used symbols in
programming such as &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;I've learnt to touch type around these issues, but it does make it confusing
when using the same board on MacOS and Windows.&lt;/p&gt;
&lt;h2&gt;Connectivity Issues&lt;/h2&gt;
&lt;p&gt;I'll run into an issue at least once a day where certain keys just stop
working, or a key starts repeating and the rest of the keys become
unresponsive. I've seen &lt;a href="https://www.reddit.com/r/MechanicalKeyboards/comments/fl2nq4/does_anyone_have_experience_with_the_durgod_venus/"&gt;various
threads&lt;/a&gt;
online suggesting it's a pretty commonplace issue.&lt;/p&gt;
&lt;p&gt;To demonstrate what I mean see the video below:&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/4QRgHiiMdko?si=mrlBL9r4sV7znoeT" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The only way I've found to resolve the problem is to unplug the keyboard and
plug it in again.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This new board is definitely a better overall typing experience that my
previous keyboard, but with some rough usability edges.&lt;/p&gt;
&lt;p&gt;Typing is more than just the feel and satisfaction you get from clicky keys. In
achieving a 'nicer' feeling board I've have to suffer through the lack of arrow
keys on a 60%, intermittent connectivity issues and weird key mapping support
on MacOS.&lt;/p&gt;
&lt;p&gt;Because I picked up this board so cheaply I don't really have any regrets about
my purchase, but had I paid original retail price I'd be pretty disappointed
after experiencing the issues I've faced.&lt;/p&gt;
&lt;p&gt;Consequently I doubt this will be the last keyboard I ever use, and I've
already got my eye on some other models. In particular some of the ergonomic
boards offered by &lt;a href="https://www.zsa.io"&gt;ZSA&lt;/a&gt;, particularly the &lt;a href="https://www.zsa.io/voyager"&gt;voyager
keyboard&lt;/a&gt;, but I do wonder if I'd suffer again from
the lack of arrow keys.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://res.cloudinary.com/zsa-technology/image/upload/f_auto/q_auto/c_scale,w_1854/v1/zsa-io-refactor-prod/@voyager/images/home/voyager-hero?_a=DATAcJOYZAA0" class="d-block w-100" alt="..."&gt;&lt;/p&gt;</content><category term="misc"></category><category term="keyboards"></category></entry><entry><title>2023 Year in Review 🌎</title><link href="https://jackevansevo.github.io/2023-year-in-review.html" rel="alternate"></link><published>2024-01-14T00:00:00+00:00</published><updated>2024-01-14T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2024-01-14:/2023-year-in-review.html</id><summary type="html">&lt;p&gt;I finally had some spare time to sit down and write my year in review. A tad
embarrassing as I read numerous similar posts weeks ago, but better late than
never...&lt;/p&gt;
&lt;p&gt;All things considered 2023 was a pretty significant year for me. It was the
first time in my life …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I finally had some spare time to sit down and write my year in review. A tad
embarrassing as I read numerous similar posts weeks ago, but better late than
never...&lt;/p&gt;
&lt;p&gt;All things considered 2023 was a pretty significant year for me. It was the
first time in my life living abroad for (almost) whole year. My first time
going through a visa approval process, and my first time having to communicate
day to day in a language other than English (Portuguese).&lt;/p&gt;
&lt;p&gt;Work wise 2023 was my first experience working full time as a contractor. Which
also meant my first time dealing with adult things like having to file taxes.
Certain things I took for granted as a regular salaried employee are no longer
available. It's only now, looking back where I fully appreciate how much easier
it is to be a regular employee and have all this admin taken care of
automatically. But I guess that's the nature of the game. I'm incredibly
grateful for the opportunity to live and work completely remotely, so it's
absolutely been worthwhile.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;At the start of the year I set myself a number of goals. I'm pretty happy with
how close I came to achieving each one.&lt;/p&gt;
&lt;h2&gt;1. Read More Books 📚&lt;/h2&gt;
&lt;p&gt;Last year I managed to keep up my habit of consistent reading, finishing a
total of 29 books (97% of my target). Although I didn't 'technically' reach my
goal I'm going to count this one as a success.&lt;/p&gt;
&lt;p&gt;In 2023 I got hooked on a Sci-Fi series &lt;a href="https://wh40k.lexicanum.com/wiki/Horus_Heresy_Series"&gt;'The Horus
Heresy'&lt;/a&gt;, which I'd
originally started as a teenager. This &lt;a href="https://www.youtube.com/watch?v=-74J0OQOh0k"&gt;non
chronological&lt;/a&gt; series has a
staggering 54 book (at time of writing) so if you want to read about certain
plot lines you can (optionally) pick and choose different books from the
series. &lt;/p&gt;
&lt;div class="ratio ratio-16x9 mb-3"&gt;
&lt;iframe src="https://www.youtube.com/embed/tVI4Gq-t4Ok" title="How it feels to Read Horus Heresy" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;It's been fun to jump back into a genre I loved when I was growing up, so
reading these is quite a nostalgia trip. To supplement my enjoyment there's a
pretty vibrant online community discussing or producing content related to the
series.&lt;/p&gt;
&lt;p&gt;Outside this series I managed to read a number of books on different topics, as
I like to to intersperse the Horus Heresy books with reading non-fiction.
Heading into 2024 like to keep up my reading habit and aim to read a similar
number of books this year.&lt;/p&gt;
&lt;h2&gt;2. Run another half marathon 🏃&lt;/h2&gt;
&lt;p&gt;Towards the end of the year I signed up to run in the &lt;a href="https://www.iguanasports.com.br/calendario/2023-bsb-city-half-marathon"&gt;BSB City Half
Marathon&lt;/a&gt;.
During the lead up to the race I was quite nervous because I hadn't trained as
much as I'd like. Thankfully the first 10k was mostly downhill so I managed to
start off pretty strong.&lt;/p&gt;
&lt;figure&gt;
  &lt;img class="figure-img img-fluid mx-auto d-block rounded" src="https://jackevansevo.github.io/images/PXL_20231112_122101957.jpg" alt="Strava screenshot" width="350"/&gt;
  &lt;figcaption class="figure-caption text-center"&gt;Me holding my medal after completing the race&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Towards the 18k mark that things started to fall apart. The combination of hot
weather (40 degree heat), and really steep inclines towards the end really took
its toll on me and other runners. None of the pacemakers (experienced runners
carrying banners/flags aiming for a specific time), appeared to be anywhere
close to their target, and lots of people (me included) were forced to walk.&lt;/p&gt;
&lt;p&gt;Consequently I finished in a slightly slower time than I did last year. But all
things considered I'm proud of my achievement to make it around the course. I'm
undecided whether to attempt the same thing again this year, but I won't
pressure myself into having to do another.&lt;/p&gt;
&lt;h2&gt;3. Improve my Portuguese&lt;/h2&gt;
&lt;p&gt;I think in 2023 I managed to make some decent progress with my Portuguese
speaking and listening. I'm now able to passively learn by consuming
conversation or media and looking up any new words/phrases I've unfamiliar
with.&lt;/p&gt;
&lt;p&gt;Often I find myself in denial about my ability to understand a second language
and purposely undersell my abilities. Almost as if by claiming a level of
proficiency I'm opening myself up to criticism or setting myself up for
failure. Despite this lots of Brazilians I meet are quick to compliment my
Portuguese, but I think this is a combination of A) genuine surprise someone is
learning their language and B) simply being polite. &lt;/p&gt;
&lt;p&gt;In social situations I'm able to follow conversation, but often I find myself
unable to contribute. Consequently I spend a lot of time restricted to
listening through of a fear of making mistakes or not having sufficient
vocabulary to express myself. So one of my big aims for 2024 is to try and
practice speaking more in these situations and not be afraid of making
mistakes.&lt;/p&gt;
&lt;p&gt;&lt;img class="rounded mx-auto d-block w-50" src="https://i.kym-cdn.com/photos/images/original/002/523/987/a99.jpg" alt="Brazil mentioned"/&gt;&lt;/p&gt;
&lt;h2&gt;4. Consistent Blogging&lt;/h2&gt;
&lt;p&gt;This again wasn't something I was able to keep consistent, but I'm still happy
with the contributions I made to my blog this year. &lt;a href="https://hn.algolia.com/?q=Jackevansevo.github.io"&gt;A few
articles&lt;/a&gt; were cross-posted
to a certain &lt;a href="https://hn.algolia.com/?q=Jackevansevo.github.io"&gt;orange news aggregator
site&lt;/a&gt; and generating a
significant amount of traffic and discussion. It was such a bizarre feeling to
see people reading (or glancing at) content that I've written.&lt;/p&gt;
&lt;p&gt;Unfortunately, since I swapped out my blog analytics a couple times this year I
only have metrics for one occurrence of this influx of traffic. Can you tell
spot my article was posted:&lt;/p&gt;
&lt;p&gt;&lt;img style="width: 75%" class="py-3 rounded mx-auto d-block" src="https://jackevansevo.github.io/images/2023-blog-metrics.png" alt="Strava screenshot"/&gt;&lt;/p&gt;
&lt;p&gt;This year I'm planning to focus less on consistency and more on quality,
writing about topics that interest me as and when I'm inspired to do so. I
don't want to feel obligated to write a weekly/monthly post if I'm not in the
appropriate headspace for creative writing. &lt;/p&gt;
&lt;h2&gt;5. Record a full cover song 🎸&lt;/h2&gt;
&lt;p&gt;Unfortunately this wasn't something I was able to achieve in 2023. I'll blame
this on not having an appropriate recording setup. This year I've brought my
audio equipment with me so there's a higher chance I might be able to record
some incredibly amateur stuff pretty soon.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>🪰 Deploying a Django app to fly.io</title><link href="https://jackevansevo.github.io/deploying-a-django-app-to-flyio.html" rel="alternate"></link><published>2023-11-04T00:00:00+00:00</published><updated>2023-11-04T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-11-04:/deploying-a-django-app-to-flyio.html</id><summary type="html">&lt;p&gt;This is a stupid quick guide/reference (mostly for myself) on how to get up and
running with Django on fly.io. This expands on their &lt;a href="https://fly.io/django-beats/deploying-django-to-production/"&gt;official
tutorial&lt;/a&gt;. We'll
be deploying &lt;strong&gt;Django&lt;/strong&gt; with &lt;strong&gt;postgres&lt;/strong&gt; &amp;amp; &lt;strong&gt;redis&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can find an accompanying screencast below:&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
  &lt;iframe src="https://www.youtube.com/embed/vURcvZQXMRA" title="Deploying Django to Fly.io" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Add Dependencies&lt;/h2&gt;
&lt;p&gt;I like to use &lt;a href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a stupid quick guide/reference (mostly for myself) on how to get up and
running with Django on fly.io. This expands on their &lt;a href="https://fly.io/django-beats/deploying-django-to-production/"&gt;official
tutorial&lt;/a&gt;. We'll
be deploying &lt;strong&gt;Django&lt;/strong&gt; with &lt;strong&gt;postgres&lt;/strong&gt; &amp;amp; &lt;strong&gt;redis&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can find an accompanying screencast below:&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
  &lt;iframe src="https://www.youtube.com/embed/vURcvZQXMRA" title="Deploying Django to Fly.io" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Add Dependencies&lt;/h2&gt;
&lt;p&gt;I like to use &lt;a href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; to manage
dependencies. How you choose to manage dependencies is up to you.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flyctl&lt;/code&gt; command line tool is smart enough to generate the correct
&lt;code&gt;Dockerfile&lt;/code&gt; depending on whatever approach you choose.&lt;/p&gt;
&lt;p&gt;For example I'd include the following to a &lt;code&gt;requirements.in&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;
&lt;span class="n"&gt;gunicorn&lt;/span&gt;
&lt;span class="n"&gt;psycopg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After installing &lt;code&gt;pip-tools&lt;/code&gt; I'd run &lt;code&gt;pip-compile&lt;/code&gt; to generate
a &lt;code&gt;requirements.txt&lt;/code&gt; that can be used by our Docker image we'll be uploading to
fly.io.&lt;/p&gt;
&lt;p&gt;Then I'd use &lt;code&gt;pip-sync&lt;/code&gt; to install all these dependencies locally.&lt;/p&gt;
&lt;h2&gt;Environ django-environ&lt;/h2&gt;
&lt;p&gt;This is pretty much copied verbatim from the &lt;a href="https://pypi.org/project/django-environ/"&gt;django-environ
docs&lt;/a&gt; which I'd encourage you to
check out.&lt;/p&gt;
&lt;p&gt;Add the following to your &lt;code&gt;settings.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.management.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_random_secret_key&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;environ&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# set casting, default value&lt;/span&gt;
    &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Build paths inside the project like this: BASE_DIR / &amp;#39;subdir&amp;#39;.&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Take environment variables from .env file&lt;/span&gt;
&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: keep the secret key used in production secret!&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_random_secret_key&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: don&amp;#39;t run with debug turned on in production!&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.fly.dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;CSRF_TRUSTED_ORIGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://*.fly.dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configure the default database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Database&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sqlite://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We're providing a fallback DB here because we'll be calling &lt;code&gt;./manage.py
collectstatic&lt;/code&gt; inside our Dockerfile where we won't have access to our prod DB.&lt;/p&gt;
&lt;p&gt;Configure celery as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CELERY_RESULT_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;django-db&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;REDIS_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;redis://localhost:6379&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file and add any missing configuration values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DEBUG=1
DATABASE_URL=postgresql:///stuff
SECRET_KEY=1234
REDIS_URL=redis://localhost:6379
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally configure how &lt;a href="https://docs.djangoproject.com/en/4.2/ref/contrib/staticfiles/"&gt;staticfiles&lt;/a&gt; will be served:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Configuring your fly application&lt;/h2&gt;
&lt;p&gt;At this point we're ready to run the &lt;code&gt;fly launch&lt;/code&gt; command. This CLI wizard will
prompt you to provision infrastructure. Afterwards it will do some clever
static analysis of your project and generate a custom &lt;code&gt;Dockerfile&lt;/code&gt; and
&lt;code&gt;fly.toml&lt;/code&gt; configuration file based on your project layout.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fly launch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Modify the default &lt;code&gt;.dockerignore&lt;/code&gt; to exclude our &lt;code&gt;.env&lt;/code&gt; file and &lt;code&gt;static&lt;/code&gt;
assets. It's important we don't accidentally include our local &lt;code&gt;.env&lt;/code&gt; file and
override production secrets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.git/
&lt;span class="gd"&gt;- *.sqlite3&lt;/span&gt;
&lt;span class="gi"&gt;+ static&lt;/span&gt;
&lt;span class="gi"&gt;+ .env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might also want to add other common values to the
&lt;a href="https://github.com/GoogleCloudPlatform/getting-started-python/blob/main/optional-kubernetes-engine/.dockerignore"&gt;.dockerignore&lt;/a&gt; file.&lt;/p&gt;
&lt;h3&gt;Generated Dockerfile&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; generated by &lt;code&gt;fly launch&lt;/code&gt; might look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PYTHON_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.12-slim-bullseye

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;python:${PYTHON_VERSION}&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PYTHONDONTWRITEBYTECODE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PYTHONUNBUFFERED&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# install psycopg2 dependencies.&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;libpq-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;/var/lib/apt/lists/*

&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/code

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/code&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt&lt;span class="w"&gt; &lt;/span&gt;/tmp/requirements.txt
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-ex&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--upgrade&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;/tmp/requirements.txt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;/root/.cache/
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;/code

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;SECRET_KEY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iJbtJp4nb6XJuPPedO07gXxzOiS0XFrr6ulMUKsnu5fCRpO2yX&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;collectstatic&lt;span class="w"&gt; &lt;/span&gt;--noinput

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;8000&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--bind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--workers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stuff.wsgi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;flyctl&lt;/code&gt; command line tool is smart enough to figure out we were using
&lt;code&gt;psycopg&lt;/code&gt; and so installs the &lt;code&gt;libpq&lt;/code&gt; developer library inside our container.&lt;/p&gt;
&lt;p&gt;If you use poetry, you might find the output looks slightly different.&lt;/p&gt;
&lt;h3&gt;Generated fly.toml&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;fly.toml&lt;/code&gt; should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# fly.toml app configuration file generated for jack-stuff on 2023-11-01T18:37:10-03:00&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# See https://fly.io/docs/reference/configuration/ for information about how to use this file.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jack-stuff&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;primary_region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gru&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;console_command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/code/manage.py shell&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[build]&lt;/span&gt;

&lt;span class="k"&gt;[deploy]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;release_command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python manage.py migrate&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[env]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8000&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[http_service]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;internal_port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;force_https&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;auto_stop_machines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;auto_start_machines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;min_machines_running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;[[statics]]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;guest_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/code/static&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This handy (auto-generated) section should automatically apply any database
migrations on deployment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[deploy]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;release_command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python manage.py migrate&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You'll notice the &lt;code&gt;Dockerfile&lt;/code&gt; has a line &lt;code&gt;RUN python manage.py collectstatic --noinput&lt;/code&gt;. This works in tandem with the below section, which should enable fly.io to
serve all our static assets in production:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[[statics]]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;guest_path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/code/static&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Running multiple processes inside our Fly.io App&lt;/h3&gt;
&lt;p&gt;Fly makes it super easy to run multiple processes, each in it's own VM. They
even published their own &lt;a href="https://fly.io/django-beats/celery-async-tasks-on-fly-machines/"&gt;blog
post&lt;/a&gt;
describing how to do this for Django+Celery.&lt;/p&gt;
&lt;p&gt;To configure celery workers to run alongside the &lt;code&gt;gunicorn&lt;/code&gt; server in the
same app add the following to the &lt;code&gt;fly.toml&lt;/code&gt; configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[processes]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python -m gunicorn --bind :8000 --workers 2 stuff.wsgi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;celery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python -m celery -A stuff worker -l info -B&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you wanted to you could run celery beat in its own separate process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[processes]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python -m gunicorn --bind :8000 --workers 2 stuff.wsgi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;worker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python -m celery -A stuff worker -l info&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;beat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python -m celery -A stuff beat -l info&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fly has some great documentation that goes in depth &lt;a href="https://fly.io/docs/app-guides/multiple-processes/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Double check the secrets have been configured correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;fly&lt;span class="w"&gt; &lt;/span&gt;secrets&lt;span class="w"&gt; &lt;/span&gt;list
NAME&lt;span class="w"&gt;            &lt;/span&gt;DIGEST&lt;span class="w"&gt;              &lt;/span&gt;CREATED&lt;span class="w"&gt; &lt;/span&gt;AT
DATABASE_URL&lt;span class="w"&gt;    &lt;/span&gt;f3bf61986914275f&lt;span class="w"&gt;    &lt;/span&gt;1h12m&lt;span class="w"&gt; &lt;/span&gt;ago
SECRET_KEY&lt;span class="w"&gt;      &lt;/span&gt;65c26d0e2503fea1&lt;span class="w"&gt;    &lt;/span&gt;1h13m&lt;span class="w"&gt; &lt;/span&gt;ago
REDIS_URL&lt;span class="w"&gt;       &lt;/span&gt;fbb3395b6181aa6c&lt;span class="w"&gt;    &lt;/span&gt;1h13m&lt;span class="w"&gt; &lt;/span&gt;ago
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally we're ready to deploy our app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fly deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And with that we're done 🥳&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>🎨 Building colour schemes with mini.base16</title><link href="https://jackevansevo.github.io/building-colour-schemes-with-minibase16.html" rel="alternate"></link><published>2023-10-15T00:00:00+01:00</published><updated>2023-10-15T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-10-15:/building-colour-schemes-with-minibase16.html</id><summary type="html">&lt;p&gt;I'm a huge fan of &lt;a href="https://github.com/echasnovski/mini.nvim"&gt;mini.nvim&lt;/a&gt;. If you're unfamiliar here's a description from the plugins readme:&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
Library of 30+ independent Lua modules improving overall Neovim (version 0.7 and higher) experience with minimal effort. They all share same configuration approaches and general design principles.
&lt;br&gt;
&lt;br&gt;
Think about this project as …&lt;/div&gt;</summary><content type="html">&lt;p&gt;I'm a huge fan of &lt;a href="https://github.com/echasnovski/mini.nvim"&gt;mini.nvim&lt;/a&gt;. If you're unfamiliar here's a description from the plugins readme:&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
Library of 30+ independent Lua modules improving overall Neovim (version 0.7 and higher) experience with minimal effort. They all share same configuration approaches and general design principles.
&lt;br&gt;
&lt;br&gt;
Think about this project as "Swiss Army knife" among Neovim plugins: it has many different independent tools (modules) suitable for most common tasks. Each module can be used separately without any startup and usage overhead.
&lt;/div&gt;

&lt;p&gt;Out the box it replaces 90% of the plugins I was previously using. The major
benefit here is that the mini.nvim plugins are cohesive and designed to work
together. Consequently I've not encountered any behaviour with conflicting
plugins, i.e. overlapping keybindings, like I'd experienced in the past.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;mini.base16&lt;/h2&gt;
&lt;p&gt;mini.nvim comes with &lt;a href="https://github.com/echasnovski/mini.nvim#plugin-colorschemes"&gt;a few
themes&lt;/a&gt;
&lt;code&gt;minischeme&lt;/code&gt;, &lt;code&gt;minicyan&lt;/code&gt; and &lt;code&gt;randomhue&lt;/code&gt; (which you can see
&lt;a href="https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-base16.md#demo"&gt;here&lt;/a&gt;)
but these aren't really to my taste.&lt;/p&gt;
&lt;p&gt;Fortunately, mini.nvim comes with:
&lt;a href="https://github.com/echasnovski/mini.base16"&gt;mini.base16&lt;/a&gt;, a plugin that allows
you to generate vim colorschemes from a base16 palette. The &lt;a href="https://github.com/chriskempson/base16"&gt;base16
project&lt;/a&gt; is a popular framework for
expressing colorschemes from a palette of 16 colours. Various tools exist to
convert these palettes into colorschemes for different applications.&lt;/p&gt;
&lt;div class="alert alert-warning fst-italic"&gt;
Aside: if you've been programming for
any length of time, you'll probably immediately recognise some of the more
popular base16 palettes, as they're used by a &lt;a class="alert-link fw-normal" href="https://github.com/chriskempson/base16#used-by"&gt;quite a few popular applications&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What about existing base16 vim colorschemes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;base16 already has existing colorscheme ports available in the form of
&lt;a href="https://github.com/chriskempson/base16-vim"&gt;chriskempson/base16-vim&lt;/a&gt;, various
lua ports also exist for neovim. These are great if you're happy with a fairly
vanilla vim/neovim setup.&lt;/p&gt;
&lt;p&gt;The problem is these colorscheme implementations might not necessarily support
certain third plugins you're using, so things might end up looking ugly or
visually broken.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="https://github.com/echasnovski/mini.base16"&gt;mini.base16&lt;/a&gt; plugin you
can take a base16 colour palette and generate a neovim colorscheme that
supports all the mini.nvim plugins + a bunch of popular third party vim/neovim
plugins (a full list of supported plugins is available
&lt;a href="https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-base16.md#features"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The end result is something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/base16-mocha.png" class="img-fluid rounded mx-auto d-block" alt="base16 mocha mini.base16 theme"&gt;&lt;/p&gt;
&lt;h3&gt;Building Themes&lt;/h3&gt;
&lt;p&gt;Here's an example base16 palette (for the &lt;a href="https://github.com/chriskempson/base16-default-schemes/blob/master/mocha.yaml"&gt;mocha colorscheme&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mocha&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Chris&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Kempson&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(http://chriskempson.com)&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3B3228&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;534636&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;645240&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base03&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7e705a&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b8afad&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d0c8c6&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;e9e1dd&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f5eeeb&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cb6077&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d28b71&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base0A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;f4bc87&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base0B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;beb55b&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base0C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7bbda4&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base0D&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8ab3b5&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base0E&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a89bb9&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;base0F&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bb9584&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can take these definitions and create a corresponding &lt;code&gt;mini.base16&lt;/code&gt; colorscheme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mini.base16&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="n"&gt;palette&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;base00&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#3B3228&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base01&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#534636&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base02&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#645240&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base03&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#7e705a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base04&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#b8afad&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base05&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#d0c8c6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base06&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#e9e1dd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base07&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#f5eeeb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base08&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#cb6077&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base09&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#d28b71&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base0A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#f4bc87&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base0B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#beb55b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base0C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#7bbda4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base0D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#8ab3b5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base0E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#a89bb9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;base0F&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#bb9584&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;base16-mocha&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I found it quite painful to manually have to copy/paste these values over from
a &lt;code&gt;.yaml&lt;/code&gt; colour palette into the equivalent &lt;code&gt;.lua&lt;/code&gt; format that &lt;code&gt;mini.base16&lt;/code&gt;
expects. So I wrote a quick and dirty Python script to do the conversion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.lua&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;require(&amp;#39;mini.base16&amp;#39;).setup({&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;  palette = {&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;base&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  },&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;})&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vim.g.colors_name = &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or you can take the existing &lt;a href=""&gt;vim base16 themes&lt;/a&gt; and convert these to the &lt;code&gt;mini.base16&lt;/code&gt; lua equivalents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_suffix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.lua&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;require(&amp;#39;mini.base16&amp;#39;).setup({&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;  palette = {&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;let s:gui&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    base&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; = &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;  },&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;})&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vim.g.colors_name = &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stem&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;🖼️ Theme showcase&lt;/h2&gt;
&lt;p&gt;Below is an example of a few mini.base16 themes in action:&lt;/p&gt;
&lt;video class="w-100" controls&gt;
    &lt;source src="https://jackevansevo.github.io/images/base16-themes.mp4"&gt;
&lt;/video&gt;

&lt;p&gt;You can find these converted themes from the above showcase in my
&lt;a href="https://github.com/Jackevansevo/Dotfiles/tree/main/nvim/colors"&gt;Dotfiles&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="neovim"></category></entry><entry><title>⌨️ My unhealthy relationship with keyboards</title><link href="https://jackevansevo.github.io/my-unhealthy-relationship-with-keyboards.html" rel="alternate"></link><published>2023-09-22T00:00:00+01:00</published><updated>2023-09-22T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-09-22:/my-unhealthy-relationship-with-keyboards.html</id><summary type="html">&lt;p&gt;I've had a pretty shaky history with keyboards. I've never been able to stick
with the same board for any amount of time. They either break or I get the urge
to try out something new. Just like with distro hopping and endless vim
configuration, it's half hobby half unhealthy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've had a pretty shaky history with keyboards. I've never been able to stick
with the same board for any amount of time. They either break or I get the urge
to try out something new. Just like with distro hopping and endless vim
configuration, it's half hobby half unhealthy obsession.&lt;/p&gt;
&lt;p&gt;Thankfully for my wallet I'm neither a hoarder nor collector of keyboards.
Typically owning one or two at a time before replacing them with a new purchase.&lt;/p&gt;
&lt;p&gt;As an experiment I wanted to write down a complete timeline of keyboards I've
owned/used in my life up until now and reminisce of keyboards past.&lt;/p&gt;
&lt;h2&gt;Unknown Cherry Keyboard&lt;/h2&gt;
&lt;p&gt;I remember a few keyboards before this, but none of them are noteworthy
enough to write about. So I'm starting with this board because it was
my first mechanical keyboard.&lt;/p&gt;
&lt;p&gt;I don't have any receipts to look up the model name but I believe it was
a &lt;a href="https://www.cherry.kr/cherry-g84-4100-compact-keyboard.html"&gt;CHERRY
G84-4100&lt;/a&gt; (or
similar). Because this was my first mechanical keyboard I didn't really have any
point of reference to compare it to. At this point in time mechanical keyboards
didn't register to me as especially popular, or even a hobby. It wasn't until later where I noticed they
became really popular, mostly amongst programmers and gaming enthusiasts.&lt;/p&gt;
&lt;p&gt;&lt;img src="" class="img-fluid rounded mx-auto d-block" alt="Cherry compact keyboard"&gt;&lt;/p&gt;
&lt;p&gt;I remember loving this keyboard dearly right up until the moment I spilled
coffee all over it and it died. I was utterly distraught and felt so clumsy for
breaking something which (at the time) was such an expensive purchase.&lt;/p&gt;
&lt;h2&gt;Noppoo Choc Mini&lt;/h2&gt;
&lt;p&gt;Hooked on the clikcy sound, I think I next purchased a &lt;a href="https://deskthority.net/wiki/Noppoo_Choc_Mini"&gt;Noppoo Choc
Mini&lt;/a&gt; online, which I believe it
no longer available. I distinctly remember it being a super 'pingy' keyboard
and my parents complaining about the noise, so I experimented with putting
o-rings in dampen the sound, which helped a bit.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Noppoo-Choc-Mini.png" class="img-fluid rounded mx-auto d-block" alt="Noppoo Choc Mini"&gt;&lt;/p&gt;
&lt;p&gt;Around this time I think I must have seen blank keycaps online for the first
time and thought this was the coolest thing ever 😎.&lt;/p&gt;
&lt;p&gt;So like an idiot I borrowed my dads files and sanded off all the letters from
the keyboard 🤦. As you might have guessed the outcome was not great.&lt;/p&gt;
&lt;p&gt;I think I sold it on eBay for a fraction of the cost to someone who probably
had the sense the swap the keycaps.&lt;/p&gt;
&lt;h2&gt;Microsoft Sculpt Ergonomic Desktop&lt;/h2&gt;
&lt;p&gt;Perhaps jaded with mechanical keyboards at this point I decided to try
something else whacky, the Microsoft Sculpt Ergonomic Desktop. This was my
first foray into ergonomic style split keyboards so it took a while to get used
to, but after a while I really grew to love this keyboard. The switches in this
board were scissor switches, super quiet and an absolute joy to type on. Before
this board I'd never learnt to touch type properly so I credit the ergonomic
split with actually forcing me to learn how to touch type properly.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Microsoft-Sculpt-Ergonomic-Desktop.png" class="img-fluid rounded mx-auto d-block" alt="Microsoft Scupt Ergonomic Desktop"&gt;&lt;/p&gt;
&lt;p&gt;This keyboard worked great until the 'e' key stopped working. Annoyingly this
would only start to fail when typing a specific combination of keys. The actual
error was difficult to reproduce but would intermittently cause problems when
typing, frustrating enough to stop me using this board.&lt;/p&gt;
&lt;h2&gt;Das 4k Compact&lt;/h2&gt;
&lt;p&gt;Dissatisfied with my earlier bodged attempt to 'improve' (and ultimately
destroy) my noppoo choc mini I fixed my eyes on the real deal: A Das 4K compact
with blank keycaps 😎.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/daskeyboard-4C-ultimate.png" class="img-fluid rounded mx-auto d-block" alt="Das 4k Compact"&gt;&lt;/p&gt;
&lt;p&gt;I used this board during my final years of University, and afterwards at my
first graduate office job. I remember feeling slightly nervous to bring
it into the office because of the blank keycaps.&lt;/p&gt;
&lt;p&gt;At this job I frequently had to manually type in passwords when SSH'ing onto
remote boxes (don't ask). I consider myself to be a pretty proficient touch
typist, and pretty much never have to look at the keyboard, but in high
pressure situations I'd frequently misstype passwords and be forced to ring up
tech support to unlock my account. This happened frequently enough that
I realised that blank keycaps weren't for me, at least not for the office/work
environment.&lt;/p&gt;
&lt;h2&gt;Apple Magic Keyboard&lt;/h2&gt;
&lt;p&gt;During the pandemic I caved a brought an M1 Mac Mini, to compliment my purchase
I also decided to buy an &lt;a href=""&gt;apple magic keyboard&lt;/a&gt;. The build quality was top
notch, it felt nice to type on and the compact size meant it didn't take up
much space on my desk. I can see why so many people use this kind of keyboard.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Apple-Magic-Keyboard.png" class="img-fluid rounded mx-auto d-block" alt="Apple Magic Keyboard"&gt;&lt;/p&gt;
&lt;p&gt;Running MacOS 100% of the time wasn't all that I'd hoped it to be and I found
myself swapping between my Mac Mini and other Windows or Linux machines. At
this point using the magic keyboard with it's Mac specific layout became
unpractical and confusing. To make it easier to switch between devices
I decided to look for keyboards on the market that were compatible with each
major OS and made it easy to quickly switch between layouts.&lt;/p&gt;
&lt;h2&gt;My current keyboard&lt;/h2&gt;
&lt;p&gt;...Which brings us to present day, currently I'm typing this article on
a Logitech MX Keys. Because it's compatible with multiple OS's I use it for
work on my company issued Macbook and personal usage on my own Linux machine.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Logitceh-MX-Keys.png" class="img-fluid rounded mx-auto d-block" alt="Logitech MX Keys"&gt;&lt;/p&gt;
&lt;p&gt;I really like the tying experience of this keyboard, the super low profile keys
allow me to type super fast. However I have a few personal gripes: Firstly the
board is completely wireless, which means I have to charge it via USB-C. As I'm
sat practically tethered to my desk all day a permanently wired option would
actually be more convenient as it would save me to the hassle of charging.&lt;/p&gt;
&lt;p&gt;My second issue is simply the size of the board. Had I had waited a few months
I could have purchased the more compact MX Mini compact equivalent which would
have been far more convenient for me. The size is an issue for two main
reasons, predominantly because I like to travel with my keyboard, so it needs
to easily fit in a bag/suitcase. Secondly I'm not (and never have been) someone
who ever uses the numpad, so all these additional keys just sit there unused,
wasting precious real estate on my desk.&lt;/p&gt;
&lt;p&gt;My final gripe is in the construction of the board itself, and how this led to
some unfortunate damage. The switch design makes it really tricky to pop off
keys in case you ever need to clean your keyboard (who amongst us hasn't at
some point eaten near their desk and got crumbs stuck under their keys). At one
point I attempted to lever/pop off a keycap and managed to break the tiny
connector the switch hooks into. So now I have a broken key on my number row
that doesn't sit fully flush and occasionally gets stuck :(&lt;/p&gt;
&lt;p&gt;There appears to be no easy way to acquire replacement key caps for the MX keys
unless you're willing to pay an absolutely extortionate price from third party
vendors.&lt;/p&gt;
&lt;h2&gt;My Next Board?&lt;/h2&gt;
&lt;p&gt;My gripes with the Logitech MX Keys have led me once again to start evaluating
other options that are out there. I think I'm in the market for a new keyboard
before the end of 2023, but want to do plenty of research to find the best
value board. I likely write a follow up post about my criteria and research and
perhaps a follow up review if I end up pulling the trigger.&lt;/p&gt;</content><category term="misc"></category><category term="Personal"></category><category term="Keyboards"></category></entry><entry><title>Neovim: sending buffer contents to a live repl</title><link href="https://jackevansevo.github.io/neovim-sending-buffer-contents-to-a-live-repl.html" rel="alternate"></link><published>2023-08-27T00:00:00+01:00</published><updated>2023-08-27T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-08-27:/neovim-sending-buffer-contents-to-a-live-repl.html</id><summary type="html">&lt;p&gt;I was recently messing around with Clojure again solving some Advent of code
problems (as I sometimes do).&lt;/p&gt;
&lt;p&gt;Whenever I'm using Clojure I try and leverage the power of the REPL and eval
stuff in my editor using
&lt;a href="https://github.com/tpope/vim-fireplace"&gt;tpope/vim-fireplace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For fun, I wondered if I could use the neovim …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently messing around with Clojure again solving some Advent of code
problems (as I sometimes do).&lt;/p&gt;
&lt;p&gt;Whenever I'm using Clojure I try and leverage the power of the REPL and eval
stuff in my editor using
&lt;a href="https://github.com/tpope/vim-fireplace"&gt;tpope/vim-fireplace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For fun, I wondered if I could use the neovim job control API to achieve a
super basic version of the same thing in Python.&lt;/p&gt;
&lt;p&gt;I'm aware there's loads of plugins out there already achieve this but here's
what I came up with:&lt;/p&gt;
&lt;p&gt;The first piece is an augroup to capture the latest terminal job id, (this was
easier than writing code to spawn a dedicated terminal and track the id)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;augroup Terminal
au!
au TermOpen * let g:last_term_job_id = b:terminal_job_id
augroup END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next piece is a convenience command to launch a Python REPL for the current buffer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;command Repl execute &amp;#39;vsplit | term python -i %&amp;#39; | set syntax=python | execute &amp;quot;normal \&amp;lt;C-W&amp;gt;h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally two bindings (normal mode and visual mode) to send either lines or
currently selected text to be evaluated in the REPL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nnoremap cpp &amp;quot;kyy \| :call jobsend(g:last_terminal_job_id, @k)&amp;lt;CR&amp;gt;
vnoremap cpp &amp;quot;kyy \| :call jobsend(g:last_terminal_job_id, @k . &amp;quot;\n&amp;quot;)&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below is a video demonstration (Not too bad for ~10 minutes of confused googling).&lt;/p&gt;
&lt;video class="w-100" controls&gt;
    &lt;source src="https://jackevansevo.github.io/images/send-buffer-contents-to-repl.webm"&gt;
&lt;/video&gt;</content><category term="misc"></category><category term="Neovim"></category></entry><entry><title>A vim experiment: ditching fuzzy finders</title><link href="https://jackevansevo.github.io/a-vim-experiment-ditching-fuzzy-finders.html" rel="alternate"></link><published>2023-08-20T00:00:00+01:00</published><updated>2023-08-20T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-08-20:/a-vim-experiment-ditching-fuzzy-finders.html</id><summary type="html">&lt;p&gt;I recently revisited  &lt;a href="https://www.youtube.com/watch?v=XA2WjJbmmoM"&gt;How to Do 90% of What Plugins Do (With Just
Vim)&lt;/a&gt;. I love this talk (and
others like it) because it highlights just how much you can achieve just using
vim. These techniques might might not always be the best or most efficient way
to get things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently revisited  &lt;a href="https://www.youtube.com/watch?v=XA2WjJbmmoM"&gt;How to Do 90% of What Plugins Do (With Just
Vim)&lt;/a&gt;. I love this talk (and
others like it) because it highlights just how much you can achieve just using
vim. These techniques might might not always be the best or most efficient way
to get things done, but a lot of the time, they're sufficient.&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/XA2WjJbmmoM" title="How to Do 90% of What Plugins Do (With Just Vim)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I find a lot of newcomers to vim, who're learning the editor automatically
reach for plugins or even entire vim distributions without first learning how
the underlying tool works.&lt;/p&gt;
&lt;p&gt;At this point I've been using vim for over a decade and I'm still learning
about functionality and refining my use of the tool.&lt;/p&gt;
&lt;p&gt;I've always been aware of the builtin :find command but for as long as I can
remember I've always utilized some kind of fuzzy finder to open files.
Originally using &lt;a href="https://github.com/junegunn/fzf.vim"&gt;junegunn/fzf.vim&lt;/a&gt; and
more recently with
&lt;a href="https://github.com/nvim-telescope/telescope.nvim"&gt;nvim-telescope/telescope.nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last week I decided to conduct an experiment: If I uninstalled
&lt;a href="https://github.com/nvim-telescope/telescope.nvim"&gt;nvim-telescope/telescope.nvim&lt;/a&gt;,
would I miss the fuzzy find functionality? Or could I survive (or even thrive)
by with the builtin :find and :grep commands.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;What I changed&lt;/h2&gt;
&lt;p&gt;I replaced the following telescope bindings&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;local builtin = require(&amp;#39;telescope.builtin&amp;#39;)
vim.keymap.set(&amp;#39;n&amp;#39;, &amp;#39;&amp;lt;leader&amp;gt;f&amp;#39;, builtin.find_files, {})
vim.keymap.set(&amp;#39;n&amp;#39;, &amp;#39;&amp;lt;leader&amp;gt;g&amp;#39;, builtin.live_grep, {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With their builtin counterparts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vim.keymap.set(&amp;#39;n&amp;#39;, &amp;#39;&amp;lt;leader&amp;gt;f&amp;#39;, &amp;#39;:find &amp;#39;, {})
vim.keymap.set(&amp;#39;n&amp;#39;, &amp;#39;&amp;lt;leader&amp;gt;/&amp;#39;, &amp;#39;:grep &amp;#39;, {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To make grep a bit more sane I also created the following convenience mapping:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;vim.cmd([[ command! -nargs=+ Grep execute &amp;#39;silent grep! &amp;lt;args&amp;gt;&amp;#39; | copen ]])
vim.keymap.set(&amp;#39;n&amp;#39;, &amp;#39;&amp;lt;leader&amp;gt;/&amp;#39;, &amp;#39;:Grep &amp;#39;, {})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This prevents the annoying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Press ENTER or type command to continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Builtin :find vs fuzzy find&lt;/h2&gt;
&lt;p&gt;Fortunately the codebases I normally work on are relatively small, so I can get
away with locating the files I need using the builtin :find command.&lt;/p&gt;
&lt;p&gt;The key I discovered to making the builtin :find more useless is to explicitly
let vim know which files in the repo you consider to be important. For some
projects this might mean manually altering the default path to something more
useful &lt;code&gt;set path=lib/*,services/*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For most projects I've found &lt;code&gt;set path=,,&lt;/code&gt; to be sufficient.&lt;/p&gt;
&lt;p&gt;Afterwards you'll want to set the &lt;code&gt;wildignore&lt;/code&gt; to exclude any files you might not be interested in e.g:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set wildignore+=*.pyc,*/node_modules/*,*/__pycache__/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This ends up being fast enough for the kinds of repositories I'm dealing with,
but I can imagine this approach begins to falter when you're working on giant
repositories with thousands of files.&lt;/p&gt;
&lt;p&gt;I think one of the appealing things about reaching for a tool like fzf or
telescope is they don't require any explicit configuration. If you're using
either tool in conjunction with ripgrep, your search results will respect
you're .gitignore file by default. Whereas with the builtin :find command
you'll have to repeat these patterns in wildignore.&lt;/p&gt;
&lt;p&gt;I wish that similar to grepprg, there was a mechanism to configure an external
tool to use for executing find. This way you'd be able to extend the exsiting
:find without having to define a completely new command.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Builtin :grep vs Telescope live grep&lt;/h2&gt;
&lt;p&gt;Abandoning telescopes live grep turned not to be much of a sacrifice. Typically
I'd use telescope to initiate a search, then use the key combination to
populate the quickfix list anyway.&lt;/p&gt;
&lt;p&gt;The reason for doing this is that I'm already a heavy user of the plugin
&lt;a href="https://github.com/romainl/vim-qf"&gt;romainl/vim-qf&lt;/a&gt; plugin, which allows me to
further refine search results present in the quickfix list. I like this
workflow, as it feels quite methodical to grep for something, then narrow down
the search results, instead of having to write ever more complicated grep
patterns.&lt;/p&gt;
&lt;p&gt;The way I was previously using telescope to search this was is basically just
the builtin grep with extra steps. Occasionally it's handy to see live search
results appear along the way as I'm typing, but more often that not I found
it's just distracting noise.&lt;/p&gt;
&lt;p&gt;I'd already configured &lt;code&gt;grepprg&lt;/code&gt; to use as I'm
typing&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which is super fast and respects any .gitignored files by default.&lt;/p&gt;
&lt;p&gt;The only minor annoyance I had was having to always quote any search with
spaces. I'm always forced to type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep &amp;quot;class Thing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Previously with Telescope, I'd just use the following mapping&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;g &amp;lt;cmd&amp;gt;lua require(&amp;#39;telescope.builtin&amp;#39;).live_grep()&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then immediately start typing &lt;code&gt;class Thing&lt;/code&gt; and see results immediately,
with no need to wrap my search query in quotes.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Maybe you're like me and you don't work on giant codebases, in which case you
might be surprised how far you can get with the builtin :find and :grep
commands.&lt;/p&gt;</content><category term="misc"></category><category term="Vim"></category><category term="Neovim"></category></entry><entry><title>Neovim pylsp flake8</title><link href="https://jackevansevo.github.io/neovim-pylsp-flake8.html" rel="alternate"></link><published>2023-07-31T00:00:00+01:00</published><updated>2023-07-31T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-07-31:/neovim-pylsp-flake8.html</id><summary type="html">&lt;p&gt;I recently had a bit of a pain getting pylsp setup with flake8 so I'm
documenting how I did it for future reference.&lt;/p&gt;
&lt;p&gt;Instead of putting neovim LSP configuration in my &lt;code&gt;init.lua&lt;/code&gt; file, I like to
configure this per project. To do this I enable &lt;code&gt;exrc&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I recently had a bit of a pain getting pylsp setup with flake8 so I'm
documenting how I did it for future reference.&lt;/p&gt;
&lt;p&gt;Instead of putting neovim LSP configuration in my &lt;code&gt;init.lua&lt;/code&gt; file, I like to
configure this per project. To do this I enable &lt;code&gt;exrc&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="c1"&gt;-- Or in .vimrc&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;exrc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I create a new local &lt;code&gt;.nvim.lua&lt;/code&gt; configuration file in my project containing the following (which isavailable in &lt;a href="https://gist.github.com/Jackevansevo/dfd08aaecf3e50ec3e9b1dcf352ee2ad"&gt;gist form&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;lspconfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lspconfig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lspconfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pylsp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pylsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;configurationSources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flake8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="n"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;pycodestyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;mccabe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;pyflakes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;flake8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="s"&gt;[[autocmd BufWritePre *.py lua vim.lsp.buf.format({ async = true })]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Neovim"></category><category term="Python"></category></entry><entry><title>SQLAlchemy tracking column modifications (Part 2)</title><link href="https://jackevansevo.github.io/sqlalchemy-tracking-column-modifications-part-2.html" rel="alternate"></link><published>2023-06-23T00:00:00+01:00</published><updated>2023-06-23T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-06-23:/sqlalchemy-tracking-column-modifications-part-2.html</id><summary type="html">&lt;p&gt;As a little follow up to yesterdays post about tracking changes to SQLAlchemy models I figured out a way to get this working with &lt;a href="https://docs.sqlalchemy.org/en/20/core/event.html#events"&gt;event listeners&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChangeTrackingMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapped_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;record_changes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dirty_attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;attr&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sa_instance_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;As a little follow up to yesterdays post about tracking changes to SQLAlchemy models I figured out a way to get this working with &lt;a href="https://docs.sqlalchemy.org/en/20/core/event.html#events"&gt;event listeners&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChangeTrackingMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapped_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;record_changes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;dirty_attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;attr&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sa_instance_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_changes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dirty_attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dirty_attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_changes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;

        &lt;span class="n"&gt;flag_modified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__declare_last__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;before_insert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;before_update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;record_changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;updated_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromisoformat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;The upside of this approach (unlike the &lt;a href="/sqlalchemy-tracking-column-modifications.html"&gt;previous approach&lt;/a&gt;) is that timestamps are identical for fields committed at the same time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob Squarepants&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="go"&gt;# Make some changes&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Spongebob&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SpongeBob Martin SquarePants&amp;quot;&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="go"&gt;# Both &amp;#39;name&amp;#39; and &amp;#39;fullname&amp;#39; share the same timestamp&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 23, 16, 53, 21, 58682)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fullname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 23, 16, 53, 21, 58682)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Still Missing&lt;/h2&gt;
&lt;p&gt;The downside of this approach is that it still doesn't work inside SQLAlchemy update statements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 23, 17, 3, 57, 128088)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;sqlalchemy.engine.cursor.CursorResult object at 0x7fd585e5db70&amp;gt;&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="go"&gt;# This value hasn&amp;#39;t updated :(&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 23, 17, 3, 57, 128088)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This limitation of the &lt;code&gt;before_update&lt;/code&gt; event listener is alluded to in the &lt;a href="https://docs.sqlalchemy.org/en/20/orm/events.html#sqlalchemy.orm.MapperEvents.before_update"&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SQLAlchemy documentation https://docs.sqlalchemy.org/en/20/orm/events.html#sqlalchemy.orm.MapperEvents.before_update" src="https://jackevansevo.github.io/images/Screenshot_20230623_135710.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="SQLAlchemy"></category></entry><entry><title>SQLAlchemy tracking column modifications</title><link href="https://jackevansevo.github.io/sqlalchemy-tracking-column-modifications.html" rel="alternate"></link><published>2023-06-22T00:00:00+01:00</published><updated>2023-06-22T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-06-22:/sqlalchemy-tracking-column-modifications.html</id><summary type="html">&lt;p&gt;Recently I've been playing around with tracking record/field level modifications in SQLAlchemy, here's what I've learnt.&lt;/p&gt;
&lt;h2&gt;Tracking record created at / updated at times&lt;/h2&gt;
&lt;p&gt;A common pattern in SQLAlchemy is to track the &lt;code&gt;created_at&lt;/code&gt; &amp;amp; &lt;code&gt;updated_at&lt;/code&gt; values of
individual records.&lt;/p&gt;
&lt;p&gt;Typically this is achieved with a
&lt;a href="https://docs.sqlalchemy.org/en/20/orm/declarative_mixins.html#mixing-in-
columns"&gt;mixin&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimestampMixin …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recently I've been playing around with tracking record/field level modifications in SQLAlchemy, here's what I've learnt.&lt;/p&gt;
&lt;h2&gt;Tracking record created at / updated at times&lt;/h2&gt;
&lt;p&gt;A common pattern in SQLAlchemy is to track the &lt;code&gt;created_at&lt;/code&gt; &amp;amp; &lt;code&gt;updated_at&lt;/code&gt; values of
individual records.&lt;/p&gt;
&lt;p&gt;Typically this is achieved with a
&lt;a href="https://docs.sqlalchemy.org/en/20/orm/declarative_mixins.html#mixing-in-
columns"&gt;mixin&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TimestampMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapped_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapped_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;onupdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TimestampMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user_account&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapped_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapped_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's an example of this in practice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob Squarepants&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 18, 17, 52)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 18, 17, 52)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Spongebob&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 18, 18, 11)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Tracking individual field edit times&lt;/h2&gt;
&lt;p&gt;What if we needed to keep track of when each individual field was
updated/changed independently?&lt;/p&gt;
&lt;p&gt;There's a million ways to achieve this, but a simple mechanism I came up with is
to use a mixin that saves individual field changes to a JSON column on each
table&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChangeTrackingMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapped_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__table__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_record_field_change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_record_field_change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;flag_modified&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;updated_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromisoformat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;The 'magic' here is this section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__table__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_record_field_change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;__setattr__&lt;/code&gt; method gets called every time we try to modify the attribute
of a user record.&lt;/p&gt;
&lt;p&gt;If we happen to be editing one of the keys in the user table (ignoring the &lt;code&gt;"changes"&lt;/code&gt; field):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;changes&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__table__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we call some extra bookkeeping logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_record_field_change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then fall back to calling the original logic to update the field&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To lookup the individual edit time of a field you can write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;field_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see this in action below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob Squarepants&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 19, 6, 11)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 19, 6, 11)&lt;/span&gt;

&lt;span class="go"&gt;# Update the name (uppercase &amp;#39;S&amp;#39;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Spongebob&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="go"&gt;# Reflects the new timestamp of when &amp;#39;name&amp;#39; was updated&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 16, 6, 53, 350103)&lt;/span&gt;

&lt;span class="go"&gt;# Note &amp;#39;fullname&amp;#39; still retains its earlier value&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;
&lt;span class="go"&gt;{&amp;#39;name&amp;#39;: {&amp;#39;value&amp;#39;: &amp;#39;Spongebob&amp;#39;, &amp;#39;updated_at&amp;#39;: &amp;#39;2023-06-22T16:06:53.350103&amp;#39;}, &amp;#39;fullname&amp;#39;: {&amp;#39;value&amp;#39;: &amp;#39;Spongebob Squarepants&amp;#39;, &amp;#39;updated_at&amp;#39;: &amp;#39;2023-06-22T16:06:04.176241&amp;#39;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Downsides&lt;/h2&gt;
&lt;h3&gt;No server time&lt;/h3&gt;
&lt;p&gt;A major issue with this approach is we're no longer using the server time
&lt;code&gt;func.now()&lt;/code&gt;. Instead we're using the local time of the Python environment
executing the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately this means that the &lt;code&gt;updated_at&lt;/code&gt; timestamp will be different for
each dirty field in the session when committed. This is demonstrated below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob Squarepants&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="go"&gt;# Both these values are the same (computed server side)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 19, 6, 11)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 19, 6, 11)&lt;/span&gt;

&lt;span class="go"&gt;# Each of these individual field values are different :(&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fullname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 16, 6, 4, 176241)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 16, 6, 4, 176218)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Doesn't work with update statements&lt;/h3&gt;
&lt;p&gt;Mutating the record with an update will not propagate changes to the JSON column
timestamps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob Squarepants&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 16, 38, 25, 595457)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;sqlalchemy.engine.cursor.CursorResult object at 0x7f2cd49657f0&amp;gt;&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="go"&gt;# This value is is the same as before!!!&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_updated_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 16, 38, 25, 595457)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To compare, using an &lt;code&gt;update&lt;/code&gt; statement does update record level &lt;code&gt;updated_at&lt;/code&gt;
field from the &lt;code&gt;TimestampMixin&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob Squarepants&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 19, 35, 52)&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spongebob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;sqlalchemy.engine.cursor.CursorResult object at 0x7f35d8f697f0&amp;gt;&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="go"&gt;# Value is updated!&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;spongebob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2023, 6, 22, 19, 36, 10)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Perhaps there's a clever mechanism with event listeners that avoids these
drawbacks but I've yet to figure it out.&lt;/p&gt;
&lt;p&gt;If you happen to know and I haven't updated this post, please let me know what
I'm missing!&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="SQLAlchemy"></category></entry><entry><title>Giving Debian 12 'Bookworm' a Spin</title><link href="https://jackevansevo.github.io/giving-debian-12-bookworm-a-spin.html" rel="alternate"></link><published>2023-06-15T00:00:00+01:00</published><updated>2023-06-15T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-06-15:/giving-debian-12-bookworm-a-spin.html</id><summary type="html">&lt;p&gt;Debian 12 'Bookworm' was recently released, and a number of different factors
aligned that made me decide to give it a go.&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/pwx-TujW8sE" title="Debian 12
&amp;quot;Bookworm&amp;quot; is the Best Release of Debian. Ever." frameborder="0"
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Switching&lt;/h2&gt;
&lt;p&gt;It's been a number of years since I daily drove a Debian, but it's a distro that
I've always had a soft spot for. Back at university …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Debian 12 'Bookworm' was recently released, and a number of different factors
aligned that made me decide to give it a go.&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/pwx-TujW8sE" title="Debian 12
&amp;quot;Bookworm&amp;quot; is the Best Release of Debian. Ever." frameborder="0"
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Switching&lt;/h2&gt;
&lt;p&gt;It's been a number of years since I daily drove a Debian, but it's a distro that
I've always had a soft spot for. Back at university I interned at a company
where a number of employees were contributors to the Debian project, which at
the time I was enamoured by. I respected their Linux expertise and no-nonsense
approach to system administration, something I feel is reflected in the Debian
culture.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Screenshot_20230615_222129.png" alt="Debian
desktop"  style="max-height: 600px"/&gt;&lt;/p&gt;
&lt;p&gt;The distribution itself has a reputation for rock solid stability, historically
not great for users that want the latest and greatest features, but ideal for
being predictable, staying out your way and allowing you to get work done.&lt;/p&gt;
&lt;p&gt;I've always had the sense that if I really wanted a reliable, non-thrills
desktop that I was confident would work for years to come I'd definitely
consider either Debian for personal use. Perhaps if I was installing something
for a family member I'd consider something like Linux Mint. But for myself, I'm
easily distracted and chronically addicted to new shiny things so rarely stick
with one distribution for extended periods of time.&lt;/p&gt;
&lt;h2&gt;Saying Farewell to Open SUSE 🦎&lt;/h2&gt;
&lt;p&gt;I was previously using KDE plasma desktop on Open SUSE, a rolling release distro
that includes all the latest and greatest packages. With the latest release of
Debian 12 the stars aligned perfectly it includes the latest (at the time of
writing) KDE Plasma version 5.27.5, identical to what I was using on SUSE. This
also represents the &lt;a href="https://community.kde.org/Schedules/Plasma_5#LTS_releases"&gt;latest major release of KDE plasma version
5&lt;/a&gt; before KDE plasma
6.&lt;/p&gt;
&lt;p&gt;Below is a quote taken directly from the &lt;a href="https://community.kde.org/Schedules/Plasma_5#LTS_releases"&gt;KDE Plasma 5
schedule&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current LTS release is Plasma 5.27.&lt;/p&gt;
&lt;p&gt;This is the last Plasma 5 release and will receive bugfixes only, no new features. The bugfixes are intended to continue being integrated into 5.27 until a first version of Plasma 6 can be released (and might continue longer).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm hoping this means I'll continue to get the KDE experience I've grown
accustomed to for the foreseeable future without having to worry about potential
breakage of unstability introduced by KDE Plamsa 6 (Something I'd potentially
more likely to encounter sticking with Open SUSE)&lt;/p&gt;
&lt;p&gt;For the most part my experience using Open SUSE was positive. I was pleasantly
surprised by the stability of a rolling release desktop. However I occasionally
ran into issues with conflicting packages, with no clue how my system managed to
end up in such a state and unsure what actions to take to resolve said
conflicts.&lt;/p&gt;
&lt;p&gt;Furthermore, using Open SUSE was a departure from what I'm more familiar with.
Historically I've mostly used Debian or Ubuntu based distrubtions, as such I'm
much more confortable using apt compared to tools like zypper or yast.&lt;/p&gt;
&lt;h2&gt;Impressions&lt;/h2&gt;
&lt;p&gt;I think it's a huge improvement that Debian is including non-free firmware
(where required) in the official installation media. I remember the days where
Wi-Fi on my old thinkpad didn't work post-installation until I'd enabled some
non-free sources. This kind of stuff is just user hostile (especially for
beginners) and I feel this will really help adoption.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Screenshot_20230615_221037.png" alt="Debian about
this system dialogue"  style="max-height: 600px"/&gt;&lt;/p&gt;
&lt;p&gt;In terms of the desktop experience I really appreciate that Debian provides a
very vanilla experience out of the box. Similar to the approach I've seen Fedora
take, there's no major attempts customize any of the desktop environments they
ship.&lt;/p&gt;
&lt;p&gt;Enabling flathub and install packages from flathub means my setup now feels 100%
identical on the surface, the only difference being the underpinnings of the
distribution. I think this speaks to one of the main advantages of Debian in the
current ecosystem. When combined with flatpak you get the best of both worlds: a
rock solid distrbution base and (potentially) the latest and greatest versions of
popular applications via flathub.&lt;/p&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;The only one issue I had was getting video capture working with pipewire in OBS
Studio. After trying both the .deb version and flatpak I was unable to add my
desktop as a screen capture source, resulting in the following warning in the
logs:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;warning: [pipewire] Failed to start screencast, denied or cancelled by user&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After a lot of googling it turns out I just needed to install an extra
'metapackage' pipewire-audio
&lt;a href="https://wiki.debian.org/
PipeWire#Installation"&gt;https://wiki.debian.org/PipeWire#Installation&lt;/a&gt; which I guess it not included by default when using KDE
plasma.&lt;/p&gt;</content><category term="misc"></category><category term="Linux"></category><category term="Debian"></category></entry><entry><title>Bulk audio/video processing on Linux</title><link href="https://jackevansevo.github.io/bulk-audiovideo-processing-on-linux.html" rel="alternate"></link><published>2023-05-03T00:00:00+01:00</published><updated>2023-05-03T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-05-03:/bulk-audiovideo-processing-on-linux.html</id><summary type="html">&lt;p&gt;I recently decided to try my hand recording and producing some screencasts
showing myself building a web application in Django.&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/U278PbXzF2I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I found it comfortable record videos in short manageable sections between 5-20
minutes. However doing so resulted in a bunch of videos ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜  Videos ls -rt podcatcher/*.mp4
podcatcher/ep2.mp4 …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I recently decided to try my hand recording and producing some screencasts
showing myself building a web application in Django.&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/U278PbXzF2I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I found it comfortable record videos in short manageable sections between 5-20
minutes. However doing so resulted in a bunch of videos ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜  Videos ls -rt podcatcher/*.mp4
podcatcher/ep2.mp4  podcatcher/ep7.mp4  podcatcher/ep5.mp4  podcatcher/ep3.mp4  podcatcher/ep8.mp4   podcatcher/ep12.mp4  podcatcher/ep10.mp4  podcatcher/ep14.mp4
podcatcher/ep1.mp4  podcatcher/ep6.mp4  podcatcher/ep4.mp4  podcatcher/ep9.mp4  podcatcher/ep13.mp4  podcatcher/ep11.mp4  podcatcher/ep15.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately for me the audio recording with my headset microphone didn't
exactly come out to great. So I found myself needing to some post-processing in
(Audacity)[https://www.audacityteam.org/] to equalize/amplify and compress the
audio streams of each.&lt;/p&gt;
&lt;h1&gt;Fixing the bad audio&lt;/h1&gt;
&lt;p&gt;To figure out how to fix the audio quality I searched YouTube and found this great guide:&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/dQCB72S64L4"
title="YouTube video player" frameborder="0" allow="accelerometer; autoplay;
clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;Automating the process&lt;/h1&gt;
&lt;p&gt;I started out painstakingly opening each video in Kdenlive and rendering an
audio only copy of the source video to load into Audacity.&lt;/p&gt;
&lt;p&gt;This was before realizing I could just open the videos themselves straight in
Audacity with no issues 🤦 (Audacity will automatically convert an mp4 to an
editable audio stream).&lt;/p&gt;
&lt;p&gt;The next piece of the puzzle was to automate the process of improving the audio. I wanted to be able to apply the same quick and dirty equalization/amplification/compression (from the above tutorial) across all of my files.&lt;/p&gt;
&lt;p&gt;I found that this could easily be achieved using Audacity custom macros, which
allow you to chain together a sequence of steps you'd typically drive from the
UI in an automated fashion.&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe src="https://www.youtube.com/embed/_DZeio_ansE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/Screenshot_20230502_173754.png" alt="Adaucity Manage Macros"  style="max-height: 600px"/&gt;&lt;/p&gt;
&lt;p&gt;Running this macro across all my video files creates a bunch of processed audio files in: &lt;code&gt;~/Documents/macro-output&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜  ~ ls ~/Documents/macro-output
ep10.ogg  ep11.ogg  ep12.ogg  ep13.ogg  ep14.ogg  ep15.ogg  ep1.ogg  ep2.ogg  ep3.ogg  ep4.ogg  ep5.ogg  ep6.ogg  ep7.ogg  ep8.ogg  ep9.ogg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Replacing the original audio&lt;/h1&gt;
&lt;p&gt;I can then use &lt;code&gt;ffmpeg&lt;/code&gt; (curtsey of this
&lt;a href="https://flyingsound.net/about/articles/replace-video-audio-ffmpeg/"&gt;article&lt;/a&gt;)
to create a brand new video from the original, replacing the original audio
track with the newly processed audio files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$(&lt;/span&gt;&lt;span class="nt"&gt;ls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;mp4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ffmpeg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="nt"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;macro-output&lt;/span&gt;&lt;span class="o"&gt;/$(&lt;/span&gt;&lt;span class="nt"&gt;basename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;mp4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ogg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-acodec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-vcodec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;copy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$(&lt;/span&gt;&lt;span class="nt"&gt;basename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;mp4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;-final&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;mp4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which once finished gives me exactly what I need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜  podcatcher ll *.mp4
-rw-r--r-- 1 jack jack  30M May  2 17:20 ep10-final.mp4
-rw-r--r-- 1 jack jack  34M May  2 16:51 ep10.mp4
-rw-r--r-- 1 jack jack  27M May  2 17:20 ep11-final.mp4
-rw-r--r-- 1 jack jack  30M May  2 16:51 ep11.mp4
-rw-r--r-- 1 jack jack  46M May  2 17:20 ep12-final.mp4
-rw-r--r-- 1 jack jack  52M May  2 16:51 ep12.mp4
-rw-r--r-- 1 jack jack  80M May  2 17:20 ep13-final.mp4
-rw-r--r-- 1 jack jack  89M May  2 16:51 ep13.mp4
-rw-r--r-- 1 jack jack  22M May  2 17:20 ep14-final.mp4
-rw-r--r-- 1 jack jack  25M May  2 16:51 ep14.mp4
-rw-r--r-- 1 jack jack  25M May  2 17:20 ep15-final.mp4
-rw-r--r-- 1 jack jack  28M May  2 16:51 ep15.mp4
-rw-r--r-- 1 jack jack 3.8M May  2 17:20 ep1-final.mp4
-rw-r--r-- 1 jack jack 4.5M May  2 16:51 ep1.mp4
-rw-r--r-- 1 jack jack 8.4M May  2 17:20 ep2-final.mp4
-rw-r--r-- 1 jack jack  11M May  2 16:51 ep2.mp4
-rw-r--r-- 1 jack jack  19M May  2 17:20 ep3-final.mp4
-rw-r--r-- 1 jack jack  22M May  2 16:51 ep3.mp4
-rw-r--r-- 1 jack jack  70M May  2 17:20 ep4-final.mp4
-rw-r--r-- 1 jack jack  77M May  2 16:51 ep4.mp4
-rw-r--r-- 1 jack jack  45M May  2 17:20 ep5-final.mp4
-rw-r--r-- 1 jack jack  51M May  2 16:51 ep5.mp4
-rw-r--r-- 1 jack jack  34M May  2 17:20 ep6-final.mp4
-rw-r--r-- 1 jack jack  37M May  2 16:51 ep6.mp4
-rw-r--r-- 1 jack jack  13M May  2 17:20 ep7-final.mp4
-rw-r--r-- 1 jack jack  15M May  2 16:51 ep7.mp4
-rw-r--r-- 1 jack jack  44M May  2 17:20 ep8-final.mp4
-rw-r--r-- 1 jack jack  49M May  2 16:51 ep8.mp4
-rw-r--r-- 1 jack jack  33M May  2 17:20 ep9-final.mp4
-rw-r--r-- 1 jack jack  37M May  2 16:51 ep9.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall I'm super pleased with the result. Whilst the quality of the finished
audio still isn't perfect, it's probably the best I can do with my current
setup.&lt;/p&gt;
&lt;p&gt;The steps here have saved me quite a bit of painful editing and will hopefully
save me a lot more time in the future.&lt;/p&gt;
&lt;p&gt;I'm curious to know what workflows over people have for solving this kind of
task. I'm guessing the majority of people who upload content to Youtube
probably aren't familiar with ffmpeg or Adaucity, would they painstakingly edit
each clip by hand?&lt;/p&gt;
&lt;p&gt;I'm guessing  there's better tools in software like Premier Pro, lightworks or
DaVinci that can handle audio processing easily.&lt;/p&gt;
&lt;p&gt;Now I just need to figure out how to automate thumbnail creation the whole
process will be super smooth!&lt;/p&gt;</content><category term="misc"></category><category term="Linux"></category><category term="Audio"></category></entry><entry><title>TIL: SQLAlchemy 2.0 changes in cascading session behaviour</title><link href="https://jackevansevo.github.io/til-sqlalchemy-20-changes-in-cascading-session-behaviour.html" rel="alternate"></link><published>2023-04-02T00:00:00+01:00</published><updated>2023-04-02T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-04-02:/til-sqlalchemy-20-changes-in-cascading-session-behaviour.html</id><summary type="html">&lt;p&gt;Recently at work I've been upgrading our SQLAlchemy dependency from 1.4 -&amp;gt; 2.0. Along the way I encountered a curious (but documented) change in behaviour.&lt;/p&gt;
&lt;p&gt;After skimming the &lt;a href="https://docs.sqlalchemy.org/en/20/changelog/migration_20.html"&gt;migration guide&lt;/a&gt; and &lt;a href="https://docs.sqlalchemy.org/en/20/changelog/changelog_20.html"&gt;release notes&lt;/a&gt; I decided to blindly bump the dependency, run the integration test suite and see what exploded …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently at work I've been upgrading our SQLAlchemy dependency from 1.4 -&amp;gt; 2.0. Along the way I encountered a curious (but documented) change in behaviour.&lt;/p&gt;
&lt;p&gt;After skimming the &lt;a href="https://docs.sqlalchemy.org/en/20/changelog/migration_20.html"&gt;migration guide&lt;/a&gt; and &lt;a href="https://docs.sqlalchemy.org/en/20/changelog/changelog_20.html"&gt;release notes&lt;/a&gt; I decided to blindly bump the dependency, run the integration test suite and see what exploded 💥.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;....X......X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I observed a few test failing and noticed certain DB objects were missing ID's. After setting up some breakpoints and stepping through the tests it appeared that the objects in question were no longer being added to the session.&lt;/p&gt;
&lt;p&gt;The code looked something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# user is in session&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;

&lt;span class="nb"&gt;breakpoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="c1"&gt;#  False&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# previously expected this to populate person.id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the person object was no longer being added to the session correctly this
explains why no ID's were generated when the session was flushed.&lt;/p&gt;
&lt;p&gt;I managed to reduce this issue down to the following reproducible example.
Running this script with SQLAlchemy 1.4 vs SQLAlchemy 2.0 yields different
results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;person&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user.id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;persons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Person&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;all, delete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sqlite://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add user to DB&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Simulate what prod endpoint is doing&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user in session:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# By associated the person is now part of the session&lt;/span&gt;
    &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person in session:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Will the person.id be populated???&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person.id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As it turns out, our codebase was reliant on the behaviour of unintended side
effects with backrefs in SQLAlchemy 1.4, where related objects would previously get cascaded into the session.&lt;/p&gt;
&lt;p&gt;This behaviour (which caught me out) is well documented in the release notes &lt;a href="https://docs.sqlalchemy.org/en/20/changelog/migration_14.html#cascade-backrefs-behavior-deprecated-for-removal-in-2-0"&gt;here&lt;/a&gt;, which I'd have spotted if I read closer 🤦. Here's the relevant section:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot of release notes section documenting this change" src="https://jackevansevo.github.io/images/Screenshot_20230402_101443.png"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2&gt;Lessons Learnt&lt;/h2&gt;
&lt;p&gt;Next time to read the release notes, especially if they comprehensive!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="SQLAlchemy"></category></entry><entry><title>TIL: Using makeprg to integrate pytest in Vim</title><link href="https://jackevansevo.github.io/til-using-makeprg-to-integrate-pytest-in-vim.html" rel="alternate"></link><published>2023-03-13T00:00:00+00:00</published><updated>2023-03-13T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-03-13:/til-using-makeprg-to-integrate-pytest-in-vim.html</id><summary type="html">&lt;h1&gt;Current Sitution&lt;/h1&gt;
&lt;p&gt;Up until recently I had been running my tests with something like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:vsplit | term pytest %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I typically use different keybindings to invoke pytest with different arguments
(such as -s to debug when setting breakpoints)&lt;/p&gt;
&lt;p&gt;Here's a little demo:&lt;/p&gt;
&lt;video class="w-100" controls&gt;
&lt;source src="https://jackevansevo.github.io/images/Screencast from 2023-03-13 18-33-49 (trimmed).webm"&gt;
&lt;/video&gt;

&lt;p&gt;I liked this approach because it was simple …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Current Sitution&lt;/h1&gt;
&lt;p&gt;Up until recently I had been running my tests with something like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:vsplit | term pytest %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I typically use different keybindings to invoke pytest with different arguments
(such as -s to debug when setting breakpoints)&lt;/p&gt;
&lt;p&gt;Here's a little demo:&lt;/p&gt;
&lt;video class="w-100" controls&gt;
&lt;source src="https://jackevansevo.github.io/images/Screencast from 2023-03-13 18-33-49 (trimmed).webm"&gt;
&lt;/video&gt;

&lt;p&gt;I liked this approach because it was simple and didn't require any additional
plugins, it simply takes advantage of Neovims built in &lt;a href="https://neovim.io/doc/user/nvim_terminal_emulator.html"&gt;terminal
emulator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the benefits of this is that the terminal task is non blocking, so I can
continue editing code without long running tests blocking the UI.&lt;/p&gt;
&lt;p&gt;However, a major downside of this approach is that is doesn't take advantage of
some of the more powerful builtin vim features.&lt;/p&gt;
&lt;p&gt;Ideally, test failures would appear in the &lt;a href="https://vimdoc.sourceforge.net/htmldoc/quickfix.html"&gt;quickfix
list&lt;/a&gt;, making it possible
to quickly jump to the exact lines that failed within tests, right inside my
editor.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;Enter makeprg&lt;/h1&gt;
&lt;p&gt;I was inspired by &lt;a href="https://www.youtube.com/watch?v=vB3NT9QIXo8"&gt;this youtube
video&lt;/a&gt; detailing the &lt;code&gt;makeprg&lt;/code&gt; and
&lt;code&gt;compiler&lt;/code&gt; features in vim, and decided to give this method a try (in favour of
my previous approach).&lt;/p&gt;
&lt;p&gt;Because vim doesn't include a pytest compiler by default, I installed
a &lt;a href="https://github.com/tartansandal/vim-compiler-pytest"&gt;plugin&lt;/a&gt; to provide this
functionality.&lt;/p&gt;
&lt;p&gt;Under the hood this plugin is defining the error structure of pytests output.
With this information vim can parse the output from pytest and display
errors/filenames in the quickfix list.&lt;/p&gt;
&lt;p&gt;Getting this all working is as straightforward as running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;compiler pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I can then invoke pytest with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Percent is vim-speak for the current buffer filename)&lt;/p&gt;
&lt;p&gt;Here's video a comparison:&lt;/p&gt;
&lt;video controls&gt;
&lt;source src="https://jackevansevo.github.io/images/Screencast from 2023-03-13 18-35-10 (trimmed).webm"&gt;
&lt;/video&gt;

&lt;p&gt;Invoking pytest via make populates the quickfix list with errors. This allows
me to quickly jump to error locations directly from within my editor.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;But wait, there's more&lt;/h1&gt;
&lt;p&gt;The major downside of the previous approach is that it blocks the UI, so I've
lost the asynchronous benefits of my original integrated terminal approach.&lt;/p&gt;
&lt;p&gt;However, it's possible to get these tests to run asynchronously (aka: without
blocking the UI) by using:
&lt;a href="https://github.com/tpope/vim-dispatch"&gt;vim-dispatch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This pops open a little tmux window I can quickly switch to with &lt;code&gt;C-b + o&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here's the final result:&lt;/p&gt;
&lt;video controls&gt;
&lt;source src="https://jackevansevo.github.io/images/Screencast from 2023-03-13 18-41-54 (trimmed).webm"&gt;
&lt;/video&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall I'm quite happy with the final result, and pleased I'm leveraged more
of the builtin features of vim to make my life easier.&lt;/p&gt;
&lt;p&gt;If you'd like to learn more about these built-in vim features I recommend
reading:
&lt;a href="https://learnvim.irian.to/basics/compile"&gt;https://learnvim.irian.to/basics/compile&lt;/a&gt;
which I found incredibly helpful.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Vim"></category><category term="Programming"></category></entry><entry><title>February 2023 Review</title><link href="https://jackevansevo.github.io/february-2023-review.html" rel="alternate"></link><published>2023-03-03T00:00:00+00:00</published><updated>2023-03-03T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-03-03:/february-2023-review.html</id><summary type="html">&lt;p&gt;February has been a super busy month for me. I'm pleased to announce that once
again I'm back in Brazil. After a few hiccups* with paperwork I now have
permission to stay for a full year 🥳.&lt;/p&gt;
&lt;p&gt;Since I've been busy moving my entire life across the Atlantic ocean, I haven't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;February has been a super busy month for me. I'm pleased to announce that once
again I'm back in Brazil. After a few hiccups* with paperwork I now have
permission to stay for a full year 🥳.&lt;/p&gt;
&lt;p&gt;Since I've been busy moving my entire life across the Atlantic ocean, I haven't
had as much time to dedicate to reading or writing. Consequently this update is
going to take on a slightly different format from the previous.&lt;/p&gt;
&lt;h2&gt;The Hiccup&lt;/h2&gt;
&lt;p&gt;This is something I learnt the hard way and feel pretty stupid and naive in
hindsight. Some of you might know this already, but for those of you that
don't, take note.&lt;/p&gt;
&lt;p&gt;I'd brought along (what I believed to be) all the &lt;em&gt;correct&lt;/em&gt; visa documentation
to Brazil. Whilst attempting to verify my documents at the police office, visa
processing officers informed me that my copy of the birth certificate I'd brought
along wasn't officially recognised in foreign countries 🤦🏼‍♂️.&lt;/p&gt;
&lt;p&gt;&lt;image style="display: block; margin-left: auto; margin-right: auto; width: 50%;" src="https://media.tenor.com/saayKyX_234AAAAC/shame-shame-cube.gif"&gt;&lt;/image&gt;&lt;/p&gt;
&lt;p&gt;It turns out, Brazil (and many other countries) require an 'Apostille certification'
for certain documentation to be internationally recognised. The fact a document
was issue and recognised in one country, doesn't guarantee it will be
recognised in another&lt;/p&gt;
&lt;p&gt;It's something I'd never encountered before and consequently wasn't something
I'd even thought to check. It caused quite bit of a panic and stress at the
time.&lt;/p&gt;
&lt;p&gt;If you're a UK citizen (like me) you can use &lt;a href="https://www.gov.uk/get-document-legalised"&gt;this
page&lt;/a&gt; on gov.uk to get documents
signed (the process does take a number of weeks).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Adapting to new life in Brazil&lt;/h2&gt;
&lt;p&gt;I flew out on the 12th of February and arrived in the capital (Brasília) the
next day. This timing also nicely coincided with carnival (17th - 25th) which
I experienced for the first time.&lt;/p&gt;
&lt;p&gt;I hope to write more in-depth about my experiences in Brazil in the future, but
for now, I want to share a couple of my favourite things I've discovered here.&lt;/p&gt;
&lt;p&gt;Firstly some of the scenery around the neighbourhood where I'm living is
beautiful, just look at this image!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/PXL_20230225_133933017.jpg" alt="Views from my neighbourhood"  style="max-height: 600px"/&gt;&lt;/p&gt;
&lt;p&gt;Secondly (pictured below), every Sunday the cities main road closed off for
pedestrians. This is a pretty big deal as Brasilia was pretty much designed
under the assumption &lt;a href="https://www.unep.org/news-and-stories/story/car-friendly-brasilia-embraces-walkers-and-cyclists#:~:text=Built%20from%20scratch%20in%20the,highest%20rate%20in%20the%20country."&gt;everyone would get around by
automobile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The attraction is really popular, attracting lots of runners, cyclists and
walkers. Alongside the road street vendors set up stalls selling food, there's
music and the vibes are just generally really nice.&lt;/p&gt;
&lt;p&gt;The road itself is located not too far from where I live, so it's convenient.
This also means I have no excuse to get out there and train 🏃‍♂️ (like
I said I would in my 2023 New Years Resolution).&lt;/p&gt;
&lt;p&gt;It's been nearly a full year since I last participated in a running event
(Stafford half marathon) so I'm currently debating whether or not to sign up
for a &lt;a href="https://www.circuitodasestacoes.com.br/brasilia/outono/"&gt;13k run&lt;/a&gt;
(Circuito das Estações) here in Brasília later this month (26th March).&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/PXL_20230219_124525802.jpg" alt="Every Sunday the main road is closed for pedestrians"  style="max-height: 600px"/&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Personal"></category></entry><entry><title>TIL: How Unix timestamps work in Python</title><link href="https://jackevansevo.github.io/til-how-unix-timestamps-work-in-python.html" rel="alternate"></link><published>2023-02-26T00:00:00+00:00</published><updated>2023-02-26T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-02-26:/til-how-unix-timestamps-work-in-python.html</id><summary type="html">&lt;h1&gt;The Problem:&lt;/h1&gt;
&lt;p&gt;A while back I wrote some tests that generated and compared timestamps. At the
time I wrote the tests I was in the UK (GMT/UTC+0).&lt;/p&gt;
&lt;p&gt;This week I changed the timezone of my machine and re-ran the same tests and
(much to my dismay) they failed …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Problem:&lt;/h1&gt;
&lt;p&gt;A while back I wrote some tests that generated and compared timestamps. At the
time I wrote the tests I was in the UK (GMT/UTC+0).&lt;/p&gt;
&lt;p&gt;This week I changed the timezone of my machine and re-ran the same tests and
(much to my dismay) they failed ...&lt;/p&gt;
&lt;p&gt;The tests depended on generating timestamps with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;1677433706.461197&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Somewhere in the code these timestamps are converted from a timestamp to
a datetime.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;marshmallow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MySchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Strangely, the act of converting the timestamp had caused it to leap ahead by
3 hours.&lt;/p&gt;
&lt;h1&gt;Debugging&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/marshmallow-code/marshmallow/blob/eae0652de3c393e85976f05b6744eda815802c48/src/marshmallow/utils.py#L193-L200"&gt;Under the
hood&lt;/a&gt;,
Marshmallow is (correctly) loading the timestamp as UTC.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Not a valid POSIX timestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Load a timestamp with utc as timezone to prevent using system timezone.&lt;/span&gt;
    &lt;span class="c1"&gt;# Then set timezone to None, to let the Field handle adding timezone info.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This all seems pretty sensible so made me realize the bug was probably due to
the mechanism I was using to create timestamps in the first place.&lt;/p&gt;
&lt;p&gt;It's more clear once you take the timestamp and run it through
&lt;a href="https://www.epochconverter.com"&gt;epochconverter.com&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Calculator converting epoch to human readable date" src="https://jackevansevo.github.io/images/Screenshot from 2023-02-26 14-50-20.png"&gt;&lt;/p&gt;
&lt;p&gt;This timestamp turns out to be system time on my machine (which is 17:48 GMT).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;1677433706.461197&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The following causes the time to leap ahead because it's assuming the original
timestamp is already in UTC.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromtimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;The Fix:&lt;/h1&gt;
&lt;p&gt;Instead I needed to write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;1677422906.461197&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Calculator converting epoch to human readable date" src="https://jackevansevo.github.io/images/Screenshot from 2023-02-26 15-13-11.png"&gt;&lt;/p&gt;
&lt;p&gt;There's a note about this behaviour in the
&lt;a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp"&gt;documentation&lt;/a&gt;
for &lt;code&gt;datetime.datetime.timestamp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of documentation" src="https://jackevansevo.github.io/images/Screenshot from 2023-02-26 15-21-24.png"&gt;&lt;/p&gt;
&lt;p&gt;With this fix in place, the conversion now works as expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2023&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;461197&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Lessons Learnt&lt;/h1&gt;
&lt;p&gt;I guess the key takeaway from this is not to ever write tests that depend on
a specific system time, and always try to adhere to UTC, (unless you're
specifically forced not to).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category></entry><entry><title>Direnv: Fix missing virtualenv shell prefix</title><link href="https://jackevansevo.github.io/direnv-fix-missing-virtualenv-shell-prefix.html" rel="alternate"></link><published>2023-02-23T00:00:00+00:00</published><updated>2023-02-23T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-02-23:/direnv-fix-missing-virtualenv-shell-prefix.html</id><summary type="html">&lt;p&gt;Something minor I came across today.&lt;/p&gt;
&lt;p&gt;I like to use a tool called &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt;, I'm
also currently using &lt;a href="https://www.zsh.org/"&gt;zsh&lt;/a&gt; as my shell of choice (with
&lt;a href="https://ohmyz.sh/"&gt;ohmyzsh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Day to day I write a lot of Python, so I use direnv to automatically activate
(or create) python virtual environments when I navigate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Something minor I came across today.&lt;/p&gt;
&lt;p&gt;I like to use a tool called &lt;a href="https://github.com/direnv/direnv"&gt;direnv&lt;/a&gt;, I'm
also currently using &lt;a href="https://www.zsh.org/"&gt;zsh&lt;/a&gt; as my shell of choice (with
&lt;a href="https://ohmyz.sh/"&gt;ohmyzsh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Day to day I write a lot of Python, so I use direnv to automatically activate
(or create) python virtual environments when I navigate into certain
directories. See an example:&lt;/p&gt;
&lt;h2&gt;Current Behaviour&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog
direnv:&lt;span class="w"&gt; &lt;/span&gt;loading&lt;span class="w"&gt; &lt;/span&gt;~/code/blog/.envrc
direnv:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;+VIRTUAL_ENV&lt;span class="w"&gt; &lt;/span&gt;~PATH
➜&lt;span class="w"&gt;  &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;
/home/jackevans/code/blog/.direnv/python-3.11.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At a glance it's difficult to tell whether my current shell currently
has a &lt;code&gt;$VIRTUAL_ENV&lt;/code&gt; activated or not.&lt;/p&gt;
&lt;h2&gt;Desired Behaviour&lt;/h2&gt;
&lt;p&gt;If I manually source a virtualenv, the behaviour is slightly different, instead
my prompt will show a prefix &lt;code&gt;(python-3.11.1)&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜&lt;span class="w"&gt;  &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~&lt;span class="w"&gt; &lt;/span&gt;direnv&lt;span class="w"&gt; &lt;/span&gt;deny
direnv:&lt;span class="w"&gt; &lt;/span&gt;error&lt;span class="w"&gt; &lt;/span&gt;/home/jackevans/code/blog/.envrc&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;blocked.&lt;span class="w"&gt; &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;direnv&lt;span class="w"&gt; &lt;/span&gt;allow&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;approve&lt;span class="w"&gt; &lt;/span&gt;its&lt;span class="w"&gt; &lt;/span&gt;content

➜&lt;span class="w"&gt;  &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.direnv/python-3.11.1/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;python-3.11.1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;➜&lt;span class="w"&gt;  &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~&lt;span class="w"&gt; &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;I came across &lt;a href="https://stackoverflow.com/questions/52437468/activating-virtualenv-with-direnv-doesnt-activate-virtualenv"&gt;this
thread&lt;/a&gt;
which pointed me to the official &lt;a href="https://github.com/direnv/direnv/wiki/Python#restoring-the-ps1"&gt;direnv
documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The solution is to place the &lt;a href="https://github.com/direnv/direnv/wiki/Python#zsh"&gt;following snippet&lt;/a&gt; in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;setopt&lt;span class="w"&gt; &lt;/span&gt;PROMPT_SUBST

show_virtual_env&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DIRENV_DIR&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$(show_virtual_env)&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$PS1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then enjoy your consistent virtualenv prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜&lt;span class="w"&gt;  &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;span class="o"&gt;(&lt;/span&gt;python-3.11.1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;➜&lt;span class="w"&gt;  &lt;/span&gt;flitter&lt;span class="w"&gt; &lt;/span&gt;git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Shell"></category></entry><entry><title>January 2023 Review</title><link href="https://jackevansevo.github.io/january-2023-review.html" rel="alternate"></link><published>2023-02-02T00:00:00+00:00</published><updated>2023-02-02T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-02-02:/january-2023-review.html</id><summary type="html">&lt;style&gt;
img {
    max-height: 250px;
}
&lt;/style&gt;

&lt;p&gt;2023 started with a bang and January has been a pretty busy month for me.&lt;/p&gt;
&lt;p&gt;Back in 2022 I applied for a visa to live and work in Brazil 🇧🇷. After some
delays I'm pleased to announce my visa finally got approved 🥳. There's
a deadline for me to …&lt;/p&gt;</summary><content type="html">&lt;style&gt;
img {
    max-height: 250px;
}
&lt;/style&gt;

&lt;p&gt;2023 started with a bang and January has been a pretty busy month for me.&lt;/p&gt;
&lt;p&gt;Back in 2022 I applied for a visa to live and work in Brazil 🇧🇷. After some
delays I'm pleased to announce my visa finally got approved 🥳. There's
a deadline for me to present myself in the country with the appropriate
paperwork so I've been rapidly scrambling to get ready. I'm a little anxious
about the process, but fingers crossed everything will work out okay.&lt;/p&gt;
&lt;p&gt;I drew up a huge list of things I need to complete before my departure on the
11th February and thankfully most of the things have now been crossed off.&lt;/p&gt;
&lt;p&gt;In preparation I've been moving items into storage and selling (or donating)
personal belongings before I leave. So far I've managed to sell my car,
completely clear out all of books on my bookshelf, and sell a bunch of unused
computing devices.&lt;/p&gt;
&lt;p&gt;According to eBay I've sold 18 individual items in the last 30 days. Despite
the postal strikes in the UK, much to my amazements all of them were delivered
to buyers with zero issues. So I think I've used all my luck quota for 2023.&lt;/p&gt;
&lt;p&gt;The process of having a giant clear out has been quite therapeutic, and feels
like I'm effectively starting my life afresh. The experience really made me
realize quite how much rubbish I'd accumulated over the years.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/PXL_20230115_100555134.MP.jpg" alt="A pile of all the books I've sold on eBay"  style="max-height: 500px"/&gt;&lt;/p&gt;
&lt;p&gt;Amongst the pile of books was a 'Python for Dummies' I had as a teenager, which
gave me a chuckle because now I'm paid to write Python.&lt;/p&gt;
&lt;h1&gt;📚 Books I Read This Month&lt;/h1&gt;
&lt;p&gt;Alongside selling books, I somehow managed to find the time to read this month.
I managed to complete three books in total, which sets me well on target for my
2023 reading goals.&lt;/p&gt;
&lt;h2&gt;1. Contact - Carl Sagan&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Contact - Carl Sagan" src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1560757678l/52283742.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed this one, a page turner that captured my attention all the way
through.&lt;/p&gt;
&lt;p&gt;The book captures the work of the SETI Institute (Search for extraterrestrial
intelligence), following a group scientists who monitor space for signs of life
with telescopes.&lt;/p&gt;
&lt;h2&gt;2. Kleptopia: How Dirty Money is Conquering the World - Kleptopia: How Dirty Money is Conquering the World - Tom Burgis&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Kleptopia: How Dirty Money is Conquering the World - Kleptopia: How Dirty Money is Conquering the World - Tom Burgis" src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1576309963i/49230961.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I'll be honest this one felt like a bit of a chore to get through. There were
numerous points where I nearly shelved it, but eventually I managed to power
all the way through.&lt;/p&gt;
&lt;h2&gt;3. The Anthropocene Reviewed - John Green&lt;/h2&gt;
&lt;p&gt;&lt;img alt="The Anthropocene Reviewed - John Green" src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1616514130i/55145261.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Although I've read some of his previous books I'm think I'm more familiar with
John from his YouTube endeavours than his literature.&lt;/p&gt;
&lt;p&gt;I've been an on and off watcher of John (and his brother Hank) on YouTube for
as long as I can remember. So it was nice to learn a bit more about someone
who's been a stable of my YouTube subscription box for most of a decade.&lt;/p&gt;
&lt;h2&gt;Currently Reading&lt;/h2&gt;
&lt;p&gt;&lt;img alt="The Lord of the Rings" src="https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1566425108i/33.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I'm currently reading the Lord of the Rings Trilogy, and I'm on Book 1 of the Fellowship of the Ring.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;Some Articles I Enjoyed&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://ntdotdev.wordpress.com/2023/01/01/state-of-the-windows-how-many-layers-of-ui-inconsistencies-are-in-windows-11/"&gt;State of the Windows: How many layers of UI inconsistencies are in Windows 11?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Every time I touch Windows I'm shocked by the number of UI inconsistencies and
this article really drives that point home. Made me realize I really do take
Linux and MacOS for granted sometimes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://idlewords.com/2023/1/why_not_mars.htm"&gt;Why Not Mars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article/array lays out some arguments explaining why investing resources
into travelling to Mars is most likely a bad idea.&lt;/p&gt;
&lt;p&gt;I do think it's a bit absurd the billionaire class on this planet (Elon
Musk/Jeff Bezos) are so desperately trying to escape to space/mars via
privately funded space programs instead of using those resources to solve
problems back home on earth.&lt;/p&gt;
&lt;p&gt;Prediction: We won't see human being on the surface of Mars in my lifetime.
Elon can barely run Twitter, so I hardly trust SpaceX to colonize another
planet.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://snarky.ca/classifying-python-virtual-environment-workflows/"&gt;Classifying Python virtual environment workflows&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A comprehensive overview of the madness that is Python packaging. Every time
this topic comes up it's a tad depressing, because the landscape hasn't really
improved, (and in some cases continues to fragment) in recent years.&lt;/p&gt;
&lt;p&gt;But I do think efforts to document &amp;amp; describe all the different workflows like
this are an important step to hopefully improving the situation. I am hopeful
the situation will improve.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.baldurbjarnason.com/2022/programming-is-a-pop-culture/"&gt;Programming is a Pop Culture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one resonated with me, we all like to think of programmers as super
objective, but in reality, when it comes to the tools we pick there's a lot of
tribalism. Things aren't necessarily trendy because they're 'the best' (by some
objective measure), sometimes tools or language just happen to be in the right
time at the right place.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lukeplant.me.uk/blog/posts/pythons-disappointing-superpowers/"&gt;Python’s “Disappointing” Superpowers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A cracking article written in response to &lt;a href="https://buttondown.email/hillelwayne/archive/i-am-disappointed-by-dynamic-typing/"&gt;another
article&lt;/a&gt;
lamenting the lack of 'superpowers' in modern languages. This article shines
a light on some major Python projects that do happen to make use of clever
dynamic programming (you just might not notice). I'd encourage you to have
a read of both.&lt;/p&gt;</content><category term="misc"></category><category term="Personal"></category></entry><entry><title>🌓 Setting the Neovim background from the Gnome system theme</title><link href="https://jackevansevo.github.io/setting-the-neovim-background-from-the-gnome-system-theme.html" rel="alternate"></link><published>2023-01-29T00:00:00+00:00</published><updated>2023-01-29T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-01-29:/setting-the-neovim-background-from-the-gnome-system-theme.html</id><summary type="html">&lt;p&gt;I wanted to set my Neovim background conditionally based on the Gnome system
theme (light/dark).&lt;/p&gt;
&lt;p&gt;I came up with the following snippet, which lives in my &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plenary.job&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gsettings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;org.gnome.desktop.interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;color-scheme&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I wanted to set my Neovim background conditionally based on the Gnome system
theme (light/dark).&lt;/p&gt;
&lt;p&gt;I came up with the following snippet, which lives in my &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plenary.job&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gsettings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;org.gnome.desktop.interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;color-scheme&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;prefer-dark&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
  &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;
&lt;span class="kr"&gt;else&lt;/span&gt;
  &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;light&amp;#39;&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The downside here is you have to re-source your &lt;code&gt;init.lua&lt;/code&gt; after changing the
system theme, so the process isn't automatic. I wonder whether I'd be able to
run a background process to poll for this value (or subscribe to events) to
automatically change the theme.&lt;/p&gt;
&lt;p&gt;I plan to play around getting this working on MacOS (which I use for work) as
well.&lt;/p&gt;
&lt;hr&gt;</content><category term="misc"></category><category term="Linux"></category><category term="Neovim"></category></entry><entry><title>🪦 Pixel 3a Obituary</title><link href="https://jackevansevo.github.io/pixel-3a-obituary.html" rel="alternate"></link><published>2023-01-18T00:00:00+00:00</published><updated>2023-01-18T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-01-18:/pixel-3a-obituary.html</id><summary type="html">&lt;p&gt;It finally happened, last weekend I dropped my phone and the screen smashed.&lt;/p&gt;
&lt;p&gt;This wasn't the kind of minor screen damage you sometimes see, where you can
continue to use the phone with a slightly degraded experience. Instead it was
the kind of damage that left me picking glass out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It finally happened, last weekend I dropped my phone and the screen smashed.&lt;/p&gt;
&lt;p&gt;This wasn't the kind of minor screen damage you sometimes see, where you can
continue to use the phone with a slightly degraded experience. Instead it was
the kind of damage that left me picking glass out my bleeding thumb in the
middle of a supermarket later the same day, not ideal.&lt;/p&gt;
&lt;p&gt;I've previously dropped this phone more times than I can count as I'm
notoriously clumsy, but each time the phone miraculously escaped unharmed. So
I'm honestly surprised its lasted as long as it has. I've always stupidly prided
myself in being a person who'd never dropped and smashed their phone. But, alas
my luck finally ran out.&lt;/p&gt;
&lt;p&gt;After getting home I looked around to see what it would cost to get it repaired.
The repair costs were nearing the cost for a completely new pixel 3a
replacement. This combined with the fact the device had received it's &lt;a href="https://support.google.com/pixelphone/answer/4457705?hl=en-GB#zippy=%
2Cpixel-a-xl-and-earlier"&gt;last
official security
update&lt;/a&gt; meant it was finally time to say goodbye.&lt;/p&gt;
&lt;p&gt;This is most expensive mobile device I've ever owned, and the first where I've
truly been blown away by the quality of the camera. For an affordable budget
phone, the shots this phone took were gorgeous, and to this day I think the
camera still holds its own.&lt;/p&gt;
&lt;p&gt;It lasted exactly 3 years, 7 months and 25 days. Back in 2019 it cost £399 (and
came with a free Nest Hub). With works out to ~0.30p a day, which is pretty good
going.&lt;/p&gt;
&lt;p&gt;So here's to you Pixel3a, you served me well.&lt;/p&gt;
&lt;p&gt;Rest in pixels 📱💀&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height: 50rem;" src="https://jackevansevo.github.io/images/pixel-3a-screen-crack.jpg" alt="pixel 3a screen crack"&gt;&lt;/img&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Android"></category></entry><entry><title>Revisiting KDE</title><link href="https://jackevansevo.github.io/revisiting-kde.html" rel="alternate"></link><published>2023-01-15T00:00:00+00:00</published><updated>2023-01-15T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-01-15:/revisiting-kde.html</id><summary type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;It's been years since I last used the KDE desktop environment. Unfortunately, I
don't have an exact screenshot of my desktop when I last used KDE, but from
memory it probably looked a lot like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/KDE_4.png/1024px-KDE_4.png" alt="KDE Oxygen desktop"/&gt;&lt;/p&gt;
&lt;p&gt;Looking back I'm not sure the Oxygen theme has aged particularly well, but …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;It's been years since I last used the KDE desktop environment. Unfortunately, I
don't have an exact screenshot of my desktop when I last used KDE, but from
memory it probably looked a lot like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/KDE_4.png/1024px-KDE_4.png" alt="KDE Oxygen desktop"/&gt;&lt;/p&gt;
&lt;p&gt;Looking back I'm not sure the Oxygen theme has aged particularly well, but this
picture fills me with nostalgia and so will always have a special place in my
heart.&lt;/p&gt;
&lt;p&gt;Over the years KDE has (unfairly in my eyes) had a fairly negative reputation,
and stereotyped for being quite buggy and resource hungry. I don't recall being
affected by these issues described first hand, but hearing critical sentiments
like this left me with a negative impression and drove me away from using KDE.
So although I do have fond memories of this desktop, they were tainted by the
opinions of a few vocal Linux enthusiasts at the time. I was young and
impressionable, and wanted to use to use the 'best' thing, even if that meant
not being able to form my own independent assessment.&lt;/p&gt;
&lt;p&gt;Consequently I was content to stay on Gnome desktop (and various forks) for most
of my time on Linux. But that all changed pretty recently. I wanted to revisit
KDE and see if this reputation was still warranted. I think part of me wanted to
make amends and give some love to a Desktop environment I felt I'd never really
given an honest chance.&lt;/p&gt;
&lt;p&gt;Largely I was inspired to give KDE another try after seeing some pretty positive
recent momentum in the community. A prime example is TechHut releasing this
video:&lt;/p&gt;
&lt;div class="ratio ratio-21x9"&gt;
&lt;iframe
src="https://www.youtube.com/embed/3nX1YEQg5Z0" title="10 ways KDE is just
BETTER" frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture; web-share"
allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I follow Nate Graham on his blog &lt;a href="https://pointieststick.com"&gt;"Adventures in Linux and
KDE"&lt;/a&gt; who's posts frequently hit the front-page of
&lt;a href="https://reddit.com/r/linux"&gt;/r/linux&lt;/a&gt;, which makes developments in KDE
impossible to ignore. It's really impressive to see the volume of improvements
that go into the desktop each week.&lt;/p&gt;
&lt;p&gt;All of this positive sustained coverage culminated in me caving and deciding to
see what all the fuss was about.&lt;/p&gt;
&lt;p&gt;I opted to install Open SUSE Tumbleweed because I fancied trying out a rolling
release distribution and wanted an up-to-date KDE experience without having to
jump through hoops. I briefly toyed with the idea of trying KDE Neon, but
ultimately wanted something different then another Ubuntu based distribution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer At the time of writing I'm on KDE Plasma version 5.26.5.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1&gt;The Good&lt;/h1&gt;
&lt;h2&gt;Applets&lt;/h2&gt;
&lt;p&gt;I always found the applets on Gnome to be a bit frustrating, and find much great
utility from their KDE counterparts. Frequently on Gnome I'd be forced to open
up system settings to perform some basic action, like switching/connecting a
Bluetooth device or altering specific device volume.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pointieststick.files.wordpress.com/2023/01/kscreen-applet-in-system-tray.jpg?w=650&amp;h=172" alt="KDE applets"/&gt;&lt;/p&gt;
&lt;p&gt;Whereas on KDE applets typically quickly allow me to to perform the required
action without having to dive into the full settings. On Gnome there's a
patchwork of &lt;a href="https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/"&gt;3rd party
extensions&lt;/a&gt; that &lt;a href="https://www.omgubuntu.co.uk/2022/09/bluetooth-quick-connect-gnome-extension"&gt;fill this niche&lt;/a&gt; but I find myself much preferring the out of the box
experience offered by KDE.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/kde-bluetooth-applet.png" alt="KDE Bluetooth applet"/&gt;&lt;/p&gt;
&lt;h2&gt;Multi Monitor Support&lt;/h2&gt;
&lt;p&gt;To my surprise everything just works, I haven't had a single issue with
multi-monitor support so far. All this is even before some &lt;a href="https://notmart.org/blog/2022/12/multi-screen/"&gt;multi-screen
improvements&lt;/a&gt; due to arrive in
Plasma
5.27&lt;/p&gt;
&lt;p&gt;Often I'll plug my laptop in to drive a primary display but then close the lip
on my laptop, running just one display. When I do this all the windows open on
my laptop automatically switch over to the main display.&lt;/p&gt;
&lt;p&gt;The Display Configuration Applet makes it really easily to quickly kill the
laptop screen and work from the Primary monitor even when the laptop lid is
open. Traditionally multi-monitor configuration on Linux has been a nightmare, but
this has been working a charm for me.&lt;/p&gt;
&lt;h2&gt;KWin Customisation (Disabling Borders Per Application)&lt;/h2&gt;
&lt;p&gt;A small thing that might be possible in other environments, but KDE makes super
trivial. I'll often configure this when I have two windows side by side. This
sort of mirrors the way I used to use the i3 tiling window manager, allowing me
to arrange borderless windwos for maximum vertical space.&lt;/p&gt;
&lt;p&gt;&lt;img alt="KWin hide boders" src="https://jackevansevo.github.io/images/kde-hide-borders.png"&gt;&lt;/p&gt;
&lt;h2&gt;Theming&lt;/h2&gt;
&lt;p&gt;I quickly switched from the default openSUSE theme to default Breeze
implementation. I'm a big fan, everything ends up looking nice and consistent
across the desktop. The ability to inherit the accent colour from the current
wallpaper is a nice touch. Although I do wish there was a nice way to
automatically to switch from Light/Dark mode based on the current locale
(similar to the way android works).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Breeze Theme Switcher" src="https://jackevansevo.github.io/images/breeze-themes.png"&gt;&lt;/p&gt;
&lt;h2&gt;KDE Apps&lt;/h2&gt;
&lt;h3&gt;Kate&lt;/h3&gt;
&lt;p&gt;It's been a while since I tried out this editor and I'm pleased to see it's
developed a bunch of useful new features since. Now it's got builtin LSP
support, git integration, session support and a quick 'Quick Open Search' fuzzy
file searcher. What more could you need from a modern lightweight editor
(without reaching for a full IDE).&lt;/p&gt;
&lt;p&gt;The comprehensive vi input mode, combined with the rest of the editor experience
means it's so good that I'll stray from my typical neovim terminal setup (which
is high praise). It would be absolutely fantastic if at some point neovim gets a
proper headless mode to allow it to be easily integrated with GUI-editors. If
Kate, (or similar) ever developed this feature I'd love to use the editor as a
front-end UI for neovim. But I'm unsure whether this is within the scope of the
project.&lt;/p&gt;
&lt;p&gt;I've had a few issues configuring the LSP integration from within a Python
virtual-environment, but aside from this the experience has been very positive.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/kate.png" alt="Kate editor"/&gt;&lt;/p&gt;
&lt;h2&gt;Stability&lt;/h2&gt;
&lt;p&gt;This one is surprising to me and I'm on Open SUSE tumbleweed, which pulls
up-to-date versions of software from upstream repositories. I expected lots of
crashes, everything to be bug-ridden, constantly encountering little regressions
with each update. I'm pleased to say this hasn't been the case, I've only had a
single crash (albeit a pretty serious one) so far which I'll touch on in the
next section.&lt;/p&gt;
&lt;h1&gt;The Not So Good&lt;/h1&gt;
&lt;p&gt;Most of my experience has been pleasant, but I did encounter a few minor issues,
which I've documented below.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;Krashes&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;When I came to wake my laptop from sleep I was greeted by the following (fairly
intimidating) error message screen. Instead of following the instructions on
screen I just hard rebooted my machine 🥱.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/PXL_20230105_192004711.jpg" alt="Kate editor"/&gt;&lt;/p&gt;
&lt;h2&gt;Application Task Switchers (Alt+Tab Switcher) Styles&lt;/h2&gt;
&lt;p&gt;My most recently used desktop environments before trying KDE have been MacOSX,
Gnome and Cinnamon. A common trait they share is that each have a pretty similar
Alt+Tab look and feel, a style I appreciate.&lt;/p&gt;
&lt;p&gt;KDE has a variety of application launchers to choose from, but in my opinion
none of them look quite as visually appealing. With the Large Icons the spacing
sometimes looks off, and app icons will occasionally look blurry or missing
completely, on the other hand the Small Icons switcher is simply way too small.
I've settled on using the default Breeze switcher, which I initially had an
aversion to due to it's placement on the left hand side of the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/kde-icon-task-switcher.png" alt="KDE Task Switcher"/&gt;&lt;/p&gt;
&lt;p&gt;I think this is partially my fault for using Flatpak applications and expecting
the desktop integration be 100% seamless. I strongly suspect it might also be an
upstream issue (and not the fault of KDE itself), but I've not encountered
similar issues on Gnome/Cinnamon.&lt;/p&gt;
&lt;h2&gt;App Launcher Search Relevancy&lt;/h2&gt;
&lt;h3&gt;Krunner vs Application Launcher vs Overview&lt;/h3&gt;
&lt;p&gt;The functionality offered by all of these launchers appears to completely
overlap. So I'm not sure when I'd opt to use one over the other? This is
obviously just a skill issue, but I think I prefer the unified search
implementation offered by Gnome shell which removes any ambiguity.&lt;/p&gt;
&lt;h3&gt;Search Relevancy&lt;/h3&gt;
&lt;p&gt;Occasionally I'll search for something and what I'm looking for will be the
second most relevant result, which can be frustrating.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example A:&lt;/strong&gt; If I type word &lt;em&gt;"mouse"&lt;/em&gt; to bring up the settings panel to configure my
mouse, the first two characters "mo" returns a list of results where Htop is the
most relevant.&lt;/p&gt;
&lt;p&gt;&lt;img alt="KDE Mouse Search" src="https://jackevansevo.github.io/images/kde-search-mouse.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example B:&lt;/strong&gt; If I type &lt;em&gt;"settings"&lt;/em&gt; the top result is Steam settings. In 99% of
cases, this is never the result I want. I feel like KDE built-ins should take
precedence here. Or perhaps there should be reserve words that prevent
third-party applications from appearing as the top result.&lt;/p&gt;
&lt;p&gt;&lt;img alt="KDE Settings Search" src="https://jackevansevo.github.io/images/kde-search-settings.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example C:&lt;/strong&gt; If I type &lt;em&gt;"Downloads"&lt;/em&gt; I get x3 results. If I want to open my
~/Downloads folder in Dolphin which one is correct?&lt;/p&gt;
&lt;p&gt;In this scenario the first result opens up a KDE Settings Panel to change the
default Download location (unlikely what I want). The second two results are
equivalent, likely from two search plugins returning the same thing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="KDE Downloads Search" src="https://jackevansevo.github.io/images/kde-search-downloads.png"&gt;&lt;/p&gt;
&lt;p&gt;All very minor things, but it frequently makes me double take before I hit the
&amp;lt;enter&amp;gt; when searching, which can be annoying.&lt;/p&gt;
&lt;p&gt;I disabled a majority of the enabled search plugins very early on to try and
improve the experience, speed up the search and provide more relevant
results. But I still run into occasional issues like this.&lt;/p&gt;
&lt;p&gt;There's a good chance that my muscle memory from other desktops is tainting my
experience on KDE. But I do think both the Gnome and Cinnamon desktops to a
better job of this out of the box. On Cinnamon I would blindly hit &amp;lt;super&amp;gt;
start typing then slam &amp;lt;enter&amp;gt; without thinking and it would somehow always do
the right thing.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall my experience so far with KDE has been overwhelmingly positive, despite
some of the criticism covered in this article. It's great to see how far the
desktop has improved since I last used it, and I'm excited to see where the
project goes in the future, especially with KDE 6 on the horizon.&lt;/p&gt;
&lt;p&gt;I plan to stick with KDE for the foreseeable future, or until I get the nagging
urge to jump ship and try something new :P&lt;/p&gt;</content><category term="misc"></category><category term="Linux"></category></entry><entry><title>Confession: I'm a serial Linux Distro hopper</title><link href="https://jackevansevo.github.io/confession-im-a-serial-linux-distro-hopper.html" rel="alternate"></link><published>2023-01-08T00:00:00+00:00</published><updated>2023-01-08T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2023-01-08:/confession-im-a-serial-linux-distro-hopper.html</id><summary type="html">&lt;p&gt;It's time to admit. I have a problem... I am a serial Linux distro hopper. I've
sunk a disproportionate amount of time wiping, installing and configuring new
environments during my life.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Breakfast club confession
circle" src="https://images.rapgenius.com/c926d2a3a04802075917908417fa2236.1000x513x1
.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It's an addiction that developed from a young age, my earliest Linux memories
was purchasing magazines with disks containing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's time to admit. I have a problem... I am a serial Linux distro hopper. I've
sunk a disproportionate amount of time wiping, installing and configuring new
environments during my life.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Breakfast club confession
circle" src="https://images.rapgenius.com/c926d2a3a04802075917908417fa2236.1000x513x1
.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It's an addiction that developed from a young age, my earliest Linux memories
was purchasing magazines with disks containing new distribution releases and
like a kid in a candy store, excitedly trying each. It was a wild and
experimental time, Canonical had just released Unity, Gnome 3 was released, KDE
could do just about everything.&lt;/p&gt;
&lt;p&gt;I enjoyed exploring each new desktop paradigm and loved the level of
customization available on Linux that simply wasn't available on Windows. I have
fond memories of messing around with Compiz, turning on wobbly windows, fire
closing animations and a crazy desktop cube overview. It felt like the future.&lt;/p&gt;
&lt;p&gt;That was around 10 years ago, and I've been using Linux on the desktop on most
of my personal computing devices ever since. Perhaps I'm trying to chase that
magical feeling I experienced during these first few years. Since then, I've
used just about every big distribution there is, and toyed about with all kinds
of desktop environments, you made it, I've probably tried it.&lt;/p&gt;
&lt;p&gt;The only slight benefit of this addiction is that consequently, over the years,
I've gotten pretty good at quickly configuring systems and getting up and
running. Give me a new PC (i.e. if I'm on-boarding at a company) and I'll be up
and ready in a couple hours with whatever tools I need. Nowadays I tend to make
minimal customization tweaks, and instead lean towards distributions/desktop
environments that require little customization out of the box. The smoother the
initial experience, the better my overall impression.&lt;/p&gt;
&lt;p&gt;The maximum amount of time I've been able to stay on the same
distribution/desktop environment is about ~6 months. I can narrow this down to a
few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New and shiny&lt;/strong&gt;: With new things constantly being released I always get the
urge to try something new and exciting. The comfort and familiarity with using
the same environment after a while becomes mundane, giving me the urge to switch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Death by a thousand cuts / (The grass is always greener)&lt;/strong&gt;: The longer I
use a distro, the greater number of issues I tend to encounter. After time, the
cracks begun to show, these little paper cuts add up and I get frustrated. I'll
be tempted to start over with something new in the hopes it will address all my
problems.&lt;/p&gt;
&lt;p&gt;Consequently I've noticed a pattern: I'll bounce back and forth between
rolling release distributions, get annoyed when bleeding edge stuff breaks then
switch to something fixed release, gaining stability but then feeling left out
because I'm not using the newest/coolest software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nostalgia&lt;/strong&gt;: If I haven't used something in a while, often I'll get the
yearning to try it again, just for nostalgias sake. It's also great to
experience first hand how far various projects have come when revisiting them
after a long abscence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Case and point, since writing about my positive impressions of Fedora 36
earlier last year I ended up getting bored with Gnome desktop and decided to
give Linux Mint another try after a long abscence. This brief affair only latest
2 months. There wasn't anything wrong with Linux Mint per say, it was rock
solid, stable and everything I needed. The temptation to try something new just
took over.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://media.tenor.com/rDNGnGliOOAAAAAC/futurama-days-since-last-accident.gif" alt="Days since last incident" width="500"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+%s&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="w"&gt; &lt;/span&gt;+%s&lt;span class="w"&gt; &lt;/span&gt;--date&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;stat&lt;span class="w"&gt; &lt;/span&gt;/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;awk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Birth: /{print $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="o"&gt;)/(&lt;/span&gt;&lt;span class="m"&gt;3600&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;days&lt;span class="w"&gt; &lt;/span&gt;since&lt;span class="w"&gt; &lt;/span&gt;distro&lt;span class="w"&gt; &lt;/span&gt;installed
&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;days&lt;span class="w"&gt; &lt;/span&gt;since&lt;span class="w"&gt; &lt;/span&gt;distro&lt;span class="w"&gt; &lt;/span&gt;installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Things aren't as crazy as they were back when I first got into Linux, the
landscape seems to have matured a bit (or maybe I have). But that doesn't mean
there isn't plenty of new shiny things to try all the time. There's exciting new
developments all the time. System76 are developing their new Cosmic Desktop for
POP OS, KDE Plamsa 6.0 is on the horizon (I'll be sure to try out each when
they're released). Even the latest XFCE desktop release is packed full of
features!&lt;/p&gt;
&lt;p&gt;Fueling my addiciton is the fact it's never been easier to hop between different
distributions. With the advent of packaging formats like snap and flatpak I can
pick practically any distribution and have the exact same set of applications
I'm used to. These days, it really doesn't feel (from the end user standpoint)
that there are really that many things the separate each distribution. This is
obviously a good thing for end users, but I worry projects will lose their
unique indentities as technology continues to converge.&lt;/p&gt;
&lt;p&gt;It's not like I don't have other hobbies or interests besides messing around
with Linux, I have plenty. But I doubt I'll ever overcome my addiction, it's
simply too much fun. So in the meantime and I look forward to trying a bunch of
new distros and environments in the future. I hope you'll join me 👨‍💻🐧&lt;/p&gt;</content><category term="misc"></category><category term="Linux"></category></entry><entry><title>2023 Resolutions</title><link href="https://jackevansevo.github.io/2023-resolutions.html" rel="alternate"></link><published>2022-12-29T00:00:00+00:00</published><updated>2022-12-29T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-12-29:/2023-resolutions.html</id><summary type="html">&lt;p&gt;Here's five resolutions I'm setting myself for 2023. At the end of this year I
plan to revisit this list and see whether my resolutions were upheld.&lt;/p&gt;
&lt;p&gt;To maximise my chances of success I've tried to make each goal as actionable as
possible, as having something concrete to aim for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's five resolutions I'm setting myself for 2023. At the end of this year I
plan to revisit this list and see whether my resolutions were upheld.&lt;/p&gt;
&lt;p&gt;To maximise my chances of success I've tried to make each goal as actionable as
possible, as having something concrete to aim for should make them easier to
complete.&lt;/p&gt;
&lt;h2&gt;1. Read more books than 2022 📚&lt;/h2&gt;
&lt;p&gt;Last year was a pretty successful year in terms of reading for me, but in 2023 I
intend to read more. Measuring total books is a soft metric as not all books are
made equally, but this seems easily achievable regardless of what books I
choose.&lt;/p&gt;
&lt;p&gt;Specifically, I'd like to replace my habit of aimlessly browsing social media on
my phone with focused reading instead. As all the time I've wasted this year
scrolling Twitter / Reddit / Instagram could probably have been better spent
productively.&lt;/p&gt;
&lt;h2&gt;2. Run a(nother) half marathon 🏃&lt;/h2&gt;
&lt;p&gt;Back in March I ran my first ever half marathon (see photo). I trained pretty
hard to get to this point and it remains the furthest I've ran in my life.
Getting to this level of fitness was pretty difficult, but incredibly
satisfying, having positive effects on both my mental and physical health.&lt;/p&gt;
&lt;p&gt;Recently I've slumped a bit (blame the winter weather) and haven't been running
as frequently. Consequently, next year I'm not focused on beating my previous
time or increasing the distance (although that would be a bonus). The purpose of
this goal is mainly to get me back into the habit of regular running and a
return to my previous fitness level.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://jackevansevo.github.io/images/strava7360810133316658810.jpg" alt="Strava screenshot" width="500"/&gt;&lt;/p&gt;
&lt;h2&gt;3. Improve my Portuguese 🇧🇷&lt;/h2&gt;
&lt;p&gt;In 2022 I spent three months living in Brazil, giving me the opportunity to
fully immerse myself in the language. During which I think my Portuguese really
improved.&lt;/p&gt;
&lt;p&gt;By the time I left I was able to understand most basic conversation and
following events on the news. However I still quickly struggle with regular
conversations as soon as it moves past the basics.&lt;/p&gt;
&lt;p&gt;So next year I'd like to get better by putting myself into situations where I'm
forced to practice. Especially trying my best not to immediately revert to
English at the first signs of struggles when communicating with bilingual
foreign speakers.&lt;/p&gt;
&lt;h2&gt;4. Write (at least) one blog post a month 📝&lt;/h2&gt;
&lt;p&gt;This feels like a recurring theme each year. Each year I strive to write more,
but always seem to lack the confidence or motivation. Consequently I've
neglected dedicating much time to writing/blogging in the past.&lt;/p&gt;
&lt;p&gt;Next year I'd like to buck this trend and post more frequently. I already have a
backlog of ideas/topics to write about, I just need to commit to writing them
up.&lt;/p&gt;
&lt;p&gt;Where appropriate I'll try and cross these articles to link aggregator sites
like Reddit/Lobsters/Hacker News in the hopes that a few people find the content
useful/engaging. But virality, popularity or developing any sort of following is
not my goal.&lt;/p&gt;
&lt;h2&gt;5. Record (at least) one full cover song 🎸&lt;/h2&gt;
&lt;p&gt;I've been playing guitar for a few years (~4) now, and during the pandemic I
started to semi regularly post small clips of myself playing guitar on
Instagram.&lt;/p&gt;
&lt;p&gt;Despite this, I've never had the perseverance to learn, practice and
subsequently record a full cover. In 2023 I'd like to change this.&lt;/p&gt;
&lt;p&gt;I'm confident enough to play through quite a few songs completely, I just need
to work up the confidence to bust out a camera and film it.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>📚 2022 Reading List</title><link href="https://jackevansevo.github.io/2022-reading-list.html" rel="alternate"></link><published>2022-12-14T00:00:00+00:00</published><updated>2022-12-14T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-12-14:/2022-reading-list.html</id><summary type="html">&lt;p&gt;One of my goals this year was to read more and to make a regular habit of
reading before bedtime. Particularly because I find reading before bed
significantly improves my quality of sleep.&lt;/p&gt;
&lt;p&gt;I'm pleased as I managed to read a total of 15 books this year (an increase
from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my goals this year was to read more and to make a regular habit of
reading before bedtime. Particularly because I find reading before bed
significantly improves my quality of sleep.&lt;/p&gt;
&lt;p&gt;I'm pleased as I managed to read a total of 15 books this year (an increase
from just 9 last year).&lt;/p&gt;
&lt;p&gt;It's still not as many as I'd hoped to read, but there's always next year...&lt;/p&gt;
&lt;p&gt;I have a suspicion I actually read more than this, but I just failed to track
certain books via good-reads. Next year I'll try to be more vigilant about
tracking which books I'm currently reading/read.&lt;/p&gt;
&lt;p&gt;You can find a full breakdown
&lt;a href="https://www.goodreads.com/user/year_in_books/2022/41733297"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From this list the ones I most enjoyed are:
- Project Hail Mary (by the author of the Martian)
- Chaos Monkeys
- Disrupted&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reading List 20222" src="https://jackevansevo.github.io/images/www.goodreads.com_user_year_in_books_2022.png"&gt;&lt;/p&gt;
&lt;p&gt;There's already some books on my radar for next year. I'd like 2023 to be the
year I finally conquer the Lord of the Ring trilogy. As a massive fan of the
films I think I owe it to myself to actually read the source material.&lt;/p&gt;</content><category term="misc"></category><category term="Books"></category></entry><entry><title>Per Project Neovim Config</title><link href="https://jackevansevo.github.io/per-project-neovim-config.html" rel="alternate"></link><published>2022-11-16T00:00:00+00:00</published><updated>2022-11-16T00:00:00+00:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-11-16:/per-project-neovim-config.html</id><summary type="html">&lt;p&gt;I recently added the following snippet to my &lt;code&gt;init.lua&lt;/code&gt; neovim config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filereadable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;project_config.lua&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;project_config&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once I've got this file in place I can add per project keybindings. E.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;leader&amp;gt;tt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:vsplit | term cd %:p:h:h …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I recently added the following snippet to my &lt;code&gt;init.lua&lt;/code&gt; neovim config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filereadable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;project_config.lua&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;project_config&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once I've got this file in place I can add per project keybindings. E.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;leader&amp;gt;tt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:vsplit | term cd %:p:h:h; poetry run pytest --pdb -s -x --ff&amp;lt;CR&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;noremap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;leader&amp;gt;tf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:vsplit | term cd %:p:h:h; poetry run pytest --pdb -s -x --ff %:p&amp;lt;CR&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;noremap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I like to bind &lt;code&gt;&amp;lt;leader&amp;gt;tt&lt;/code&gt; and &lt;code&gt;&amp;lt;leader&amp;gt;tf&lt;/code&gt; to quickly run tests. Placing this
configuration per project is useful here as the specifics of how tests are ran
can vary between projects.&lt;/p&gt;
&lt;h2&gt;Security Risks&lt;/h2&gt;
&lt;p&gt;I'm aware this is a potential security risk as I'm loading arbitrary code from
disk. In an ideal world I'd probably want to prompt first for approval, or have
a whitelist of safe directories (similar to direnv).&lt;/p&gt;</content><category term="misc"></category><category term="Neovim"></category></entry><entry><title>Deploy Miniflux on Flyio</title><link href="https://jackevansevo.github.io/deploy-miniflux-on-flyio.html" rel="alternate"></link><published>2022-10-22T00:00:00+01:00</published><updated>2022-10-22T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-10-22:/deploy-miniflux-on-flyio.html</id><summary type="html">&lt;p&gt;In its own words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Miniflux is a minimalist and opinionated feed reader.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="miniflux screenshot" src="https://miniflux.app/images/overview.png"&gt;&lt;/p&gt;
&lt;p&gt;Here’s a quick rundown on how to self-host your own &lt;a href="https://miniflux.app/"&gt;Miniflux&lt;/a&gt; instance on &lt;a href="fly.io"&gt;fly.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This tutorial assumes you already have a fly.io account and have &lt;code&gt;flyctl&lt;/code&gt; installed.&lt;/p&gt;
&lt;p&gt;If not: head over to the &lt;a href="https://fly.io/docs/hands-on/install-flyctl/"&gt;getting …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In its own words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Miniflux is a minimalist and opinionated feed reader.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="miniflux screenshot" src="https://miniflux.app/images/overview.png"&gt;&lt;/p&gt;
&lt;p&gt;Here’s a quick rundown on how to self-host your own &lt;a href="https://miniflux.app/"&gt;Miniflux&lt;/a&gt; instance on &lt;a href="fly.io"&gt;fly.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This tutorial assumes you already have a fly.io account and have &lt;code&gt;flyctl&lt;/code&gt; installed.&lt;/p&gt;
&lt;p&gt;If not: head over to the &lt;a href="https://fly.io/docs/hands-on/install-flyctl/"&gt;getting started documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create a new app&lt;/h2&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fly launch --no-deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Create a Postgres database&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;flyctl postgres create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should give you a connection string URI of the format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="l"&gt;postgres://&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;username&lt;span class="p"&gt;}:{&lt;/span&gt;password&lt;span class="p"&gt;}@{&lt;/span&gt;hostname&lt;span class="p"&gt;}:{&lt;/span&gt;port&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;database&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E.g. mine looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nl"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;e85b9898dcb63b1111e4980e8dbc3bbb90c8c79870ee6eca&lt;/span&gt;&lt;span class="nv"&gt;@jacks&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;awesome&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5432&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Set some Secrets&lt;/h2&gt;
&lt;p&gt;Following the recommendation from the &lt;a href="https://miniflux.app/docs/installation.html#docker"&gt;miniflux docker installation documentation&lt;/a&gt;. Take your DB URI and then append &lt;code&gt;?sslmode=disable&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;postgres://postgres:*password*@jack-miniflux-db.internal:5432?sslmode=disable&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E.g. using the connection string from my example above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;postgres://postgres:e85b9898dcb63b1111e4980e8dbc3bbb90c8c79870ee6eca@jacks-awesome-example-db.internal:5432?sslmode=disable&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then set a default username and password (these can always be changed later)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fly secrets set ADMIN_USERNAME=&amp;quot;*email*&amp;quot;
fly secrets set ADMIN_PASSWORD=&amp;quot;*password*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Edit the fly.toml file&lt;/h2&gt;
&lt;p&gt;Edit the &lt;code&gt;fly.toml&lt;/code&gt; file to include the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[build]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;miniflux/miniflux:latest&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[env]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;RUN_MIGRATIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;CREATE_ADMIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The rest of the auto-generated contents can remain the same.&lt;/p&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fly deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should then be able to access the deployed instance by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fly open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="RSS"></category><category term="Flyio"></category></entry><entry><title>Observations of a Gringo in Brazil 🇬🇧 ✈️ 🇧🇷</title><link href="https://jackevansevo.github.io/observations-of-a-gringo-in-brazil.html" rel="alternate"></link><published>2022-10-15T00:00:00+01:00</published><updated>2022-10-15T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-10-15:/observations-of-a-gringo-in-brazil.html</id><summary type="html">&lt;p&gt;Recently I made the ambitious decision to move from the UK to Brazil to live
with my girlfriend. I just passed the one month milestone so wanted publish
something to mark the occasion. &lt;/p&gt;
&lt;p&gt;It's my first time living abroad in a foreign country so thought it would be
fun to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I made the ambitious decision to move from the UK to Brazil to live
with my girlfriend. I just passed the one month milestone so wanted publish
something to mark the occasion. &lt;/p&gt;
&lt;p&gt;It's my first time living abroad in a foreign country so thought it would be
fun to keep a record of any cultural differences or curiosities I observe along
the way.&lt;/p&gt;
&lt;p&gt;These are written from the perspective of someone from the United Kingdom. So
depending on where you're from these may or may not be surprising.&lt;/p&gt;
&lt;p&gt;In no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's normal to wear flip flops in the shower&lt;/li&gt;
&lt;li&gt;You have electrical sockets/outlets in the Bathroom (not common in the UK)&lt;/li&gt;
&lt;li&gt;You don't flush toilet paper down the toilet&lt;/li&gt;
&lt;li&gt;There's no hot water when washing dishes in the kitchen&lt;/li&gt;
&lt;li&gt;Knife and fork used in opposite hands&lt;/li&gt;
&lt;li&gt;I tie my shoes differently&lt;/li&gt;
&lt;li&gt;You don't fill up your own gas/petrol here&lt;/li&gt;
&lt;li&gt;Recycling isn't very common&lt;/li&gt;
&lt;li&gt;Every Bus has separate driver and ticket operator (in the UK the same person performs both roles)&lt;/li&gt;
&lt;li&gt;WhatsApp completely dominates the market&lt;/li&gt;
&lt;li&gt;Having a CPF (kinda like a social security number) is important for lots of
  things (although not 100% necessary)&lt;/li&gt;
&lt;li&gt;Digital payments are very common here (Pix is hugely popular)&lt;/li&gt;
&lt;li&gt;You can pay in installments for everything&lt;/li&gt;
&lt;li&gt;Voting is done electronically&lt;/li&gt;
&lt;li&gt;Lunch is a serious/main meal (in the UK it's common to just eat a sandwich)&lt;/li&gt;
&lt;li&gt;People (mostly in the North) eat couscous for breakfast (kinda like cereal)&lt;/li&gt;
&lt;li&gt;I ordered 'Limonada' expecting Lemonade (like Sprite) but received Lemon juice&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>The struggles of building a Feed Reader</title><link href="https://jackevansevo.github.io/the-struggles-of-building-a-feed-reader.html" rel="alternate"></link><published>2022-10-05T00:00:00+01:00</published><updated>2022-10-05T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-10-05:/the-struggles-of-building-a-feed-reader.html</id><summary type="html">&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/en/thumb/4/43/Feed-icon.svg/1200px-Feed-icon.svg.png" style="width:18%;"&gt;&lt;/p&gt;
&lt;p&gt;I recently I fell down the rabbit hole of building a
&lt;a href="https://github.com/Jackevansevo/feedreader"&gt;feedreader&lt;/a&gt;. At the time I was
unsatisfied with the free tier offering of tools like inoreader and feedly, so
naturally I figured I'd try and build my own, after all, how hard could it be?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; This was well …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/en/thumb/4/43/Feed-icon.svg/1200px-Feed-icon.svg.png" style="width:18%;"&gt;&lt;/p&gt;
&lt;p&gt;I recently I fell down the rabbit hole of building a
&lt;a href="https://github.com/Jackevansevo/feedreader"&gt;feedreader&lt;/a&gt;. At the time I was
unsatisfied with the free tier offering of tools like inoreader and feedly, so
naturally I figured I'd try and build my own, after all, how hard could it be?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; This was well before discovering &lt;a href="https://miniflux.app/"&gt;miniflux&lt;/a&gt;,
which is a fantastic piece of software. I've since decommissioned &lt;a href="https://github.com/Jackevansevo/feedreader"&gt;my own
attempt&lt;/a&gt; and now happily self host
my own miniflux instance instead.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here's a non exhaustive list of issues I've encountered along the way.&lt;/p&gt;
&lt;h2&gt;1. Atom vs RSS&lt;/h2&gt;
&lt;p&gt;I'll start with perhaps the most obvious...&lt;/p&gt;
&lt;p&gt;There's multiple different competing standards to subscribe to represent web
feeds. Each with it's own specification, quirks and features.&lt;/p&gt;
&lt;p&gt;Thankfully there's a sufficient amount of overlap between specifications that
it's possible to store data in a consistent normalised format. However doing so
isn't always straightforward.&lt;/p&gt;
&lt;p&gt;One of the first challenges I faced when ingesting data from different formats
was designing a consistent normalised representation. I wanted a single &lt;code&gt;feed&lt;/code&gt;
table to handle data from both atom/rss feeds.&lt;/p&gt;
&lt;p&gt;Here's a comparison table I grabbed from the Wikipedia page for &lt;a href="https://en.wikipedia.org/wiki/RSS#RSS_compared_with_Atom"&gt;RSS compared
with Atom&lt;/a&gt; which
lists all the equivalent elements.&lt;/p&gt;
&lt;table class="table table-striped table-hover table-sm"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;RSS 2.0&lt;/th&gt;
&lt;th&gt;Atom 1.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;author&lt;/td&gt;
&lt;td&gt;author*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;category&lt;/td&gt;
&lt;td&gt;category&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;channel&lt;/td&gt;
&lt;td&gt;feed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;copyright&lt;/td&gt;
&lt;td&gt;rights&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;subtitle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;description*&lt;/td&gt;
&lt;td&gt;summary and/or content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;generator&lt;/td&gt;
&lt;td&gt;generator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;guid&lt;/td&gt;
&lt;td&gt;id*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&lt;/td&gt;
&lt;td&gt;logo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;item&lt;/td&gt;
&lt;td&gt;entry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastBuildDate (in channel)&lt;/td&gt;
&lt;td&gt;updated*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;link*&lt;/td&gt;
&lt;td&gt;link*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;managingEditor&lt;/td&gt;
&lt;td&gt;author or contributor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pubDate&lt;/td&gt;
&lt;td&gt;published (subelement of entry)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title*&lt;/td&gt;
&lt;td&gt;title*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ttl&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;An RSS feed has a &lt;code&gt;description&lt;/code&gt; whereas an Atom feed has a &lt;code&gt;subtitle&lt;/code&gt;. If
you wanted to store this information as a generic 'feed' representation what
would you name this column?&lt;/p&gt;
&lt;p&gt;In this instance the choice of name for the internal representation doesn't
particularly matter as both fields are equivalent.&lt;/p&gt;
&lt;p&gt;But what about fields that are available in one specification that aren't
available in another? Where would you store this data?&lt;/p&gt;
&lt;p&gt;If you're lucky, your language of choice might have some decent open source
libraries to parse these feeds and return a abstract/normalised 'feed' for you.
If not: writing a parser for these from scratch can be a bit tedious.&lt;/p&gt;
&lt;p&gt;I started off using a great library called
&lt;a href="https://pypi.org/project/feedparser/"&gt;feedparser&lt;/a&gt;, which I found to be super
simple and robust (shoutout to the maintainers 👏). This which was excellent
for building a prototype, but further along in development I decided to
experiment with writing my own from scratch.&lt;/p&gt;
&lt;p&gt;I was quickly able to parse a bulk of feeds that I subscribe to, but ran into a
few edge cases which required defensive code. The parser itself is still very
brittle. This gave me a real appreciation for libraries like feedparser and all
the corner cases they're able to handle.&lt;/p&gt;
&lt;h2&gt;2. Finding Feed Links (Inconsistent conventions)&lt;/h2&gt;
&lt;p&gt;Lets say I come across a site &lt;code&gt;example.com&lt;/code&gt; which I'd like to subscribe to via
RSS/Atom. How do I find the feed URL?&lt;/p&gt;
&lt;p&gt;Typically I'll try and look for an RSS link/icon on the page itself and copy
this value and paste into my feed reader of choice. Or I'll inspect the page
source and hunt down the link by CTRL+F searching for different patterns.&lt;/p&gt;
&lt;p&gt;&lt;img alt="RSS Inspecting Page Source" src="https://jackevansevo.github.io/images/rss-inspect-element.png" title="Viewing the page source to find RSS links"&gt;&lt;/p&gt;
&lt;p&gt;So far I've come across the following common patterns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;example.com/rss.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.com/index.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.com/feed.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.com/atom.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.com/feed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;example.com/rss&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The problem with automating this approach&lt;/h3&gt;
&lt;p&gt;In an ideal world I'd like users to be able to just subscribe to &lt;code&gt;example.com&lt;/code&gt;
without having to manually find this link. How would you go about doing this?&lt;/p&gt;
&lt;p&gt;There's a few steps I can think of&lt;/p&gt;
&lt;h4&gt;Strategy 1.&lt;/h4&gt;
&lt;p&gt;You could scrape &lt;code&gt;example.com&lt;/code&gt; and search for something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;application/rss+xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Example&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/rss.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not all sites include a link to the RSS feed in the site &lt;code&gt;meta&lt;/code&gt; (Occasionally
you have to parse the HTML body).&lt;/p&gt;
&lt;h4&gt;Strategy 2.&lt;/h4&gt;
&lt;p&gt;If this fails you could naively fall back to scraping common patterns, i.e:
&lt;code&gt;/rss.xml | /index.xml&lt;/code&gt;  to see if any of these pages exist and then parse the
first result.&lt;/p&gt;
&lt;h4&gt;Strategy 3.&lt;/h4&gt;
&lt;p&gt;Or you could not bother at all and leave it up to the end user to be explicit
about what feed they wish to subscribe to.&lt;/p&gt;
&lt;h2&gt;3. Finding Entry Links&lt;/h2&gt;
&lt;p&gt;Some Atom feed links might contain &lt;code&gt;&amp;lt;link rel="alternate" type="text/html"&amp;gt;&lt;/code&gt;
indicating this is very likely the link to the underlying item/entry (not some
other external link).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;2021-03-28&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.suckless.org/#2021-03-28&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;https://www.suckless.org/#2021-03-28T00:00Z&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2021-03-28T00:00Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;published&amp;gt;&lt;/span&gt;2021-03-28T00:00Z&lt;span class="nt"&gt;&amp;lt;/published&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;On&lt;span class="w"&gt; &lt;/span&gt;Wednesday,&lt;span class="w"&gt; &lt;/span&gt;2021-03-31&lt;span class="w"&gt; &lt;/span&gt;there&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;scheduled&lt;span class="w"&gt; &lt;/span&gt;maintenance&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;suckless&lt;span class="w"&gt; &lt;/span&gt;servers.&lt;span class="w"&gt; &lt;/span&gt;It&amp;#39;s&lt;span class="w"&gt; &lt;/span&gt;estimated&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;take&lt;span class="w"&gt; &lt;/span&gt;about&lt;span class="w"&gt; &lt;/span&gt;2-3&lt;span class="w"&gt; &lt;/span&gt;hours&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;about&lt;span class="w"&gt; &lt;/span&gt;19:00&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;21:00&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;22:00&lt;span class="w"&gt; &lt;/span&gt;UTC+02:00.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;mailinglist,&lt;span class="w"&gt; &lt;/span&gt;website&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;source-code&lt;span class="w"&gt; &lt;/span&gt;repositories&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;have&lt;span class="w"&gt; &lt;/span&gt;some&lt;span class="w"&gt; &lt;/span&gt;downtime.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Update:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;maintenance&lt;span class="w"&gt; &lt;/span&gt;was&lt;span class="w"&gt; &lt;/span&gt;finished&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;2021-03-31&lt;span class="w"&gt; &lt;/span&gt;19:10&lt;span class="w"&gt; &lt;/span&gt;UTC+02:00.&lt;span class="w"&gt; &lt;/span&gt;Please&lt;span class="w"&gt; &lt;/span&gt;let&lt;span class="w"&gt; &lt;/span&gt;us&lt;span class="w"&gt; &lt;/span&gt;know&lt;span class="w"&gt; &lt;/span&gt;if&lt;span class="w"&gt; &lt;/span&gt;there&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;issues.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some Atom feeds just contain a &lt;code&gt;&amp;lt;link href=""&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Finding&lt;span class="w"&gt; &lt;/span&gt;performance&lt;span class="w"&gt; &lt;/span&gt;problems:&lt;span class="w"&gt; &lt;/span&gt;profiling&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;logging?
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://pythonspeed.com/articles/logging-vs-profiling/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2022-08-09T00:00:00+00:00&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;https://pythonspeed.com/articles/logging-vs-profiling
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some feed might contain a combination of both!&lt;/p&gt;
&lt;p&gt;All this can make it tricky when finding the 'right' link for a particular
entry/item.&lt;/p&gt;
&lt;p&gt;For example here's some (pretty naive) parsing logic I have in my Atom parser to
find the 'best' link for each entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;et&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nsmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Return the best matching link&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;self&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hub&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4. Published vs Updated&lt;/h2&gt;
&lt;p&gt;An entry might have &lt;code&gt;updated&lt;/code&gt; but not published. If you weren't lucky enough to
scrape/fetch the feed when the entry contained &lt;code&gt;published&lt;/code&gt; you'll never know.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Blah&lt;span class="w"&gt; &lt;/span&gt;Blah&lt;span class="w"&gt; &lt;/span&gt;Blah
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://example.com/articles/example/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2022-08-09T00:00:00+00:00&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;xml:base=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://example.com/articles/example/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Blah&lt;span class="w"&gt; &lt;/span&gt;Blah&lt;span class="w"&gt; &lt;/span&gt;Blah
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In my feedreader backend I had to include the following default behaviour:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Just for sorting&lt;/span&gt;
    &lt;span class="n"&gt;published&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5. Description vs Content&lt;/h2&gt;
&lt;p&gt;The description field is intended to be a little snippet/preview of the article/entry itself.&lt;/p&gt;
&lt;p&gt;Then the bulk of the article should end up in &lt;code&gt;content&lt;/code&gt; itself.&lt;/p&gt;
&lt;p&gt;Of course in practice that's not how it works.&lt;/p&gt;
&lt;p&gt;Some feeds store the entire article body in &lt;code&gt;description&lt;/code&gt; and don't have an empty &lt;code&gt;content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Some feeds completely duplicate the article content across both &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I attempt to handle these scenarios with something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt;
    &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some feeds have an empty &lt;code&gt;description&lt;/code&gt; and only serve &lt;code&gt;content&lt;/code&gt;. To resolve
this this I opt to show a preview of the article content in place of the
missing description.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;entry.summary&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;entry.summary&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncatewords&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;entry.content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;entry.content&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncatewords&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sometimes the entry can just be completely devoid of any information, I've encountered feeds like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;id/&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;0001-01-01T00:00:00Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;content/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some feeds only serve up the &lt;code&gt;description&lt;/code&gt; and have a blank &lt;code&gt;content&lt;/code&gt;, forcing
users to link through to read the article on the original site (semi defeating
the point of subscribing via  feedreader)&lt;/p&gt;
&lt;p&gt;If you're writing any parser that attempts to ingest feed data you'll need
robust and resilient parsing logic to handle all these different edge cases or
recover from failures when you hit an unknown problem.&lt;/p&gt;
&lt;h2&gt;6. Datetime fields not timezone aware&lt;/h2&gt;
&lt;p&gt;Many feeds include timestamps that don't include any timezone information. It's
still unclear to me how to best handle this case.&lt;/p&gt;
&lt;p&gt;In practice this might lead to bogus &lt;code&gt;published&lt;/code&gt; or &lt;code&gt;updated&lt;/code&gt; values because
the author is in a different timezone to you.&lt;/p&gt;
&lt;p&gt;I.e. what happens if the Author is in a future timezone and they publish a post 5 hours ahead?&lt;/p&gt;
&lt;p&gt;I opted not showing posts with published dates in the future, but this feels
like a compromise.&lt;/p&gt;
&lt;h2&gt;7. DB Size Constraints&lt;/h2&gt;
&lt;p&gt;Because the RSS and Atom feeds are pretty loose specs, they don't (to my
knowledge) impose any size constraints on field contents.&lt;/p&gt;
&lt;p&gt;This can be an issue if you're hosting a service on the world wide web that let
users enter data. This arbitrarity means you're going to have to make some of
these decisions yourself (for me some of these decisions were wrong).&lt;/p&gt;
&lt;p&gt;If you're planning on scraping feeds/entries and saving the contents to your
database there're some key things to consider:
- What's the max length a feed/entry title/subtitle?
- How much content are you willing to store?
- What happens when you encounter a field bigger than the max size?&lt;/p&gt;
&lt;p&gt;Early on I added constraints to my DB layer thinking I had sensible limits that
would never be exceeded. But frequently ran into exceptions for perfectly valid
feeds forcing me to re-evaluate and bump max limit&lt;/p&gt;
&lt;p&gt;At some point however there might be a cut-off after which you want to reject
content beyond a certain size threshold.&lt;/p&gt;
&lt;h2&gt;8. Attempting to slugify resources&lt;/h2&gt;
&lt;p&gt;I wanted nice links internal to my site, i.e. if you subscribed to:&lt;/p&gt;
&lt;p&gt;https://overreacted.io/rss.xml&lt;/p&gt;
&lt;p&gt;Which has a Feed title of &lt;code&gt;Dan Abramov's Overreacted Blog RSS Feed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I wanted the URL for this feed to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/feed/dan-abramovs-overreacted-blog-rss-feed/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This turned out to be a bit of a mistake because not every feed title is
guaranteed to be something you can slugify.&lt;/p&gt;
&lt;p&gt;As an example I came across http://benyu.org/feed&lt;/p&gt;
&lt;p&gt;Which has the title: &lt;code&gt;&amp;lt;title&amp;gt;-… — —&amp;lt;/title&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Good lucky trying to slugify that 🤦&lt;/p&gt;
&lt;h3&gt;Better Solution&lt;/h3&gt;
&lt;p&gt;Feedly, inoreader and miniflux wisely completely sidestep this problem by instead just URL encoding the feed URL, i.e.&lt;/p&gt;
&lt;p&gt;https://feedly.com/i/subscription/feed%2Fhttps%3A%2F%2Foverreacted.io%2Frss.xml&lt;/p&gt;
&lt;p&gt;https://www.inoreader.com/feed/https%3A%2F%2Foverreacted.io%2Frss.xml&lt;/p&gt;
&lt;p&gt;In hindsight I should have done the same.&lt;/p&gt;
&lt;h2&gt;9. Relative vs Absolute Links&lt;/h2&gt;
&lt;p&gt;Most feeds are pretty good about this, but every so often I run into:&lt;/p&gt;
&lt;p&gt;Links to items/entries being relative:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;On&lt;span class="w"&gt; &lt;/span&gt;being&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;staff&lt;span class="w"&gt; &lt;/span&gt;engineer&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;/blog/2022/08/on-being-a-staff-engineer/&lt;span class="nt"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Top level links (which should be absolute links back to the site) being relative:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//navoshta.com/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other times the link to the parent site is sometimes malformed or refers to the same URL as the feed itself (not the parent site)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;https://snapcraft.io//blog/feed&lt;span class="nt"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All these are trivially solvable, but something to be aware of nonetheless.&lt;/p&gt;
&lt;h2&gt;10. Feeds not respecting ETag and Last-Modified Headers&lt;/h2&gt;
&lt;p&gt;Including an ETag or Last-Modified header in the body of a request when
fetching a feed is a mechanism to reduce bandwidth.&lt;/p&gt;
&lt;p&gt;There is some great documentation on this topic in a post titled &lt;a href="https://fishbowl.pastiche.org/2002/10/21/http_conditional_get_for_rss_hackers"&gt;"HTTP Conditional Get for RSS Hackers"&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which explains these headers are a way to express:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If this document has changed since I last looked at it, give me the new
version. If it hasn't just tell me it hasn't changed and give me nothing.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="https://feedparser.readthedocs.io/en/latest/"&gt;feedparser&lt;/a&gt; documentation
has a &lt;a href="https://feedparser.readthedocs.io/en/latest/http-etag.html#etag-and-last-modified-headers"&gt;good
example&lt;/a&gt;
demonstrating this concept. I'll let the following code snippet explain what's
going on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;feedparser&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://feedparser.org/docs/examples/atom10.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etag&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;quot;6c132-941-ad7e3080&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://feedparser.org/docs/examples/atom10.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;etag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;etag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="mi"&gt;304&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug_message&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;The feed has not changed since you last checked, so&lt;/span&gt;
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes it relatively cheap and straightforward to check+update feeds which
adhere to this convention. You simply fan out a bunch of requests and discard
any responses with a &lt;code&gt;304&lt;/code&gt; status.&lt;/p&gt;
&lt;p&gt;However not all feeds/servers have logic in place to correctly parse/handle
these optional headers. Some feeds will happily return identical content
repeatedly.&lt;/p&gt;
&lt;p&gt;If the feed is being polled periodically, but doesn't change on regular basis
this can be wasted computation + bandwidth. When you're polling many feeds in
bulk this can start to add up.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="RSS"></category></entry><entry><title>Django - Manage Multiple Processes with Procfiles</title><link href="https://jackevansevo.github.io/django-manage-multiple-processes-with-procfiles.html" rel="alternate"></link><published>2022-09-25T00:00:00+01:00</published><updated>2022-09-25T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-09-25:/django-manage-multiple-processes-with-procfiles.html</id><summary type="html">&lt;h2&gt;Backstory&lt;/h2&gt;
&lt;p&gt;I have a little feedreader Django application that I run on fly.io. This primarily consists* of:
- a Django app (a couple gunicorn workers) that serves the main app
- a celery worker (to asynchronously update the feeds)
- a celerybeat process (to periodically triggers the scraping task)&lt;/p&gt;
&lt;p&gt;Previously I was …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Backstory&lt;/h2&gt;
&lt;p&gt;I have a little feedreader Django application that I run on fly.io. This primarily consists* of:
- a Django app (a couple gunicorn workers) that serves the main app
- a celery worker (to asynchronously update the feeds)
- a celerybeat process (to periodically triggers the scraping task)&lt;/p&gt;
&lt;p&gt;Previously I was spinning up one new VM instance per process, this caused x2 issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I had a pretty complex docker-compose setup to emulate this locally.&lt;/li&gt;
&lt;li&gt;This resulted in some unnecessarily high billing for what is in reality a
   tiny service.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Mr Krabs money" src="https://static.fandomspot.com/images/11/10476/00-featured-mr-krabs-counting-money-screenshot.jpg"&gt;&lt;/p&gt;
&lt;p&gt;*Alongside this I also run:
- a sqlite volume
- a redis instance (my celery task broker)&lt;/p&gt;
&lt;p&gt;Recently I wanted to simplify things a little and scale back the number of VMs
I was running, by configuring Django + celery to coexist on a single instance.&lt;/p&gt;
&lt;h2&gt;(Re)-Discovering Procfiles&lt;/h2&gt;
&lt;p&gt;Reading the fly.io documentation for &lt;a href="https://fly.io/docs/app-guides/multiple-processes/"&gt;Running Multiple Processes Inside A
Fly.io App&lt;/a&gt; they
recommended using a &lt;a href="https://fly.io/docs/app-guides/multiple-processes/#use-a-procfile-manager"&gt;Procfile
Manager&lt;/a&gt;.
One of the Procfile managers they recommend is
&lt;a href="https://github.com/DarthSim/overmind"&gt;overmind&lt;/a&gt;, so I decided to give this a
go.&lt;/p&gt;
&lt;p&gt;I first remember using Procfiles back when I started my developer journey
deploying apps to Heroku 🪦&lt;/p&gt;
&lt;p&gt;Then for whatever reason, suddenly tooling like docker and minikube seemed to
take over the world and suddenly the dev experience started to get pretty
complicated.&lt;/p&gt;
&lt;h2&gt;Using Overmind&lt;/h2&gt;
&lt;p&gt;It was pretty refreshing to replace a bunch of separate containers and their
respective Dockerfile scripts with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gunicorn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feedreader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asgi&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;uvicorn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;workers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UvicornWorker&lt;/span&gt;
&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feedreader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;
&lt;span class="n"&gt;beat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feedreader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;beat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a bonus, overmind supports using &lt;code&gt;Procfile.dev&lt;/code&gt; during local development
This nicely replaces a lot of the docker-compose cruft I'd accumulated to run
my app locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;app: ./manage.py runserver
beat: celery -A feedreader beat -S django -l INFO
celery: watchfiles &amp;#39;celery -A feedreader worker -l INFO -E&amp;#39; --ignore-paths db.sqlite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Developing&lt;/h2&gt;
&lt;p&gt;During local development I start my entire project with &lt;code&gt;overmind s -D&lt;/code&gt;, which
will run overmind in the background (as a demonized process).&lt;/p&gt;
&lt;p&gt;This starts all the processes I need at the same time with a single command.&lt;/p&gt;
&lt;p&gt;When it comes to debugging or viewing the logs I'll connect to overmind with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;overmind c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will attach me to a tmux session for my project, with one pane per
process.&lt;/p&gt;
&lt;p&gt;Here's an example below:&lt;/p&gt;
&lt;video controls class="w-100"&gt;
  &lt;source src="https://user-images.githubusercontent.com/4996338/192102128-c04169e9-48a9-4c30-985f-1346501be753.mov" type="video/webm" /&gt;
&lt;/video&gt;

&lt;h2&gt;Advantages 📈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It's faster and more convenient than opening up x3 terminal tabs/splits/processes and starting each process manually by hand&lt;/li&gt;
&lt;li&gt;It integrates nicely with tmux, a technology I was already comfortable with, so supplements my existing workflow&lt;/li&gt;
&lt;li&gt;Is much simpler than using docker + docker-compose&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Disadvantages 📉&lt;/h2&gt;
&lt;p&gt;Unlike docker this setup isn't 100% portable to another machine / development
environment. Instead some initial setup is required.&lt;/p&gt;
&lt;p&gt;For example: Python dependencies have to be installed locally and redis has to
be configured on the host.&lt;/p&gt;
&lt;p&gt;It's not quite as seamless as running &lt;code&gt;docker-compose up&lt;/code&gt; and everything
magically working first time. But given it's just me contributing + working on
my little personal project, this feels like an acceptable trade-off&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>Django Celery Guide (Part 2)</title><link href="https://jackevansevo.github.io/django-celery-guide-part-2.html" rel="alternate"></link><published>2022-09-24T00:00:00+01:00</published><updated>2022-09-24T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-09-24:/django-celery-guide-part-2.html</id><summary type="html">&lt;p&gt;Using Django ORM as a Results Backend&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-celery-redis logo" src="https://jackevansevo.github.io/images/django-celery-redis-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="/posts/django-celery-guide-part-1"&gt;part 1&lt;/a&gt; we got a celery worker up and
running, using a redis instance as our celery broker and results backend.&lt;/p&gt;
&lt;p&gt;In this section we're going to explore using &lt;code&gt;django-celery-results&lt;/code&gt; as a
replacement results backend (instead of results being stored in Redis …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using Django ORM as a Results Backend&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-celery-redis logo" src="https://jackevansevo.github.io/images/django-celery-redis-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="/posts/django-celery-guide-part-1"&gt;part 1&lt;/a&gt; we got a celery worker up and
running, using a redis instance as our celery broker and results backend.&lt;/p&gt;
&lt;p&gt;In this section we're going to explore using &lt;code&gt;django-celery-results&lt;/code&gt; as a
replacement results backend (instead of results being stored in Redis).&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;django-celery-results&lt;/code&gt; installed our app is going to instead look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="django celery results diagram" src="https://jackevansevo.github.io/images/django-celery-results-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt; is still our celery &lt;strong&gt;task broker&lt;/strong&gt;, therefore remains responsible for
distributing tasks amongst celery workers and brokering communication with our
celery app.&lt;/p&gt;
&lt;p&gt;However, instead of using redis as our &lt;strong&gt;results backend&lt;/strong&gt; to save task
results, we'll be storing results in &lt;code&gt;SQLite&lt;/code&gt;, our chosen Django DB
implementation (the default).&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;django-celery-results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From here, it's a good idea to follow the &lt;a href="https://docs.celeryq.dev/en/latest/django/first-steps-with-django.html#django-celery-results-using-the-django-orm-cache-as-a-result-backend"&gt;installation
instructions&lt;/a&gt;
in the official documentation.&lt;/p&gt;
&lt;p&gt;For us this is essentially the following steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Add &lt;code&gt;django_celery_results&lt;/code&gt; to &lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;INSTALLED_APPS = [
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.admin&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.auth&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.contenttypes&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.sessions&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.messages&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.staticfiles&amp;quot;,
&lt;span class="gi"&gt;+     &amp;quot;django_celery_results&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;posts.apps.PostsConfig&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Run a migration to create necessary database tables&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;migrate&lt;span class="w"&gt; &lt;/span&gt;django_celery_results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update the &lt;code&gt;CELERY_RESULT_BACKEND&lt;/code&gt; variable in &lt;code&gt;blog/settings.py&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gd"&gt;-CELERY_RESULT_BACKEND = &amp;quot;redis://localhost/0&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+CELERY_RESULT_BACKEND = &amp;quot;django-db&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After installing, if you head to the admin console you should now be greeted with a new table "CELERY RESULTS"&lt;/p&gt;
&lt;p&gt;&lt;img alt="django admin celery-results" src="https://jackevansevo.github.io/images/django-admin-celery-results.png"&gt;&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Once again if we start our celery worker with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;worker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And trigger a task from the celery shell with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the following Python code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;aeb5a1d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;157&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fcd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8508&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a8bf70ba2b70&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the task has executed, From the Django admin page, navigate through to the
'Task results' table entry under 'CELERY RESULTS', you should now see celery
result has been saved in the Django DB:&lt;/p&gt;
&lt;p&gt;&lt;img alt="django admin celery-result" src="https://jackevansevo.github.io/images/django-admin-celery-result.png"&gt;&lt;/p&gt;
&lt;h2&gt;Including Task Metadata&lt;/h2&gt;
&lt;p&gt;In the screenshot you'll notice our task row/item is missing data in the &lt;strong&gt;TASK
NAME&lt;/strong&gt; and &lt;strong&gt;WORKER&lt;/strong&gt; columns.&lt;/p&gt;
&lt;p&gt;To make sure this metadata is included you need to set the
&lt;code&gt;CELERY_RESULT_EXTENDED&lt;/code&gt; value to &lt;code&gt;True&lt;/code&gt; in your application settings. Credit
goes to &lt;a href="https://github.com/celery/django-celery-results/issues/326#issuecomment-11815806"&gt;this comment&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CELERY_RESULT_EXTENDED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After applying this change and reloading celery this data should now be
included for any new tasks:&lt;/p&gt;
&lt;p&gt;&lt;img alt="django admin celery-result-v2" src="https://jackevansevo.github.io/images/django-admin-celery-result-v2.png"&gt;&lt;/p&gt;
&lt;p&gt;If a celery task triggers an exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# res.get() will raise: TypeError: can&amp;#39;t multiply sequence by non-int of type &amp;#39;str&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All this data is nicely neatly captured/surfaced inside the Django admin.&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-admin-celery-result-failure.png" src="https://jackevansevo.github.io/images/django-admin-celery-result-failure.png"&gt;&lt;/p&gt;
&lt;h2&gt;Querying Data&lt;/h2&gt;
&lt;p&gt;Having task data stored in the Django DB makes it straightforward to query data
and browse/explore/filter tasks using the ORM.&lt;/p&gt;
&lt;p&gt;Additionally, we also get the power of Django's powerful admin interface to
explore celery tasks &amp;amp; results. All this is possible by the underlying ORM
integration. No additional redis admin dashboard is required to explore this
data, it all lives in the same place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_celery_results.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskResult&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a24c7342&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0532&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4374&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a67d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="n"&gt;c0e12c082&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FAILURE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30864968&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;887&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4399&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;d88&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b79ae7492f61&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;aeb5a1d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;157&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fcd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8508&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a8bf70ba2b70&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Filter on the &lt;code&gt;status&lt;/code&gt; and show the &lt;code&gt;task_args&lt;/code&gt; and &lt;code&gt;traceback&lt;/code&gt; of the failed task&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FAILURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_args&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;quot;(&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;,)&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Traceback (most recent call last):&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;  File &amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/celery/app/trace.py&amp;quot;, line 451, in trace_task&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;    R = retval = fun(*args, **kwargs)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;  File &amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/celery/app/trace.py&amp;quot;, line 734, in __protected_call__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;    return self.run(*args, **kwargs)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;  File &amp;quot;/home/jackevans/code/blog/blog/celery.py&amp;quot;, line 28, in square&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;    return n * n&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;TypeError: can&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;t multiply sequence by non-int of type &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;str&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Next Time&lt;/h2&gt;
&lt;p&gt;This concludes part 2, in part 3 we'll explore triggering periodic celery tasks
and integrating this with django using the &lt;code&gt;django-celery-beat&lt;/code&gt; package.
and monitoring.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>The State of Django Autoreloading</title><link href="https://jackevansevo.github.io/the-state-of-django-autoreloading.html" rel="alternate"></link><published>2022-09-19T00:00:00+01:00</published><updated>2022-09-19T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-09-19:/the-state-of-django-autoreloading.html</id><summary type="html">&lt;p&gt;Encountering a bug in &lt;code&gt;pywatchman&lt;/code&gt; and exploring an alterate file reloading solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; On Python-3.10 watchman bindings are broken. My recommendation is to
use: &lt;a href="https://pypi.org/project/django-watchfiles/"&gt;django-watchfiles&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What the Docs Say&lt;/h2&gt;
&lt;p&gt;I recently went down a bit of a rabbit hole debugging auto reloading in Django.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.djangoproject.com/en/4.1/ref/django-admin/#runserver"&gt;official documentation&lt;/a&gt; for Django …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Encountering a bug in &lt;code&gt;pywatchman&lt;/code&gt; and exploring an alterate file reloading solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; On Python-3.10 watchman bindings are broken. My recommendation is to
use: &lt;a href="https://pypi.org/project/django-watchfiles/"&gt;django-watchfiles&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What the Docs Say&lt;/h2&gt;
&lt;p&gt;I recently went down a bit of a rabbit hole debugging auto reloading in Django.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://docs.djangoproject.com/en/4.1/ref/django-admin/#runserver"&gt;official documentation&lt;/a&gt; for Django &lt;code&gt;runserver&lt;/code&gt; states&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The development server automatically reloads Python code for each request, as
needed. You don’t need to restart the server for code changes to take effect...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’re using Linux or MacOS and install both pywatchman and the Watchman
service, kernel signals will be used to autoreload the server (rather than
polling file modification timestamps each second). This offers better
performance on large projects...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So by default &lt;code&gt;./manage.py runserver&lt;/code&gt; Should work out of the box, but it's not
particularly efficient for bigger projects.&lt;/p&gt;
&lt;p&gt;Optionally: installing the &lt;code&gt;watchman&lt;/code&gt; binary (a file watching service by Facebook) and the
&lt;code&gt;pywatchman&lt;/code&gt; (the python bindings) should result in a smoother experience.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;My Experience&lt;/h2&gt;
&lt;p&gt;In the past I've found the default reloader doesn't always restart the server
when I'd expect it to.&lt;/p&gt;
&lt;p&gt;Recently I started a new project (with &lt;code&gt;Python 3.10.6&lt;/code&gt;) so I figured I'd give
the watchman reloader a try.&lt;/p&gt;
&lt;p&gt;I installed the &lt;code&gt;watchman&lt;/code&gt; binary via my distribution package manager and
&lt;code&gt;pywatchman&lt;/code&gt; via pip&lt;/p&gt;
&lt;p&gt;To my confusion: the &lt;code&gt;StatReloader&lt;/code&gt; (the default/fallback) was still being used 🤔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;runserver
Watching&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;changes&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;StatReloader
Performing&lt;span class="w"&gt; &lt;/span&gt;system&lt;span class="w"&gt; &lt;/span&gt;checks...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Investigation&lt;/h2&gt;
&lt;p&gt;Let's have a look at why this is happening 🕵️&lt;/p&gt;
&lt;p&gt;Django's reloading implementation can be found in &lt;a href="https://github.com/django/django/blob/main/django/utils/autoreload.py#L640-L646"&gt;django/utils/autoreload.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_reloader&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return the most suitable reloader for this environment.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;WatchmanReloader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_availability&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;WatchmanUnavailable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;StatReloader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WatchmanReloader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks like by default Django will first check to see if watchman is
available, and call back to the default stat reloader if the compatibility
check fails.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Smoking Gun&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the check fails: &lt;code&gt;get_reloader&lt;/code&gt; will swallow the exception and silently
fall back to using the stat &lt;code&gt;StatReloader&lt;/code&gt;. From the end user perspective
(someone executing &lt;code&gt;./manage.py runserver&lt;/code&gt;) there's no indication why the
availability check failed.&lt;/p&gt;
&lt;h3&gt;Reproducing&lt;/h3&gt;
&lt;p&gt;So lets dig a little further:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;check_availability&lt;/code&gt; method on &lt;code&gt;WatchmanReloader&lt;/code&gt; implementation can be found &lt;a href="https://github.com/django/django/blob/cfe3008123ed7c9e3f3a4d51d4a22f9d96634e33/django/utils/autoreload.py#L622-L637"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The important lines are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;pywatchman&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;WatchmanUnavailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pywatchman not installed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pywatchman&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capabilityCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The service is down?&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;WatchmanUnavailable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cannot connect to the watchman service.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where the &lt;code&gt;pywatchman&lt;/code&gt; variable being checked against is just a module level
import wrapped with a &lt;code&gt;try/except&lt;/code&gt; block (to check if the &lt;code&gt;pywatchman&lt;/code&gt; python
package is available)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pywatchman&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pywatchman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I open a shell and execute this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pywatchman&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pywatchman&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capabilityCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I get the following exception 💥 (the same exception unfortunately gets swallowed by Django).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/pywatchman/__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1071&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;capabilityCheck&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/pywatchman/__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1048&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/pywatchman/__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;917&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_connect&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sockpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_resolvesockname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/pywatchman/__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;904&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_resolvesockname&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;SystemError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PY_SSIZE_T_CLEAN&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;formats&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks like the &lt;code&gt;capabilityCheck()&lt;/code&gt; call is failing due to an exception raised
inside &lt;code&gt;pywatchman&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mystery solved 🔮 this explains why &lt;code&gt;StatReloader&lt;/code&gt; (not &lt;code&gt;WatchmanReloader&lt;/code&gt;) is
being used, despite all the necessary pre-requisite dependencies being available.&lt;/p&gt;
&lt;h2&gt;An Alternative Solution&lt;/h2&gt;
&lt;p&gt;After a bit of Googling I ended up in &lt;a href="https://github.com/facebook/watchman/issues/970"&gt;this github issue
thread&lt;/a&gt;, which was originally
opened on 2 Nov 2021.&lt;/p&gt;
&lt;p&gt;It appears like there was a change in Python 3.10 that caused things to break
in pywatchman library. Consequently bindings will need updating to work for
newer Python releases.&lt;/p&gt;
&lt;p&gt;According to the thread: a &lt;a href="https://github.com/facebook/watchman/issues/970#issuecomment-1002054941"&gt;pre-release
fix&lt;/a&gt;
is available, it just hasn't been tagged/released on PyPI. There's a lot of
frustration in the thread with commenters requesting that the patch/fix be officially
merged/released.&lt;/p&gt;
&lt;p&gt;Luckily, in the mean time one of the
&lt;a href="https://github.com/facebook/watchman/issues/970#issuecomment-1191330203"&gt;suggestions&lt;/a&gt;
in the thread pointed me towards
&lt;a href="https://pypi.org/project/django-watchfiles/"&gt;django-watchfiles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django-watchfiles&lt;/code&gt; provides Django integration with &lt;code&gt;watchfiles&lt;/code&gt;, which itself is a set of Python bindings for the underlying &lt;code&gt;notify&lt;/code&gt; file-system notification library written in rust.&lt;/p&gt;
&lt;p&gt;Similar to the way &lt;code&gt;pywathman&lt;/code&gt; provides bindings to the &lt;code&gt;Watchman&lt;/code&gt;
file-watching service, both solutions implement performance sensitive
operations (low file watching events) in a lower level language, providing
higher level language wrappers for the Python ecosystem.&lt;/p&gt;
&lt;p&gt;I've found that &lt;code&gt;django-watchfiles&lt;/code&gt; works very nicely out of the box, so gets
my approval 👍&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully either the &lt;code&gt;pywatchman&lt;/code&gt; library will be updated in the future or the
Django documentation will include a disclaimer about broken behaviour in
Python-3.10+.&lt;/p&gt;
&lt;p&gt;Otherwise future developers are destined to retrace my footsteps (maybe you even found this blog post)&lt;/p&gt;
&lt;p&gt;In the meantime, I'll continue to use &lt;code&gt;django-watchfiles&lt;/code&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>Simple Django Celery Guide (Part 1)</title><link href="https://jackevansevo.github.io/simple-django-celery-guide-part-1.html" rel="alternate"></link><published>2022-09-17T00:00:00+01:00</published><updated>2022-09-17T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-09-17:/simple-django-celery-guide-part-1.html</id><summary type="html">&lt;p&gt;Getting started with Django Celery and Redis&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-celery-redis logo" src="https://jackevansevo.github.io/images/django-celery-redis-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;This is part 1 on how to get up and running with Django and celery. It's a fairly opinionated guide and represents what I consider to be the easiest approach.&lt;/p&gt;
&lt;p&gt;To keep things simple, to start with we'll be using &lt;strong&gt;redis&lt;/strong&gt; as our …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Getting started with Django Celery and Redis&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-celery-redis logo" src="https://jackevansevo.github.io/images/django-celery-redis-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;This is part 1 on how to get up and running with Django and celery. It's a fairly opinionated guide and represents what I consider to be the easiest approach.&lt;/p&gt;
&lt;p&gt;To keep things simple, to start with we'll be using &lt;strong&gt;redis&lt;/strong&gt; as our &lt;strong&gt;broker&lt;/strong&gt; AND our &lt;strong&gt;results backend&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;Initialize a new Django project (I'm calling it &lt;code&gt;blog&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;django-admin&lt;span class="w"&gt; &lt;/span&gt;startproject&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once inside the project folder initialize a new Pipenv environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install some necessary dependencies&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;django&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="o"&gt;[&lt;/span&gt;redis&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: I've included &lt;code&gt;redis&lt;/code&gt; as an optionally celery dependency, to start with we'll be using redis to broker communication between Django &amp;lt;-&amp;gt; celery workers and to store the results of any tasks&lt;/p&gt;
&lt;p&gt;Next we'll need to start an initial app (will be useful later):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;django-admin&lt;span class="w"&gt; &lt;/span&gt;startapp&lt;span class="w"&gt; &lt;/span&gt;posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then add the new app to the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in &lt;code&gt;blog/settings&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;INSTALLED_APPS = [
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.admin&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.auth&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.contenttypes&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.sessions&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.messages&amp;quot;,
&lt;span class="w"&gt; &lt;/span&gt;    &amp;quot;django.contrib.staticfiles&amp;quot;,
&lt;span class="gi"&gt;+    &amp;quot;posts.apps.PostsConfig&amp;quot;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then need to run some standard Django post initialization setup, which is typically the same for all projects:&lt;/p&gt;
&lt;p&gt;Run some initial migrations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a superuser account (in order to view the admin page)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Configuring Our Celery Application&lt;/h2&gt;
&lt;p&gt;Create a new file &lt;code&gt;blog/celery.py&lt;/code&gt; and add the following code:&lt;/p&gt;
&lt;p&gt;(this is stolen directly from the &lt;a href="https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html"&gt;django-celery docs&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="c1"&gt;# Set the default Django settings module for the &amp;#39;celery&amp;#39; program.&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blog.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Using a string here means the worker doesn&amp;#39;t have to serialize&lt;/span&gt;
&lt;span class="c1"&gt;# the configuration object to child processes.&lt;/span&gt;
&lt;span class="c1"&gt;# - namespace=&amp;#39;CELERY&amp;#39; means all celery-related configuration keys&lt;/span&gt;
&lt;span class="c1"&gt;#   should have a `CELERY_` prefix.&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;django.conf:settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CELERY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Load task modules from all registered Django apps.&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autodiscover_tasks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Request: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="si"&gt;!r}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Configure Celery Broker (redis)&lt;/h2&gt;
&lt;h3&gt;Dev&lt;/h3&gt;
&lt;p&gt;&lt;img alt="diagram displaying dev architecture layout" src="https://jackevansevo.github.io/images/django-celery-dev-diagram.png"&gt;.&lt;/p&gt;
&lt;p&gt;In our local development environment we'll have the following three things:
- one instance of Django running locally &lt;code&gt;./manage.py runserver&lt;/code&gt;,
- one instance of celery &lt;code&gt;celery worker -A blog worker&lt;/code&gt;
- one instance of redis (running somewhere i.e: in a docker container)&lt;/p&gt;
&lt;p&gt;Running all these things together can become cumbersome, thankfully there's a
number of solutions out there to manage this complexity (which I hope to address in future articles).&lt;/p&gt;
&lt;h3&gt;Prod&lt;/h3&gt;
&lt;p&gt;Unlike during development (where everything is running locally), in
production there's a good chance that celery worker(s) may not be running on
the same machine.&lt;/p&gt;
&lt;p&gt;Furthermore you might even want to run multiple instances of celery. In this case
celery will distribute tasks evenly amongst the worker pool.&lt;/p&gt;
&lt;p&gt;&lt;img alt="diagram displaying architecture layout" src="https://jackevansevo.github.io/images/django-celery-diagram.png"&gt;&lt;/p&gt;
&lt;h3&gt;Starting a Redis Instance&lt;/h3&gt;
&lt;p&gt;This next few steps of this tutorial assume you have an instance of Redis running &lt;em&gt;somewhere&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It doesn't particularly matter where/how you run your Redis instance, as long as you're able to connect to this instance from your machine.&lt;/p&gt;
&lt;p&gt;Which option you choose will largely depend on your own project constraints and personal preferences. But to help I've presented a few possible options below.&lt;/p&gt;
&lt;h4&gt;Running Locally&lt;/h4&gt;
&lt;p&gt;If you want to run redis on your own machine &lt;a href="https://redis.io/docs/getting-started/"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Running within docker&lt;/h4&gt;
&lt;p&gt;Alternatively if you have &lt;code&gt;docker&lt;/code&gt; installed, you can quickly spin up a containerised redis instance instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;6379&lt;/span&gt;:6379&lt;span class="w"&gt; &lt;/span&gt;redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If your project uses &lt;code&gt;docker-compose&lt;/code&gt; you can add a relevant entry in the docker compose file instead.&lt;/p&gt;
&lt;h4&gt;Using a managed instance&lt;/h4&gt;
&lt;p&gt;One option is to quickly spin up a free redis instance on &lt;a href="https://console.upstash.com/"&gt;console.upstash.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="upstash redis dashboard example" src="https://jackevansevo.github.io/images/upstash-redis.png"&gt;&lt;/p&gt;
&lt;p&gt;I.e. in the example above I quickly spun up a Redis instance, from here I'm able to copy the Redis URL&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cm"&gt;/******@usw2-able-adder-30254.upstash.io:30254&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Updating project settings&lt;/h3&gt;
&lt;p&gt;At this point we're ready to update our broker URL in &lt;code&gt;blog/settings.py&lt;/code&gt; to match our Redis URL.&lt;/p&gt;
&lt;p&gt;In my case because I'm running Redis locally on my machine, I'm going to use &lt;code&gt;redis://&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;redis://&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;worker&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;INFO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Celery is smart enough to fall-back to a default &lt;code&gt;hostname&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; when not specified in the &lt;code&gt;BROKER_URL&lt;/code&gt;, as it evident from the logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="nv"&gt;@fedora&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.2.7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dawn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;chorus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.19.8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;200.&lt;/span&gt;&lt;span class="n"&gt;fc36&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;glibc2&lt;/span&gt;&lt;span class="mf"&gt;.35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nl"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0x7f9aeee67a90&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nl"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nl"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queues&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;


&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug_task&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2022-09-17 15:10:35,249: WARNING/MainProcess&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;No&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;was&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;supplied&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Reverting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2022-09-17 15:10:35,249: INFO/MainProcess&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Connected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nl"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you forget to configure the &lt;code&gt;CELERY_BROKER_URL&lt;/code&gt; you'll likely be greeted by the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2022-09-17&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;224&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MainProcess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;was&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;supplied&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Reverting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;fedora&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.2.7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dawn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;chorus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt;&lt;span class="mf"&gt;-5.19.8-200.f&lt;/span&gt;&lt;span class="n"&gt;c36&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;glibc2&lt;/span&gt;&lt;span class="mf"&gt;.35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2022-09-17&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0x7fb8a1067a90&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//guest:**@localhost:5672//&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;concurrency&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;


&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug_task&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2022-09-17&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MainProcess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;amqp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//guest:**@127.0.0.1:5672//: [Errno 111] Connection refused.&lt;/span&gt;
&lt;span class="n"&gt;Trying&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;again&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is because the default broker URL: &lt;code&gt;amqp://guest:**@127.0.0.1:5672//:&lt;/code&gt;
isn't available. For this to work we'd have to configure a local instance of RabbitMQ.&lt;/p&gt;
&lt;h2&gt;Monitoring Celery Workers&lt;/h2&gt;
&lt;p&gt;Once you're started your celery worker(s), you can monitor their status with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;i.e:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;status
-&amp;gt;&lt;span class="w"&gt;  &lt;/span&gt;celery@fedora:&lt;span class="w"&gt; &lt;/span&gt;OK

&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;node&lt;span class="w"&gt; &lt;/span&gt;online.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or via the celery shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;celery@fedora&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;44068&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;uptime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pool&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;max-concurrency&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;processes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;44070&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44071&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44072&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44073&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44074&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44075&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44076&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44077&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max-tasks-per-child&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;N/A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;put-guarded-by-semaphore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;timeouts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;writes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;avg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;raw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;strategy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fair&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inqueues&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;active&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}}},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;broker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;userid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;virtual_host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ssl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;transport&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;connect_timeout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;transport_options&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;login_method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;uri_prefix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;heartbeat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;120.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;failover_strategy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;round-robin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alternates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;prefetch_count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rusage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9573699999999999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.196535&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;maxrss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;57784&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ixrss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;idrss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;isrss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minflt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;66085&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;majflt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nswap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;inblock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oublock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;msgsnd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;msgrcv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nsignals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nvcsw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nivcsw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Triggering Tasks&lt;/h2&gt;
&lt;p&gt;We can now start to trigger tasks via the celery shell. In a process process run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;celery&lt;span class="w"&gt; &lt;/span&gt;-A&lt;span class="w"&gt; &lt;/span&gt;blog&lt;span class="w"&gt; &lt;/span&gt;shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Launching the shell session gives us access to all the currently registered tasks, you can see whats available with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registered&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;celery@fedora&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blog.celery.debug_task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see from the namespace, this is the same task we defined in &lt;code&gt;blog/celery.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Request: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="si"&gt;!r}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can trigger the &lt;code&gt;debug_task&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;debug_task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="n"&gt;d109d4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cef1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;477&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bbbf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;baf5acf2857&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you check back on your celery worker process this task should have been received + executed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2022-09-17 15:45:31,460: INFO/MainProcess&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug_task&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;55d109d4-cef1-477a-bbbf-6baf5acf2857&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2022-09-17 15:45:31,461: WARNING/ForkPoolWorker-8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blog.celery.debug_task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;55d109d4-cef1-477a-bbbf-6baf5acf2857&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shadow&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eta&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;expires&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group_index&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;retries&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timelimit&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;None, None&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root_id&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;55d109d4-cef1-477a-bbbf-6baf5acf2857&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent_id&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;argsrepr&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kwargsrepr&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;origin&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gen42154@fedora&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ignore_result&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;properties&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;correlation_id&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;55d109d4-cef1-477a-bbbf-6baf5acf2857&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reply_to&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a9e82ead-2c56-3682-883c-421d7ac5d9d1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delivery_mode&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delivery_info&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exchange&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;routing_key&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;celery&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;priority&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body_encoding&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delivery_tag&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5191f0a6-d448-4fd8-ace1-a23fa674c25a&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reply_to&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a9e82ead-2c56-3682-883c-421d7ac5d9d1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;correlation_id&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;55d109d4-cef1-477a-bbbf-6baf5acf2857&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;celery@fedora&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delivery_info&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exchange&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;routing_key&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;celery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;priority&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;redelivered&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is_eager&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;callbacks&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;errbacks&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chain&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chord&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;called_directly&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_protected&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2022-09-17 15:45:31,461: INFO/ForkPoolWorker-8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug_task&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;55d109d4-cef1-477a-bbbf-6baf5acf2857&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;succeeded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0006546240001625847&lt;/span&gt;&lt;span class="nl"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Configure Celery Results Backend (redis)&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;debug_taks&lt;/code&gt; doesn't return any useful information, but what if we wanted to perform some log running computation and save the results somewhere?&lt;/p&gt;
&lt;p&gt;To store results we need to configure a &lt;a href="https://docs.celeryq.dev/en/stable/getting-started/first-steps-with-celery.html#keeping-results"&gt;results
backend&lt;/a&gt;.
Luckily, celery supports using redis as both a results backend and a broker, so
we can re-use the redis instance we have already. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In part 2 I'll be demonstrating how to use django (and it's
configured DB instance) as a results backend instead.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;blog/settings.py&lt;/code&gt; define &lt;code&gt;CELERY_RESULT_BACKEND&lt;/code&gt; (it should be the same value as &lt;code&gt;CELERY_BROKER_URL&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;redis://localhost/0&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CELERY_RESULT_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;redis://localhost/0&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Triggering Tasks (With Reults)&lt;/h2&gt;
&lt;p&gt;Lets define a new example function in &lt;code&gt;blog/celery.py&lt;/code&gt; called &lt;code&gt;square&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After making this change you will need to restart celery. Once you've done so the new &lt;code&gt;blog.celery.square&lt;/code&gt;
task should appear under &lt;code&gt;[tasks]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="nv"&gt;@fedora&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.2.7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dawn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;chorus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.19.8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;200.&lt;/span&gt;&lt;span class="n"&gt;fc36&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;glibc2&lt;/span&gt;&lt;span class="mf"&gt;.35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nl"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;0x7f48c5467a90&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nl"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nl"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OFF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--------------&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;queues&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;


&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug_task&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just as before, (inside a celery shell process) lets trigger our new &lt;code&gt;square&lt;/code&gt; task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If forget to configure a result backend you'll encounter an error like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;console&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/celery/result.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;224&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_pending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/celery/backends/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;756&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wait_for_pending&lt;/span&gt;
    &lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/jackevans/.local/share/virtualenvs/blog-ZV8xlUiZ/lib/python3.10/site-packages/celery/backends/base.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1087&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_is_disabled&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E_NO_BACKEND&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Next Time&lt;/h2&gt;
&lt;p&gt;This concludes part 1, in part 2 we've explore using the
&lt;code&gt;django-celery-results&lt;/code&gt; package to configure Djagno as a results backend and
discuss cases where this might be necessary.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>Review Fedora 36 on the Lenovo Thinkpad X13 (Gen 1) 🐧💻</title><link href="https://jackevansevo.github.io/review-fedora-36-on-the-lenovo-thinkpad-x13-gen-1.html" rel="alternate"></link><published>2022-08-07T00:00:00+01:00</published><updated>2022-08-07T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-08-07:/review-fedora-36-on-the-lenovo-thinkpad-x13-gen-1.html</id><summary type="html">&lt;p&gt;&lt;img alt="Thinkpad X13" src="https://jackevansevo.github.io/images/thinkpad-x13.jpg" title="Writing this post with a morning Coffee"&gt;&lt;/p&gt;
&lt;p&gt;I recently picked up a used Lenovo Thinkpad X13 from eBay with the intention of
replacing my well loved Thinkpad X220 which is starting to show its age.&lt;/p&gt;
&lt;p&gt;After a brief stint attempting to exclusively use WSL, frustrations with high
memory usage and intrusive Windows updates led me to try …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Thinkpad X13" src="https://jackevansevo.github.io/images/thinkpad-x13.jpg" title="Writing this post with a morning Coffee"&gt;&lt;/p&gt;
&lt;p&gt;I recently picked up a used Lenovo Thinkpad X13 from eBay with the intention of
replacing my well loved Thinkpad X220 which is starting to show its age.&lt;/p&gt;
&lt;p&gt;After a brief stint attempting to exclusively use WSL, frustrations with high
memory usage and intrusive Windows updates led me to try dual booting Fedora.
Overall it's been a positive experience and something I wish I'd done sooner.&lt;/p&gt;
&lt;p&gt;This is just a quick run down of my experience with Fedora on the Thinkpad X13.
This isn't intended to be a review of the hardware, merely a first hand account
of how the distro performs/interacts when installed on the device.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Thinkpad X13" src="https://jackevansevo.github.io/images/thinkpad-x13-top-down.jpg" title="Top down view (ignore the fingerprints)"&gt;&lt;/p&gt;
&lt;h1&gt;Upsides&lt;/h1&gt;
&lt;p&gt;A quick rundown of things that have historically plagued Linux in the past, and how this distro compares:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ WiFi: works out of the box&lt;/li&gt;
&lt;li&gt;✅ Suspend resume appears to work&lt;/li&gt;
&lt;li&gt;✅ Closing the lid appears to suspend / hibernate the laptop&lt;/li&gt;
&lt;li&gt;✅ Function keys: all work&lt;/li&gt;
&lt;li&gt;✅ Fingerprint reader: works out of the box (which surprised me)&lt;/li&gt;
&lt;li&gt;✅ External HMDI monitor works when plugged in via USB-C hub&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Gnome Desktop&lt;/h2&gt;
&lt;p&gt;It's nice to see the Gnome Desktop continues to improve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I much prefer the new default horizontal workspace management on Gnome desktop&lt;/li&gt;
&lt;li&gt;Coming from MacOS / Windows (or even alternate Linux desktop) this feels much more intuitive.&lt;/li&gt;
&lt;li&gt;I'm a fan of the new GK4 Libadwaita theming, everything feels nice and consistent (providing you don't install an application outside of the Gnome ecosystem)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System performance feels really snappy, with low idle memory usage
&lt;img alt="Resource Usage" src="https://jackevansevo.github.io/images/gnome-system-monitor.png" title="Resource usage with typical Django docker compose web-dev workflow"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I like the new system wide dark/light theme preference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;But I wish that similar to MacOS this could be toggle automatically during the day/night cycle (similar to the way night light works)&lt;/li&gt;
&lt;li&gt;I haven't had a single desktop crash (so far)&lt;/li&gt;
&lt;li&gt;I appreciate the new Gnome power mode settings, which lets me throttle performance to save power when away from my desk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Gnome power saver" src="https://jackevansevo.github.io/images/gnome-power-saver.png"&gt;&lt;/p&gt;
&lt;h1&gt;Downsides&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The builtin Gnome desktop screen/video recorder seemed to record choppy/laggy video&lt;/li&gt;
&lt;li&gt;Would have been nice if this had worked smoothly out of the box but I was forced to revert to using OBS&lt;/li&gt;
&lt;li&gt;Firefox struggles with video playback out of the box (perhaps media codecs are required)&lt;/li&gt;
&lt;li&gt;Font rendering feels a bit lackluster on Fedora compared to the default MacOS or even Ubuntu experience&lt;/li&gt;
&lt;li&gt;It's impossible to right click using the touchpad&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="Linux"></category><category term="Fedora"></category></entry><entry><title>Bootstrapping django-allauth with migrations</title><link href="https://jackevansevo.github.io/bootstrapping-django-allauth-with-migrations.html" rel="alternate"></link><published>2022-08-06T00:00:00+01:00</published><updated>2022-08-06T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-08-06:/bootstrapping-django-allauth-with-migrations.html</id><summary type="html">&lt;p&gt;Recently I added
&lt;a href="https://django-allauth.readthedocs.io/en/latest/index.html"&gt;django-allauth&lt;/a&gt; to
my site, to enable logging in with third party auth providers (such as Google).&lt;/p&gt;
&lt;h2&gt;Allauth docuemntation&lt;/h2&gt;
&lt;p&gt;As per the &lt;a href="https://django-allauth.readthedocs.io/en/latest/installation.html#post-installation"&gt;installation
instructions&lt;/a&gt;
allauth recommends the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;Site&lt;/code&gt; for your domain, matching &lt;code&gt;settings.SITE_ID&lt;/code&gt; (&lt;code&gt;django.contrib.sites&lt;/code&gt; app).&lt;/li&gt;
&lt;li&gt;For each OAuth based provider, either add …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Recently I added
&lt;a href="https://django-allauth.readthedocs.io/en/latest/index.html"&gt;django-allauth&lt;/a&gt; to
my site, to enable logging in with third party auth providers (such as Google).&lt;/p&gt;
&lt;h2&gt;Allauth docuemntation&lt;/h2&gt;
&lt;p&gt;As per the &lt;a href="https://django-allauth.readthedocs.io/en/latest/installation.html#post-installation"&gt;installation
instructions&lt;/a&gt;
allauth recommends the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;Site&lt;/code&gt; for your domain, matching &lt;code&gt;settings.SITE_ID&lt;/code&gt; (&lt;code&gt;django.contrib.sites&lt;/code&gt; app).&lt;/li&gt;
&lt;li&gt;For each OAuth based provider, either add a &lt;code&gt;SocialApp&lt;/code&gt; (&lt;code&gt;socialaccount&lt;/code&gt; app) containing the required client credentials, or, make sure that these are configured via the &lt;code&gt;SOCIALACCOUNT_PROVIDERS[&amp;lt;provider&amp;gt;]['APP']&lt;/code&gt; setting (see example above).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Django documentation&lt;/h2&gt;
&lt;p&gt;According to the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/contrib/sites/#enabling-the-sites-framework"&gt;Django documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django.contrib.sites&lt;/code&gt; registers a &lt;code&gt;post_migrate&lt;/code&gt; signal handler which creates
a default site named &lt;code&gt;example.com&lt;/code&gt; with the domain &lt;code&gt;example.com&lt;/code&gt;. This site
will also be created after Django creates the test database. To set the correct
name and domain for your project, you can use a &lt;a href="https://docs.djangoproject.com/en/4.0/topics/migrations/#data-migrations"&gt;data migration&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;The default &lt;code&gt;example.com&lt;/code&gt; site isn't particularly useful default when working
with the &lt;code&gt;allauth&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;This configuration requires you to manually head into the admin to:
- Create a new site for &lt;code&gt;localhost:8000&lt;/code&gt; (or however you're developing locally)
- Create a new &lt;code&gt;SocialApp&lt;/code&gt; for each provider (&lt;code&gt;google&lt;/code&gt; in my case) along with
  respective secrets, then link to your created site&lt;/p&gt;
&lt;p&gt;This is required every time you have to bootstrap your environment, i.e. when
cloning the project on a new machine, or after wiping your DB.&lt;/p&gt;
&lt;p&gt;I wanted a mechanism to be able to quickly bootstrap my project during
development across machines with minimal manual intervention.&lt;/p&gt;
&lt;p&gt;The docs indicate a
&lt;a href="https://docs.djangoproject.com/en/4.0/topics/migrations/#module-django.db.migrations"&gt;migration&lt;/a&gt;
can be used to set a &lt;em&gt;correct name and domain for your project&lt;/em&gt; but doesn't
specify how.&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;After a bit of googling I came up with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.sites.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Site&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;feeds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0001_initial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sites&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0002_alter_domain_unique&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_site&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;feeds&lt;/code&gt; is the name of the app I'm developing, and &lt;code&gt;sites&lt;/code&gt; refers to the
builtin &lt;code&gt;django.contrib.sites&lt;/code&gt; app (added to &lt;code&gt;INSTALLED_APPS&lt;/code&gt;). By specifying
these as dependencies this ensures the migration is ran only once these have
completed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; it's possible to manually create blank migrations on a per app basis (not from models) with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./manage.py makemigrations &amp;lt;app&amp;gt; --empty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;This alone isn't sufficient to bootstrap a working project with
allauth. Allauth still requires an additional &lt;code&gt;SocialApp&lt;/code&gt; integration to be
created and linked to your site.&lt;/p&gt;
&lt;p&gt;Fortunately this is fairly trivial to extend:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;allauth.socialaccount.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SocialApp&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.sites.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Site&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;social_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SocialApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;google&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;google&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GOOGLE_CLIENT_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GOOGLE_CLIENT_SECRET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;social_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;feeds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0001_initial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sites&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0002_alter_domain_unique&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;socialaccount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0001_initial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_site&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By storing the secrets as environment variables I can provide a &lt;code&gt;secrets.env&lt;/code&gt; file (that's ignored by version control) with the following values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GOOGLE_CLIENT_ID=&amp;quot;****&amp;quot;
GOOGLE_CLIENT_SECRET=&amp;quot;****&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I clone the project on a new machine (or want to wipe my DB volume and start
over) I can quickly bootstrap my project with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;makemigrations
$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And Google login (via allauth) should work out of the box.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Django"></category></entry><entry><title>An Sqlalchemy Footgun Revisited</title><link href="https://jackevansevo.github.io/an-sqlalchemy-footgun-revisited.html" rel="alternate"></link><published>2022-07-19T00:00:00+01:00</published><updated>2022-07-19T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-07-19:/an-sqlalchemy-footgun-revisited.html</id><summary type="html">&lt;p&gt;In this &lt;a href="/posts/an-sqlalchemy-footgun/"&gt;previous post&lt;/a&gt; I wrote about shooting myself in the foot 🔫 with Cartesian products in SQLAlchemy.&lt;/p&gt;
&lt;p&gt;Lets visit the SQLAlchemy model example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In this &lt;a href="/posts/an-sqlalchemy-footgun/"&gt;previous post&lt;/a&gt; I wrote about shooting myself in the foot 🔫 with Cartesian products in SQLAlchemy.&lt;/p&gt;
&lt;p&gt;Lets visit the SQLAlchemy model example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;owner_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;users.id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Database Setup&lt;/h2&gt;
&lt;p&gt;Recall: in the DB we had x2 &lt;code&gt;User&lt;/code&gt;(s) (Homer &amp;amp; Marge), and x2 &lt;code&gt;Item&lt;/code&gt;(s) associated with Homer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;homer.simpson@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;marge.simpson@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Duff Beer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lard Lad Donut&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# Items associated with homer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reddit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f338ea97730&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reddit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f338ea96e00&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Items associated with marge&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Old Behaviour&lt;/h2&gt;
&lt;p&gt;In the previous post we wanted to write a query to fetch all the &lt;code&gt;Item&lt;/code&gt;(s) associated with &lt;code&gt;marge.simpson@gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Duff Beer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lard Lad Donut&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the background SQLAlchemy would silently perform a cartesian join, sometimes
having unintentional results (in this case returning ALL &lt;code&gt;Item&lt;/code&gt;(s)).&lt;/p&gt;
&lt;h2&gt;New Behaviour&lt;/h2&gt;
&lt;p&gt;If we're using SQLalchemy 2.0 and we attempt to execute this query without first joining on the &lt;code&gt;User&lt;/code&gt; table we now get a warning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d6991ed67293&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SAWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;statement&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;cartesian&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Apply&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Duff Beer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lard Lad Donut&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SAWarning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cartesian&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;between&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Apply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;between&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which I think this is really awesome 🥳&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Aside: Here's the equivalent query rewritten in the newer SQLALchemy 2.0 query style:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;marge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;971&lt;/span&gt;&lt;span class="n"&gt;dc4667e1f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SAWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;statement&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;cartesian&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Apply&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Duff Beer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lard Lad Donut&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As discussed in the previous post, what we really want is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Python"></category><category term="SQLAlchemy"></category></entry><entry><title>Per project IPython project history in docker compose</title><link href="https://jackevansevo.github.io/per-project-ipython-project-history-in-docker-compose.html" rel="alternate"></link><published>2022-07-13T00:00:00+01:00</published><updated>2022-07-13T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-07-13:/per-project-ipython-project-history-in-docker-compose.html</id><summary type="html">&lt;p&gt;A neat trick I learnt recently (&lt;a href="[https://github.com/cookiecutter/cookiecutter-django/issues/1589"&gt;From this Github thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;It's possible to store IPython history persistently per project in a docker compose, i.e:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/docker-compose.yml b/docker-compose.yml&lt;/span&gt;
&lt;span class="gh"&gt;index 043b004..7e6d029 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/docker-compose.yml&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/docker-compose.yml&lt;/span&gt;
&lt;span class="gu"&gt;@@ -18,7 +18,7 @@ services:&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    volumes:
&lt;span class="w"&gt; &lt;/span&gt;      - .:/app …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A neat trick I learnt recently (&lt;a href="[https://github.com/cookiecutter/cookiecutter-django/issues/1589"&gt;From this Github thread&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;It's possible to store IPython history persistently per project in a docker compose, i.e:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/docker-compose.yml b/docker-compose.yml&lt;/span&gt;
&lt;span class="gh"&gt;index 043b004..7e6d029 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/docker-compose.yml&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/docker-compose.yml&lt;/span&gt;
&lt;span class="gu"&gt;@@ -18,7 +18,7 @@ services:&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    volumes:
&lt;span class="w"&gt; &lt;/span&gt;      - .:/app
&lt;span class="gi"&gt;+      - ipython_data_local:/root/.ipython/profile_default&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    build:
&lt;span class="w"&gt; &lt;/span&gt;      context: .
&lt;span class="w"&gt; &lt;/span&gt;      target: dev
&lt;span class="gu"&gt;@@ -85,3 +85,7 @@ services:&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;    depends_on:
&lt;span class="w"&gt; &lt;/span&gt;      - redis
&lt;span class="w"&gt; &lt;/span&gt;      - db
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+&lt;/span&gt;
&lt;span class="gi"&gt;+volumes:&lt;/span&gt;
&lt;span class="gi"&gt;+    ipython_data_local: {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Previously I'd tried mounting &lt;code&gt;~/.ipython/profile_default/history.sqlite&lt;/code&gt; but I found this per project solution to be much nicer.&lt;/p&gt;
&lt;p&gt;Sidenote: the &lt;a href="https://github.com/cookiecutter/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt; repo has some really nice features (even if you're not using the template itself)&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Docker"></category></entry><entry><title>Python gracefully detaching debuggers from running containers 🐍🐳🪳</title><link href="https://jackevansevo.github.io/python-gracefully-detaching-debuggers-from-running-containers.html" rel="alternate"></link><published>2022-07-08T00:00:00+01:00</published><updated>2022-07-08T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-07-08:/python-gracefully-detaching-debuggers-from-running-containers.html</id><summary type="html">&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Lets say you have a simple service you want to debug that's running in a docker container. So you add a &lt;code&gt;breakpoint()&lt;/code&gt; to the relevant code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;breakpoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;feeds/index.html&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You trigger this logic in your service …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Lets say you have a simple service you want to debug that's running in a docker container. So you add a &lt;code&gt;breakpoint()&lt;/code&gt; to the relevant code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;breakpoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;feeds/index.html&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You trigger this logic in your service, and attempt to attach to your running container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker attach my-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the breakpoint gets hit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;133&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;132&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;breakpoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;133&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you want to end your debugging session and gracefully detach from the attached process without killing the parent container.&lt;/p&gt;
&lt;p&gt;So you attempt to hit &lt;code&gt;&amp;lt;Ctrl+c&amp;gt;&lt;/code&gt; to exit the debugger how you normally would.&lt;/p&gt;
&lt;p&gt;But this kills your service ... (forcing you to manually restart)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;❯ docker ps -a
CONTAINER ID   IMAGE               COMMAND                  CREATED
1f45e69a2836   my_service      &amp;quot;python manage.py ru…&amp;quot;   2 hours ago   Exited (0) 20 seconds ago                                      feedreader_app_1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dead Docker" src="https://leoh0.github.io/images/dead_docker.png"&gt;&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Recently I discovered you can specify an exit sequence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker attach --detach-keys=&amp;quot;ctrl-c&amp;quot; my_service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now when you hit the &lt;code&gt;&amp;lt;Ctrl+c&amp;gt;&lt;/code&gt; escape sequence in your debugger session the app will close as exepected&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;133&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;132&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;breakpoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;133&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Jul&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GET / HTTP/1.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34757&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Alternative&lt;/h2&gt;
&lt;p&gt;Or you can modify the &lt;code&gt;restart&lt;/code&gt; policy of your service, e.g:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker run -it -d --restart always my_service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example I have the following in my &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;always&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;stdin_open&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;runserver&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8000:8000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This way even if you trigger the &lt;code&gt;&amp;lt;Ctrl+C&amp;gt;&lt;/code&gt; exit sequence in your attached container and kill the parent, the service will automatically restart.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category><category term="Docker"></category></entry><entry><title>An SQLAlchemy Footgun</title><link href="https://jackevansevo.github.io/an-sqlalchemy-footgun.html" rel="alternate"></link><published>2022-06-04T00:00:00+01:00</published><updated>2022-06-04T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-06-04:/an-sqlalchemy-footgun.html</id><summary type="html">&lt;p&gt;Something I learnt the hard way recently.&lt;/p&gt;
&lt;p&gt;Let's say you have the following SQLAlchemy models, representing a straightforward many-to-one relationship:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Something I learnt the hard way recently.&lt;/p&gt;
&lt;p&gt;Let's say you have the following SQLAlchemy models, representing a straightforward many-to-one relationship:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;owner_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;users.id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_populates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each &lt;code&gt;Item&lt;/code&gt; has a parent &lt;code&gt;User&lt;/code&gt;, each &lt;code&gt;User&lt;/code&gt; can have multiple &lt;code&gt;items&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In my DB I've got the following data (x2 Users (Homer &amp;amp; Marge), and x2 Items associated with Homer)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;homer.simpson@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;marge.simpson@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Duff Beer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lard Lad Donut&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# Items associated with homer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reddit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f338ea97730&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;reddit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f338ea96e00&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Items associated with marge&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Homer Simpson eating a donut" src="https://upload.wikimedia.org/wikipedia/en/0/02/Homer_Simpson_2006.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Lets say I want to write a query to fetch me all the &lt;code&gt;Items&lt;/code&gt; associated with &lt;code&gt;marge.simpson@gmail.com&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Duff Beer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lard Lad Donut&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🤔 Hold on, this looks to have returned all the items associated with Homer, what's going on here?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;
Lets peek under the hood by printing the generated SQL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items_title&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks like the above is missing a &lt;code&gt;.join&lt;/code&gt; clause, and its absence can be disastrous. Turns out SQLAlchemy will happily let you &lt;code&gt;filter&lt;/code&gt; by a clause for a column you've not joined on.&lt;/p&gt;
&lt;p&gt;What you need to do is explicitly &lt;code&gt;.join()&lt;/code&gt; on the &lt;code&gt;user&lt;/code&gt; table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can prove this is doing the right thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;marge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items_title&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner_id&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Python"></category><category term="SQLAlchemy"></category></entry><entry><title>PSA: Breaking changes to neovim LSP formatting filter on nightly</title><link href="https://jackevansevo.github.io/psa-breaking-changes-to-neovim-lsp-formatting-filter-on-nightly.html" rel="alternate"></link><published>2022-06-02T00:00:00+01:00</published><updated>2022-06-02T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-06-02:/psa-breaking-changes-to-neovim-lsp-formatting-filter-on-nightly.html</id><summary type="html">&lt;p&gt;In case anyone else runs into the same issue.&lt;/p&gt;
&lt;p&gt;I ran into an issue this morning installing the latest neovim nightly build: All my onsave formatting appeared to be broken 💥&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Error detected while processing BufWritePre Autocommands for &amp;quot;&amp;lt;buffer=1&amp;gt;&amp;quot;:
Error executing lua callback: /home/jackevans/Dotfiles/nvim/init.lua:95 …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In case anyone else runs into the same issue.&lt;/p&gt;
&lt;p&gt;I ran into an issue this morning installing the latest neovim nightly build: All my onsave formatting appeared to be broken 💥&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Error detected while processing BufWritePre Autocommands for &amp;quot;&amp;lt;buffer=1&amp;gt;&amp;quot;:
Error executing lua callback: /home/jackevans/Dotfiles/nvim/init.lua:95: attempt to index local
 &amp;#39;client&amp;#39; (a function value)
stack traceback:
  /home/jackevans/Dotfiles/nvim/init.lua:95: in function &amp;lt;/home/jackevans/Dotfiles/nvim/init.lua:94&amp;gt;
  vim/shared.lua: in function &amp;lt;vim/shared.lua:0&amp;gt;
  vim/shared.lua: in function &amp;#39;tbl_filter&amp;#39;
  /usr/share/nvim/runtime/lua/vim/lsp/buf.lua:212: in function &amp;#39;format&amp;#39;
  /home/jackevans/Dotfiles/nvim/init.lua:91: in function &amp;#39;lsp_formatting&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It seemed to be blowing up in the following piece of Lua code in my &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;lsp_formatting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufnr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lsp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;-- filter out clients that you don&amp;#39;t want to use&lt;/span&gt;
      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tbl_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;~=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tsserver&amp;quot;&lt;/span&gt;
      &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;bufnr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bufnr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Investigating&lt;/h2&gt;
&lt;p&gt;Instead of browsing Github issues / trawling forums this is probably something minor we can fix (right???)&lt;/p&gt;
&lt;p&gt;Lets take look at the commit log to see if anything had changed recently around LSP formatting ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jackevans&lt;/span&gt;&lt;span class="nv"&gt;@Thinkpad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;neovim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--grep=lsp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hmmm, &lt;a href="https://github.com/neovim/neovim/commit/fa3492c5f7645feb979c767046b6ff335ea9d6ca"&gt;this commit&lt;/a&gt; looks suspucious&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fa3492c5f7645feb979c767046b6ff335ea9d6ca&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mathias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fussenegger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mathias&lt;/span&gt;&lt;span class="nv"&gt;@zignar.net&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Wed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;May&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0200&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;feat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;turn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="c1"&gt;#18458)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;makes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;easier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;really&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;needs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;they&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;filter&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;manually&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`get_active_clients`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;The Fix&lt;/h1&gt;
&lt;p&gt;After a quick &lt;code&gt;git show fa3492c5f7645feb979c767046b6ff335ea9d6ca&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gd"&gt;-                    • filter (function|nil): Predicate to filter clients used&lt;/span&gt;
&lt;span class="gd"&gt;-                      for formatting. Receives the list of clients attached to&lt;/span&gt;
&lt;span class="gd"&gt;-                      bufnr as the argument and must return the list of&lt;/span&gt;
&lt;span class="gd"&gt;-                      clients on which to request formatting. Example:    • &amp;gt;&lt;/span&gt;
&lt;span class="gi"&gt;+                    • filter (function|nil): Predicate used to filter clients.&lt;/span&gt;
&lt;span class="gi"&gt;+                      Receives a client as argument and must return a boolean.&lt;/span&gt;
&lt;span class="gi"&gt;+                      Clients matching the predicate are included. Example:    • &amp;gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;                        -- Never request typescript-language-server for formatting
&lt;span class="w"&gt; &lt;/span&gt;                        vim.lsp.buf.format {
&lt;span class="gd"&gt;-                          filter = function(clients)&lt;/span&gt;
&lt;span class="gd"&gt;-                            return vim.tbl_filter(&lt;/span&gt;
&lt;span class="gd"&gt;-                              function(client) return client.name ~= &amp;quot;tsserver&amp;quot; end,&lt;/span&gt;
&lt;span class="gd"&gt;-                              clients&lt;/span&gt;
&lt;span class="gd"&gt;-                            )&lt;/span&gt;
&lt;span class="gd"&gt;-                          end&lt;/span&gt;
&lt;span class="gi"&gt;+                          filter = function(client) return client.name ~= &amp;quot;tsserver&amp;quot; end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The solution is right there in the documentation ❤️ and exactly the same as the snippet I had in my &lt;code&gt;init.lua&lt;/code&gt; 🤯 (what are the chances)&lt;/p&gt;
&lt;p&gt;I made the corresponding change in my Dotfiles &lt;a href="https://github.com/Jackevansevo/Dotfiles/commit/6d6166fd3e28761a52f44cd83098bcbc6e7cb7de"&gt;here&lt;/a&gt; and everything works.&lt;/p&gt;
&lt;p&gt;Takeaways:
- If you're using nightly builds: things are probably going to break (and that's okay)
- Don't be scared to browse commits and investigate for yourself, this is the power of open source!
- The Neovim documentation is great&lt;/p&gt;</content><category term="misc"></category><category term="Neovim"></category></entry><entry><title>My Ideal Python Project Setup in 2022</title><link href="https://jackevansevo.github.io/my-ideal-python-project-setup-in-2022.html" rel="alternate"></link><published>2022-05-19T00:00:00+01:00</published><updated>2022-05-19T00:00:00+01:00</updated><author><name>Jack Evans</name></author><id>tag:jackevansevo.github.io,2022-05-19:/my-ideal-python-project-setup-in-2022.html</id><summary type="html">&lt;p&gt;&lt;img alt="The world if everyone Python project used Black/Isort/Mypy" src="https://i.kym-cdn.com/entries/icons/mobile/000/026/738/future.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Unlike newer languages like Rust or Go which provide opinionated tooling out of the box, Python leaves a lot of those decisions up to the community. There's a plethora of options out there for type-checking, linting, dependency management and testing. Sometimes the amount of choice might feel overwhelming. Thankfully the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="The world if everyone Python project used Black/Isort/Mypy" src="https://i.kym-cdn.com/entries/icons/mobile/000/026/738/future.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Unlike newer languages like Rust or Go which provide opinionated tooling out of the box, Python leaves a lot of those decisions up to the community. There's a plethora of options out there for type-checking, linting, dependency management and testing. Sometimes the amount of choice might feel overwhelming. Thankfully the community appears to have rallied around a common set of standard packages.&lt;/p&gt;
&lt;p&gt;Here's my attempt at a non exhaustive list of everything I'd consider adopting for any greenfield Python project at the time of writing (2022). Disclaimer: this is just my opinion (formed from my experience writing software), your own opinions might differ.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://black.readthedocs.io/en/stable/"&gt;Black&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Life is too short to argue about code formatting preferences. During code review, any discussions surrounding formatting detract from the purpose of the review itself. With that said, I'm thankful the wider Python programming community has settled on Black as the defacto standard.&lt;/p&gt;
&lt;p&gt;Golang was the first major language I encountered that embraced code-autoformatting by default with &lt;code&gt;gofmt&lt;/code&gt;. A common mantra heard in this community is: &lt;em&gt;"Gofmt's style is nobody's favourite, but gofmt is everybody's favourite."&lt;/em&gt;. I feel the exact same could be said for Black.&lt;/p&gt;
&lt;p&gt;A few other code-formatting tools exist (e.g: &lt;code&gt;yapf&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;), I don't care which one you pick,  as long as it eliminates squables over manual code formatting. I recommend &lt;code&gt;black&lt;/code&gt; purely because of it's popularity in the Python community. If a contributor complains you're using X formatter instead of Y, they're kind of missing the point.&lt;/p&gt;
&lt;p&gt;If you're using &lt;code&gt;black&lt;/code&gt; alongside &lt;code&gt;flake8&lt;/code&gt; remmeber to read the documentation for &lt;a href="https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#flake8"&gt;using black with other tools&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[flake8]&lt;/span&gt;
&lt;span class="na"&gt;max-line-length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;88&lt;/span&gt;
&lt;span class="na"&gt;extend-ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;E203&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;a href="https://pycqa.github.io/isort/"&gt;Isort&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Despite a few &lt;a href="https://github.com/psf/black/issues/333"&gt;open issues&lt;/a&gt; on the GH issue tracker Black doesn't yet support sorting imports.&lt;/p&gt;
&lt;p&gt;I've found sorting imports (particularly breaking imports across multiple lines) can sometimes increase the amount of diff-noise in a Pull Request. &lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;isort&lt;/code&gt; alongside &lt;code&gt;black&lt;/code&gt; might cause a few conflicts. To use both tools alongside each other refer to &lt;a href="https://pycqa.github.io/isort/docs/configuration/black_compatibility.html"&gt;https://pycqa.github.io/isort/docs/configuration/black_compatibility.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Usually I just add the following to my &lt;code&gt;setup.cfg&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[isort]&lt;/span&gt;
&lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;black&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;a href="https://mypy.readthedocs.io/en/stable/"&gt;Mypy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mypy is a static type checker for Python. Adopting static type checking can help identify bugs in your code, preventing an entire category of possible runtime errors in your code. For this reason I'd strongly recommend any greenfield Python project to adopt mypy (or another static type checking tool) in some capacity. &lt;/p&gt;
&lt;p&gt;For an excellent case study I highly recommend you read: &lt;a href="https://sethmlarson.dev/blog/tests-arent-enough-case-study-after-adding-types-to-urllib3"&gt;Tests aren’t enough: Case study after adding type hints to urllib3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That being said type checking may not be appropriate in certain situations, i.e. when writing short-scripts, throw away code or quick prototypes. So use your better judgement. One of the major benefits (and arguably also a shortcoming) of &lt;code&gt;mypy&lt;/code&gt; and gradual type checking is you get  to choose the extent to which you type-check your code, using type-hints and static analysis only where necessary.&lt;/p&gt;
&lt;p&gt;Not specifically related to &lt;code&gt;mypy&lt;/code&gt; itself, but one of the surprising benefits I've found from adding &lt;a href="https://docs.python.org/3/library/typing.html"&gt;type annotations&lt;/a&gt; to code is that (depending on your editor) it greatly improves auto-complete suggestions. Additionally I've found type-annotations can (in some cases) improve the readability of code. This can be useful in a collaborative environment where you're frequently reading code written by other developers.&lt;/p&gt;
&lt;p&gt;So even if you're not type-checking your code with a tool like &lt;code&gt;mypy&lt;/code&gt;, you may wish to sprinkle your code with type annotations for these benefits alone.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://pre-commit.com/"&gt;Pre-commit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I've integrated most of the aforementioned tools in my text-editor. My code typically gets automatically formatted on save and linter/type-checking errors are displayed inline. If you use something like Pycharm or VSCode, this is pretty much the norm. This can help catch most type/linting/formatting issues during development.&lt;/p&gt;
&lt;p&gt;However, its important to realize that not everyone writes code this way. Some might not have configured their editor appropriately or prefer to disable these rules, others might use editors that don't provide this kind of functionality.&lt;/p&gt;
&lt;p&gt;Even with fancy editor tool integrations, sometimes errors slip through the cracks. If we're lucky these errors might get caught in CI. But wouldn't it be better to catch these errors before pushing code up to our remote git server?&lt;/p&gt;
&lt;p&gt;In other circumstances, sometimes it's not practical to have scripts constantly running on file change. Particularly if those scripts are slow or expensive to run (i.e. tests or type-checking). One example that springs to mind is using &lt;code&gt;vulture&lt;/code&gt; to check for dead code in your project.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git hooks" src="https://miro.medium.com/max/450/1*bAJrSit_8HoM5sy7ydw0zw.png"&gt;&lt;/p&gt;
&lt;p&gt;For this reason, I find it incredibly useful to have tests, formatters &amp;amp; linting rules can as part of a git pre-commit hook (in edition to check integrated with my editor). &lt;/p&gt;
&lt;p&gt;This way myself (and other developers) can catch errors locally (before pushing to the remote) independent of what editors we're using.&lt;/p&gt;
&lt;p&gt;The great thing about &lt;code&gt;pre-commit&lt;/code&gt; is that it's entirely opt-in. Only developers that wish to enable it per project will be effected. Not every developer will find this kind of tooling useful in their personal developer workflow, this way we're not forcing arbitrary rules/conventions down peoples throats.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://docs.pytest.org"&gt;Pytest&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I suppose this boils down to personal preference more than anything else in this list. I personally prefer how &lt;code&gt;pytest&lt;/code&gt; tests feel like they generate less boiler plate. Conceptually I also find it much easier to share fixtures across tests than group related tests by class. &lt;/p&gt;
&lt;p&gt;One of the great things with pytest is it's completely compatible with &lt;code&gt;unittest&lt;/code&gt;, so you can simply use &lt;code&gt;pytest&lt;/code&gt; as a test-runner for your existing test-suite without having to re-write anything.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; vs &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;Pipenv&lt;/a&gt; ???&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Jakie Chan What" src="https://i.pinimg.com/originals/c1/3a/2b/c13a2b2e10855bffdc014f121c5eff7e.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Weirdly the community doesn't appear to have quite settled on one favoured dependency management solution. I've used both in the past and found both to be perfectly reasonable solutions.&lt;/p&gt;
&lt;p&gt;I've also had success using &lt;a href="https://github.com/jazzband/pip-tools"&gt;jazzband/pip-tools&lt;/a&gt; within project virtual environments to compile and pin dependencies&lt;/p&gt;
&lt;p&gt;I won't recommend a specific tool here. Any choice is fine providing you do the following:
- Lock/pin your dependencies
- Have a mechanism to easily graph, upgrade and audit your dependencies 
- Distinguish and split between your dev and prod dependencies (optimization)&lt;/p&gt;
&lt;h1&gt;Personal tools&lt;/h1&gt;
&lt;p&gt;There's a few things that I personally like to include (for my own use) when working on Python projects.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://direnv.net/"&gt;Dirnev&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using Direnv enables you to automatically activate python virtual-environments when you enter a new directory, eliminating the need to manually activate/deactivate virtual environments per project.&lt;/p&gt;
&lt;p&gt;Direnv is flexible and unopinionated about the specifics of virtualenv management, supporting &lt;code&gt;pipenv&lt;/code&gt;, &lt;code&gt;poetry&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt; out of the box. This flexibility should makes it more than suitable for most projects.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://ipython.org/"&gt;Ipython&lt;/a&gt; &amp;amp; &lt;a href="https://pypi.org/project/ipdb/"&gt;ipdb&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This one is another no-brainer (if not already installed). Setting ipdb (ipython-debugger) as the default debugger for Python gives a much better experience over the default &lt;code&gt;pdb&lt;/code&gt;. I like to make this the default by setting the builtin &lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;p&gt;I couple this with &lt;code&gt;direnv&lt;/code&gt; (above) to automatically export the variable per project by including the following setting in my &lt;code&gt;.envrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PYTHONBREAKPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works great for me but if you're using alternatives like the Pycharm builtin debugger then this approach won't be necessary.&lt;/p&gt;</content><category term="misc"></category><category term="Python"></category></entry></feed>